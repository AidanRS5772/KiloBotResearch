
build/ohc.elf:     file format elf32-avr


Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7008:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    700c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7010:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7014:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7018:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    701c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7020:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7024:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7028:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    702c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7030:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7034:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7038:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    703c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7040:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7044:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7048:	0c 94 48 38 	jmp	0x7090	; 0x7090 <__vector_18>
    704c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7050:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7054:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7058:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    705c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7060:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7064:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_clear_bss>:
    7074:	22 e0       	ldi	r18, 0x02	; 2

00007076 <.Loc.1>:
    7076:	a0 e0       	ldi	r26, 0x00	; 0

00007078 <.Loc.2>:
    7078:	b1 e0       	ldi	r27, 0x01	; 1

0000707a <.Loc.3>:
    707a:	01 c0       	rjmp	.+2      	; 0x707e <.Loc.5>

0000707c <.Loc.4>:
    707c:	1d 92       	st	X+, r1

0000707e <.Loc.5>:
    707e:	a0 32       	cpi	r26, 0x20	; 32

00007080 <.Loc.6>:
    7080:	b2 07       	cpc	r27, r18

00007082 <.Loc.7>:
    7082:	e1 f7       	brne	.-8      	; 0x707c <.Loc.4>

00007084 <L0^A>:
    7084:	0e 94 01 3a 	call	0x7402	; 0x7402 <main>
    7088:	0c 94 45 3c 	jmp	0x788a	; 0x788a <_exit>

0000708c <__bad_interrupt>:
    708c:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
    7090:	1f 92       	push	r1

00007092 <.LCFI0>:
    7092:	0f 92       	push	r0

00007094 <.LCFI1>:
    7094:	0f b6       	in	r0, 0x3f	; 63
    7096:	0f 92       	push	r0
    7098:	11 24       	eor	r1, r1
    709a:	0f 93       	push	r16

0000709c <.LCFI2>:
    709c:	1f 93       	push	r17

0000709e <.LCFI3>:
    709e:	2f 93       	push	r18

000070a0 <.LCFI4>:
    70a0:	3f 93       	push	r19

000070a2 <.LCFI5>:
    70a2:	4f 93       	push	r20

000070a4 <.LCFI6>:
    70a4:	5f 93       	push	r21

000070a6 <.LCFI7>:
    70a6:	6f 93       	push	r22

000070a8 <.LCFI8>:
    70a8:	7f 93       	push	r23

000070aa <.LCFI9>:
    70aa:	8f 93       	push	r24

000070ac <.LCFI10>:
    70ac:	9f 93       	push	r25

000070ae <.LCFI11>:
    70ae:	af 93       	push	r26

000070b0 <.LCFI12>:
    70b0:	bf 93       	push	r27

000070b2 <.LCFI13>:
    70b2:	cf 93       	push	r28

000070b4 <.LCFI14>:
    70b4:	df 93       	push	r29

000070b6 <.LCFI15>:
    70b6:	ef 93       	push	r30

000070b8 <.LCFI16>:
    70b8:	ff 93       	push	r31

000070ba <.LCFI17>:
    uint8_t rx = UDR0;
    70ba:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

000070be <.LVL95>:

    packet_checksum ^= packet_buffer[packet_head];
    70be:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <packet_head>
    70c2:	e6 2f       	mov	r30, r22
    70c4:	f0 e0       	ldi	r31, 0x00	; 0
    70c6:	eb 5f       	subi	r30, 0xFB	; 251
    70c8:	fe 4f       	sbci	r31, 0xFE	; 254

000070ca <.Loc.589>:
    70ca:	80 81       	ld	r24, Z
    70cc:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <packet_checksum>
    70d0:	82 27       	eor	r24, r18

000070d2 <.Loc.590>:
    packet_buffer[packet_head] = rx;
    70d2:	90 83       	st	Z, r25

000070d4 <.Loc.592>:
    packet_checksum ^= rx;
    70d4:	28 2f       	mov	r18, r24
    70d6:	29 27       	eor	r18, r25
    70d8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <packet_checksum>

000070dc <.Loc.594>:
    packet_head++;
    70dc:	6f 5f       	subi	r22, 0xFF	; 255

000070de <.Loc.596>:
    if (packet_head >= PACKET_SIZE)
    70de:	64 38       	cpi	r22, 0x84	; 132
    70e0:	f8 f4       	brcc	.+62     	; 0x7120 <.L47>

000070e2 <.Loc.598>:
    packet_head++;
    70e2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <packet_head>
    70e6:	26 2f       	mov	r18, r22
    70e8:	30 e0       	ldi	r19, 0x00	; 0

000070ea <.Loc.599>:
        packet_head = 0;

    if (packet_buffer[packet_head] == PACKET_HEADER) {
    70ea:	f9 01       	movw	r30, r18
    70ec:	eb 5f       	subi	r30, 0xFB	; 251
    70ee:	fe 4f       	sbci	r31, 0xFE	; 254

000070f0 <.Loc.601>:
    70f0:	40 81       	ld	r20, Z
    70f2:	45 35       	cpi	r20, 0x55	; 85
    70f4:	01 f1       	breq	.+64     	; 0x7136 <.L56>

000070f6 <.L46>:
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
            packet_type = new_packet[1];
        }
    }
}
    70f6:	ff 91       	pop	r31
    70f8:	ef 91       	pop	r30
    70fa:	df 91       	pop	r29
    70fc:	cf 91       	pop	r28
    70fe:	bf 91       	pop	r27
    7100:	af 91       	pop	r26
    7102:	9f 91       	pop	r25
    7104:	8f 91       	pop	r24
    7106:	7f 91       	pop	r23
    7108:	6f 91       	pop	r22
    710a:	5f 91       	pop	r21
    710c:	4f 91       	pop	r20
    710e:	3f 91       	pop	r19
    7110:	2f 91       	pop	r18
    7112:	1f 91       	pop	r17
    7114:	0f 91       	pop	r16
    7116:	0f 90       	pop	r0
    7118:	0f be       	out	0x3f, r0	; 63
    711a:	0f 90       	pop	r0
    711c:	1f 90       	pop	r1
    711e:	18 95       	reti

00007120 <.L47>:
        packet_head = 0;
    7120:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <packet_head>
    7124:	30 e0       	ldi	r19, 0x00	; 0
    7126:	20 e0       	ldi	r18, 0x00	; 0
    7128:	60 e0       	ldi	r22, 0x00	; 0

0000712a <.Loc.605>:
    if (packet_buffer[packet_head] == PACKET_HEADER) {
    712a:	f9 01       	movw	r30, r18
    712c:	eb 5f       	subi	r30, 0xFB	; 251
    712e:	fe 4f       	sbci	r31, 0xFE	; 254

00007130 <.Loc.607>:
    7130:	40 81       	ld	r20, Z
    7132:	45 35       	cpi	r20, 0x55	; 85
    7134:	01 f7       	brne	.-64     	; 0x70f6 <.L46>

00007136 <.L56>:
        if (packet_checksum == 0) {
    7136:	89 13       	cpse	r24, r25
    7138:	de cf       	rjmp	.-68     	; 0x70f6 <.L46>

0000713a <.LBB164>:
            uint16_t num = PACKET_SIZE-packet_head;
    713a:	04 e8       	ldi	r16, 0x84	; 132
    713c:	10 e0       	ldi	r17, 0x00	; 0
    713e:	e8 01       	movw	r28, r16
    7140:	c2 1b       	sub	r28, r18
    7142:	d3 0b       	sbc	r29, r19

00007144 <.LVL98>:
            for (i = 0; i < num; i++)
    7144:	70 e0       	ldi	r23, 0x00	; 0
    7146:	6b 5f       	subi	r22, 0xFB	; 251
    7148:	7e 4f       	sbci	r23, 0xFE	; 254
    714a:	ae 01       	movw	r20, r28
    714c:	88 e9       	ldi	r24, 0x98	; 152
    714e:	91 e0       	ldi	r25, 0x01	; 1
    7150:	0e 94 3c 3c 	call	0x7878	; 0x7878 <memcpy>

00007154 <.LVL99>:
            for (i = num; i < PACKET_SIZE; i++)
    7154:	c4 38       	cpi	r28, 0x84	; 132
    7156:	d1 05       	cpc	r29, r1
    7158:	91 f0       	breq	.+36     	; 0x717e <.L50>

0000715a <.LVL100>:
    715a:	ce 01       	movw	r24, r28
    715c:	88 56       	subi	r24, 0x68	; 104
    715e:	9e 4f       	sbci	r25, 0xFE	; 254

00007160 <.Loc.618>:
                new_packet[i] = packet_buffer[i-num];
    7160:	9e 01       	movw	r18, r28
    7162:	2f 5f       	subi	r18, 0xFF	; 255
    7164:	3f 4f       	sbci	r19, 0xFF	; 255
    7166:	41 e0       	ldi	r20, 0x01	; 1
    7168:	50 e0       	ldi	r21, 0x00	; 0
    716a:	25 38       	cpi	r18, 0x85	; 133
    716c:	31 05       	cpc	r19, r1
    716e:	18 f4       	brcc	.+6      	; 0x7176 <.L52>
    7170:	a8 01       	movw	r20, r16
    7172:	4c 1b       	sub	r20, r28
    7174:	5d 0b       	sbc	r21, r29

00007176 <.L52>:
    7176:	65 e0       	ldi	r22, 0x05	; 5
    7178:	71 e0       	ldi	r23, 0x01	; 1
    717a:	0e 94 3c 3c 	call	0x7878	; 0x7878 <memcpy>

0000717e <.L50>:
            has_new_packet = 1;
    717e:	81 e0       	ldi	r24, 0x01	; 1
    7180:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <has_new_packet>

00007184 <.Loc.621>:
            packet_type = new_packet[1];
    7184:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <new_packet+0x1>

00007188 <.Loc.623>:
    7188:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <packet_type>

0000718c <.LBE164>:
}
    718c:	b4 cf       	rjmp	.-152    	; 0x70f6 <.L46>

0000718e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    718e:	fc 01       	movw	r30, r24

00007190 <.LBB4>:
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    7190:	20 81       	ld	r18, Z
    7192:	8f ef       	ldi	r24, 0xFF	; 255
    7194:	9f ef       	ldi	r25, 0xFF	; 255

00007196 <.LVL2>:
    7196:	82 27       	eor	r24, r18
    7198:	08 2e       	mov	r0, r24
    719a:	82 95       	swap	r24
    719c:	80 7f       	andi	r24, 0xF0	; 240
    719e:	80 25       	eor	r24, r0
    71a0:	09 2e       	mov	r0, r25
    71a2:	98 2f       	mov	r25, r24
    71a4:	82 95       	swap	r24
    71a6:	8f 70       	andi	r24, 0x0F	; 15
    71a8:	08 26       	eor	r0, r24
    71aa:	86 95       	lsr	r24
    71ac:	98 27       	eor	r25, r24
    71ae:	89 27       	eor	r24, r25
    71b0:	88 0f       	add	r24, r24
    71b2:	88 0f       	add	r24, r24
    71b4:	88 0f       	add	r24, r24
    71b6:	80 25       	eor	r24, r0

000071b8 <.LBB15>:
    71b8:	21 81       	ldd	r18, Z+1	; 0x01
    71ba:	82 27       	eor	r24, r18
    71bc:	08 2e       	mov	r0, r24
    71be:	82 95       	swap	r24
    71c0:	80 7f       	andi	r24, 0xF0	; 240
    71c2:	80 25       	eor	r24, r0
    71c4:	09 2e       	mov	r0, r25
    71c6:	98 2f       	mov	r25, r24
    71c8:	82 95       	swap	r24
    71ca:	8f 70       	andi	r24, 0x0F	; 15
    71cc:	08 26       	eor	r0, r24
    71ce:	86 95       	lsr	r24
    71d0:	98 27       	eor	r25, r24
    71d2:	89 27       	eor	r24, r25
    71d4:	88 0f       	add	r24, r24
    71d6:	88 0f       	add	r24, r24
    71d8:	88 0f       	add	r24, r24
    71da:	80 25       	eor	r24, r0

000071dc <.LBB16>:
    71dc:	22 81       	ldd	r18, Z+2	; 0x02
    71de:	82 27       	eor	r24, r18
    71e0:	08 2e       	mov	r0, r24
    71e2:	82 95       	swap	r24
    71e4:	80 7f       	andi	r24, 0xF0	; 240
    71e6:	80 25       	eor	r24, r0
    71e8:	09 2e       	mov	r0, r25
    71ea:	98 2f       	mov	r25, r24
    71ec:	82 95       	swap	r24
    71ee:	8f 70       	andi	r24, 0x0F	; 15
    71f0:	08 26       	eor	r0, r24
    71f2:	86 95       	lsr	r24
    71f4:	98 27       	eor	r25, r24
    71f6:	89 27       	eor	r24, r25
    71f8:	88 0f       	add	r24, r24
    71fa:	88 0f       	add	r24, r24
    71fc:	88 0f       	add	r24, r24
    71fe:	80 25       	eor	r24, r0

00007200 <.LBB17>:
    7200:	23 81       	ldd	r18, Z+3	; 0x03
    7202:	82 27       	eor	r24, r18
    7204:	08 2e       	mov	r0, r24
    7206:	82 95       	swap	r24
    7208:	80 7f       	andi	r24, 0xF0	; 240
    720a:	80 25       	eor	r24, r0
    720c:	09 2e       	mov	r0, r25
    720e:	98 2f       	mov	r25, r24
    7210:	82 95       	swap	r24
    7212:	8f 70       	andi	r24, 0x0F	; 15
    7214:	08 26       	eor	r0, r24
    7216:	86 95       	lsr	r24
    7218:	98 27       	eor	r25, r24
    721a:	89 27       	eor	r24, r25
    721c:	88 0f       	add	r24, r24
    721e:	88 0f       	add	r24, r24
    7220:	88 0f       	add	r24, r24
    7222:	80 25       	eor	r24, r0

00007224 <.LBB18>:
    7224:	24 81       	ldd	r18, Z+4	; 0x04
    7226:	82 27       	eor	r24, r18
    7228:	08 2e       	mov	r0, r24
    722a:	82 95       	swap	r24
    722c:	80 7f       	andi	r24, 0xF0	; 240
    722e:	80 25       	eor	r24, r0
    7230:	09 2e       	mov	r0, r25
    7232:	98 2f       	mov	r25, r24
    7234:	82 95       	swap	r24
    7236:	8f 70       	andi	r24, 0x0F	; 15
    7238:	08 26       	eor	r0, r24
    723a:	86 95       	lsr	r24
    723c:	98 27       	eor	r25, r24
    723e:	89 27       	eor	r24, r25
    7240:	88 0f       	add	r24, r24
    7242:	88 0f       	add	r24, r24
    7244:	88 0f       	add	r24, r24
    7246:	80 25       	eor	r24, r0

00007248 <.LBB19>:
    7248:	25 81       	ldd	r18, Z+5	; 0x05
    724a:	82 27       	eor	r24, r18
    724c:	08 2e       	mov	r0, r24
    724e:	82 95       	swap	r24
    7250:	80 7f       	andi	r24, 0xF0	; 240
    7252:	80 25       	eor	r24, r0
    7254:	09 2e       	mov	r0, r25
    7256:	98 2f       	mov	r25, r24
    7258:	82 95       	swap	r24
    725a:	8f 70       	andi	r24, 0x0F	; 15
    725c:	08 26       	eor	r0, r24
    725e:	86 95       	lsr	r24
    7260:	98 27       	eor	r25, r24
    7262:	89 27       	eor	r24, r25
    7264:	88 0f       	add	r24, r24
    7266:	88 0f       	add	r24, r24
    7268:	88 0f       	add	r24, r24
    726a:	80 25       	eor	r24, r0

0000726c <.LBB20>:
    726c:	26 81       	ldd	r18, Z+6	; 0x06
    726e:	82 27       	eor	r24, r18
    7270:	08 2e       	mov	r0, r24
    7272:	82 95       	swap	r24
    7274:	80 7f       	andi	r24, 0xF0	; 240
    7276:	80 25       	eor	r24, r0
    7278:	09 2e       	mov	r0, r25
    727a:	98 2f       	mov	r25, r24
    727c:	82 95       	swap	r24
    727e:	8f 70       	andi	r24, 0x0F	; 15
    7280:	08 26       	eor	r0, r24
    7282:	86 95       	lsr	r24
    7284:	98 27       	eor	r25, r24
    7286:	89 27       	eor	r24, r25
    7288:	88 0f       	add	r24, r24
    728a:	88 0f       	add	r24, r24
    728c:	88 0f       	add	r24, r24
    728e:	80 25       	eor	r24, r0

00007290 <.LBB21>:
    7290:	27 81       	ldd	r18, Z+7	; 0x07
    7292:	82 27       	eor	r24, r18
    7294:	08 2e       	mov	r0, r24
    7296:	82 95       	swap	r24
    7298:	80 7f       	andi	r24, 0xF0	; 240
    729a:	80 25       	eor	r24, r0
    729c:	09 2e       	mov	r0, r25
    729e:	98 2f       	mov	r25, r24
    72a0:	82 95       	swap	r24
    72a2:	8f 70       	andi	r24, 0x0F	; 15
    72a4:	08 26       	eor	r0, r24
    72a6:	86 95       	lsr	r24
    72a8:	98 27       	eor	r25, r24
    72aa:	89 27       	eor	r24, r25
    72ac:	88 0f       	add	r24, r24
    72ae:	88 0f       	add	r24, r24
    72b0:	88 0f       	add	r24, r24
    72b2:	80 25       	eor	r24, r0

000072b4 <.LBB22>:
    72b4:	20 85       	ldd	r18, Z+8	; 0x08
    72b6:	82 27       	eor	r24, r18
    72b8:	08 2e       	mov	r0, r24
    72ba:	82 95       	swap	r24
    72bc:	80 7f       	andi	r24, 0xF0	; 240
    72be:	80 25       	eor	r24, r0
    72c0:	09 2e       	mov	r0, r25
    72c2:	98 2f       	mov	r25, r24
    72c4:	82 95       	swap	r24
    72c6:	8f 70       	andi	r24, 0x0F	; 15
    72c8:	08 26       	eor	r0, r24
    72ca:	86 95       	lsr	r24
    72cc:	98 27       	eor	r25, r24
    72ce:	89 27       	eor	r24, r25
    72d0:	88 0f       	add	r24, r24
    72d2:	88 0f       	add	r24, r24
    72d4:	88 0f       	add	r24, r24
    72d6:	80 25       	eor	r24, r0

000072d8 <.LBB23>:
    72d8:	21 85       	ldd	r18, Z+9	; 0x09
    72da:	82 27       	eor	r24, r18
    72dc:	08 2e       	mov	r0, r24
    72de:	82 95       	swap	r24
    72e0:	80 7f       	andi	r24, 0xF0	; 240
    72e2:	80 25       	eor	r24, r0
    72e4:	09 2e       	mov	r0, r25
    72e6:	98 2f       	mov	r25, r24
    72e8:	82 95       	swap	r24
    72ea:	8f 70       	andi	r24, 0x0F	; 15
    72ec:	08 26       	eor	r0, r24
    72ee:	86 95       	lsr	r24
    72f0:	98 27       	eor	r25, r24
    72f2:	89 27       	eor	r24, r25
    72f4:	88 0f       	add	r24, r24
    72f6:	88 0f       	add	r24, r24
    72f8:	88 0f       	add	r24, r24
    72fa:	80 25       	eor	r24, r0

000072fc <.LBE23>:
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    72fc:	08 95       	ret

000072fe <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    72fe:	0f b6       	in	r0, 0x3f	; 63

00007300 <.Loc.1>:
#ifndef OHC
    cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    7300:	aa b1       	in	r26, 0x0a	; 10

00007302 <.Loc.2>:

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    7302:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tx_mask>

00007306 <.Loc.3>:
    or tmpreg1, ddrreg
    7306:	2a 2b       	or	r18, r26

00007308 <.Loc.4>:
    out IR_DDR, tmpreg1
    7308:	2a b9       	out	0x0a, r18	; 10

0000730a <.Loc.5>:

    ldi tmpreg1, 0x01
    730a:	21 e0       	ldi	r18, 0x01	; 1

0000730c <.Loc.6>:
    irsend
    730c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    7310:	20 30       	cpi	r18, 0x00	; 0
    7312:	29 f0       	breq	.+10     	; 0x731e <.L1^B1>
    7314:	00 00       	nop
    7316:	2b b1       	in	r18, 0x0b	; 11
    7318:	23 2b       	or	r18, r19
    731a:	2b b9       	out	0x0b, r18	; 11
    731c:	04 c0       	rjmp	.+8      	; 0x7326 <.L2^B1>

0000731e <.L1^B1>:
    731e:	00 00       	nop
    7320:	00 00       	nop
    7322:	00 00       	nop
    7324:	00 c0       	rjmp	.+0      	; 0x7326 <.L2^B1>

00007326 <.L2^B1>:
    7326:	00 00       	nop
    7328:	00 00       	nop
    732a:	00 00       	nop
    732c:	30 95       	com	r19
    732e:	2b b1       	in	r18, 0x0b	; 11
    7330:	23 23       	and	r18, r19
    7332:	2b b9       	out	0x0b, r18	; 11

00007334 <.Loc.7>:
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    7334:	2e ea       	ldi	r18, 0xAE	; 174

00007336 <.L1^B2>:
    7336:	2a 95       	dec	r18
    7338:	f1 f7       	brne	.-4      	; 0x7336 <.L1^B2>

0000733a <.Loc.8>:

    ldi tmpreg1, rx_bitcycles*7/8
    733a:	2b ee       	ldi	r18, 0xEB	; 235

0000733c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    733c:	30 b7       	in	r19, 0x30	; 48

0000733e <.Loc.10>:
    sbrs tmpreg2, ACO
    733e:	35 ff       	sbrs	r19, 5

00007340 <.Loc.11>:
    rjmp nocollision
    7340:	0a c0       	rjmp	.+20     	; 0x7356 <nocollision>

00007342 <.Loc.12>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    7342:	aa b9       	out	0x0a, r26	; 10

00007344 <.Loc.13>:
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    7344:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>

00007348 <.Loc.14>:
    com tmpreg2
    7348:	30 95       	com	r19

0000734a <.Loc.15>:
    in tmpreg1, IR_PORT
    734a:	2b b1       	in	r18, 0x0b	; 11

0000734c <.Loc.16>:
    and tmpreg1, tmpreg2
    734c:	23 23       	and	r18, r19

0000734e <.Loc.17>:
    out IR_PORT, tmpreg1
    734e:	2b b9       	out	0x0b, r18	; 11

00007350 <.Loc.18>:
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    7350:	0f be       	out	0x3f, r0	; 63

00007352 <.Loc.19>:
    return 0
    7352:	80 e0       	ldi	r24, 0x00	; 0
    7354:	08 95       	ret

00007356 <nocollision>:
	...

00007358 <.Loc.21>:
nocollision:
    nop
    dec tmpreg1
    7358:	2a 95       	dec	r18

0000735a <.Loc.22>:
    brne checkcollision
    735a:	81 f7       	brne	.-32     	; 0x733c <checkcollision>

0000735c <.Loc.23>:

    ldi tmpreg1, 0x01
    735c:	21 e0       	ldi	r18, 0x01	; 1

0000735e <.Loc.24>:
    irsend
    735e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    7362:	20 30       	cpi	r18, 0x00	; 0
    7364:	29 f0       	breq	.+10     	; 0x7370 <.L1^B3>
    7366:	00 00       	nop
    7368:	2b b1       	in	r18, 0x0b	; 11
    736a:	23 2b       	or	r18, r19
    736c:	2b b9       	out	0x0b, r18	; 11
    736e:	04 c0       	rjmp	.+8      	; 0x7378 <.L2^B2>

00007370 <.L1^B3>:
    7370:	00 00       	nop
    7372:	00 00       	nop
    7374:	00 00       	nop
    7376:	00 c0       	rjmp	.+0      	; 0x7378 <.L2^B2>

00007378 <.L2^B2>:
    7378:	00 00       	nop
    737a:	00 00       	nop
    737c:	00 00       	nop
    737e:	30 95       	com	r19
    7380:	2b b1       	in	r18, 0x0b	; 11
    7382:	23 23       	and	r18, r19
    7384:	2b b9       	out	0x0b, r18	; 11

00007386 <.Loc.25>:
    delay_cycles (rx_bitcycles-irsend_cycles)
    7386:	00 00       	nop
    7388:	24 e5       	ldi	r18, 0x54	; 84

0000738a <.L1^B4>:
    738a:	2a 95       	dec	r18
    738c:	f1 f7       	brne	.-4      	; 0x738a <.L1^B4>

0000738e <.Loc.26>:

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    738e:	fc 01       	movw	r30, r24

00007390 <.Loc.27>:
    ldi byteidx, 12
    7390:	8c e0       	ldi	r24, 0x0C	; 12

00007392 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    7392:	61 91       	ld	r22, Z+

00007394 <.Loc.29>:
    ldi bytevalH, 0x00
    7394:	70 e0       	ldi	r23, 0x00	; 0

00007396 <.Loc.30>:
    add bytevalL, bytevalL
    7396:	66 0f       	add	r22, r22

00007398 <.Loc.31>:
    adc bytevalH, bytevalH
    7398:	77 1f       	adc	r23, r23

0000739a <.Loc.32>:
    ori bytevalL, 0x01
    739a:	61 60       	ori	r22, 0x01	; 1

0000739c <.Loc.33>:
    ori bytevalH, 0x02
    739c:	72 60       	ori	r23, 0x02	; 2

0000739e <.Loc.34>:
    ; bitidex = 10
    ldi bitidx, 10
    739e:	9a e0       	ldi	r25, 0x0A	; 10

000073a0 <.Loc.35>:
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    73a0:	41 e0       	ldi	r20, 0x01	; 1

000073a2 <.Loc.36>:
    ldi bitmaskH, 0x00
    73a2:	50 e0       	ldi	r21, 0x00	; 0

000073a4 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    73a4:	9a 01       	movw	r18, r20

000073a6 <.Loc.38>:
    and tmpreg1, bytevalL
    73a6:	26 23       	and	r18, r22

000073a8 <.Loc.39>:
    and tmpreg2, bytevalH
    73a8:	37 23       	and	r19, r23

000073aa <.Loc.40>:
    or  tmpreg1, tmpreg2
    73aa:	23 2b       	or	r18, r19

000073ac <.Loc.41>:

    ; irsend tmpreg
    irsend
    73ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    73b0:	20 30       	cpi	r18, 0x00	; 0
    73b2:	29 f0       	breq	.+10     	; 0x73be <.L1^B5>
    73b4:	00 00       	nop
    73b6:	2b b1       	in	r18, 0x0b	; 11
    73b8:	23 2b       	or	r18, r19
    73ba:	2b b9       	out	0x0b, r18	; 11
    73bc:	04 c0       	rjmp	.+8      	; 0x73c6 <.L2^B3>

000073be <.L1^B5>:
    73be:	00 00       	nop
    73c0:	00 00       	nop
    73c2:	00 00       	nop
    73c4:	00 c0       	rjmp	.+0      	; 0x73c6 <.L2^B3>

000073c6 <.L2^B3>:
    73c6:	00 00       	nop
    73c8:	00 00       	nop
    73ca:	00 00       	nop
    73cc:	30 95       	com	r19
    73ce:	2b b1       	in	r18, 0x0b	; 11
    73d0:	23 23       	and	r18, r19
    73d2:	2b b9       	out	0x0b, r18	; 11

000073d4 <.Loc.42>:
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    73d4:	00 00       	nop
    73d6:	21 e5       	ldi	r18, 0x51	; 81

000073d8 <.L1^B6>:
    73d8:	2a 95       	dec	r18
    73da:	f1 f7       	brne	.-4      	; 0x73d8 <.L1^B6>

000073dc <.Loc.43>:

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    73dc:	44 0f       	add	r20, r20

000073de <.Loc.44>:
    adc bitmaskH, bitmaskH
    73de:	55 1f       	adc	r21, r21

000073e0 <.Loc.45>:

    ; if (bitidex--) goto sendbit
    dec bitidx
    73e0:	9a 95       	dec	r25

000073e2 <.Loc.46>:
    brne sendbit
    73e2:	01 f7       	brne	.-64     	; 0x73a4 <sendbit>

000073e4 <.Loc.47>:

    ; if (byteidx--) goto sendbyte
    dec byteidx
    73e4:	8a 95       	dec	r24

000073e6 <.Loc.48>:
    brne sendbyte
    73e6:	a9 f6       	brne	.-86     	; 0x7392 <sendbyte>

000073e8 <.Loc.49>:

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    73e8:	20 b7       	in	r18, 0x30	; 48

000073ea <.Loc.50>:
    ori tmpreg1, (1<<ACI)
    73ea:	20 61       	ori	r18, 0x10	; 16

000073ec <.Loc.51>:
    out ACSR, tmpreg1
    73ec:	20 bf       	out	0x30, r18	; 48

000073ee <.Loc.52>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    73ee:	aa b9       	out	0x0a, r26	; 10

000073f0 <.Loc.53>:

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    73f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>

000073f4 <.Loc.54>:
    com tmpreg2
    73f4:	30 95       	com	r19

000073f6 <.Loc.55>:
    in tmpreg1, IR_PORT
    73f6:	2b b1       	in	r18, 0x0b	; 11

000073f8 <.Loc.56>:
    and tmpreg1, tmpreg2
    73f8:	23 23       	and	r18, r19

000073fa <.Loc.57>:
    out IR_PORT, tmpreg1
    73fa:	2b b9       	out	0x0b, r18	; 11

000073fc <.Loc.58>:

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    73fc:	0f be       	out	0x3f, r0	; 63

000073fe <.Loc.59>:
    return 1
    73fe:	81 e0       	ldi	r24, 0x01	; 1
    7400:	08 95       	ret

00007402 <main>:
    cli();
    7402:	f8 94       	cli

00007404 <.Loc.2>:
    ir_ddr |= ir_mask;
    7404:	53 9a       	sbi	0x0a, 3	; 10

00007406 <.Loc.4>:
    led_ddr |= led_mask;
    7406:	21 9a       	sbi	0x04, 1	; 4

00007408 <.Loc.6>:
    led_port &= ~led_mask;
    7408:	29 98       	cbi	0x05, 1	; 5

0000740a <.Loc.8>:
    ir_port &= ~ir_mask;
    740a:	5b 98       	cbi	0x0b, 3	; 11

0000740c <.Loc.10>:
    ACSR |= (1<<ACD);
    740c:	80 b7       	in	r24, 0x30	; 48
    740e:	80 68       	ori	r24, 0x80	; 128
    7410:	80 bf       	out	0x30, r24	; 48

00007412 <.Loc.12>:
    MCUCR = (1<<IVCE);
    7412:	81 e0       	ldi	r24, 0x01	; 1
    7414:	85 bf       	out	0x35, r24	; 53

00007416 <.Loc.14>:
    MCUCR = (1<<IVSEL);
    7416:	82 e0       	ldi	r24, 0x02	; 2
    7418:	85 bf       	out	0x35, r24	; 53

0000741a <.Loc.16>:
    UBRR0 = UBRR_VALUE;
    741a:	8c e0       	ldi	r24, 0x0C	; 12
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    7422:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

00007426 <.Loc.18>:
    UCSR0A &= ~(1<<U2X0);
    7426:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    742a:	8d 7f       	andi	r24, 0xFD	; 253
    742c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

00007430 <.Loc.20>:
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
    7430:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    7434:	86 60       	ori	r24, 0x06	; 6
    7436:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

0000743a <.Loc.22>:
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
    743a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    743e:	88 69       	ori	r24, 0x98	; 152
    7440:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00007444 <.Loc.24>:
    sei();
    7444:	78 94       	sei

00007446 <.Loc.25>:
    tx_mask = ir_mask;
    7446:	88 e0       	ldi	r24, 0x08	; 8
    7448:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tx_mask>

0000744c <.Loc.27>:
    bootmsg = (bootmsg_t*)msg.data;
    744c:	8b e8       	ldi	r24, 0x8B	; 139
    744e:	e8 2e       	mov	r14, r24
    7450:	81 e0       	ldi	r24, 0x01	; 1
    7452:	f8 2e       	mov	r15, r24
    7454:	f0 92 8a 01 	sts	0x018A, r15	; 0x80018a <bootmsg+0x1>
    7458:	e0 92 89 01 	sts	0x0189, r14	; 0x800189 <bootmsg>

0000745c <.Loc.29>:
    gpsmsg = (gpsmsg_t*)msg.data;
    745c:	f0 92 1f 02 	sts	0x021F, r15	; 0x80021f <gpsmsg+0x1>
    7460:	e0 92 1e 02 	sts	0x021E, r14	; 0x80021e <gpsmsg>

00007464 <.Loc.31>:
    rawmsg = (uint8_t*)&msg;
    7464:	f0 92 1d 02 	sts	0x021D, r15	; 0x80021d <rawmsg+0x1>
    7468:	e0 92 1c 02 	sts	0x021C, r14	; 0x80021c <rawmsg>

0000746c <.LVL0>:
        led_port |= led_mask;
    746c:	29 9a       	sbi	0x05, 1	; 5

0000746e <.LBB80>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    746e:	2f ef       	ldi	r18, 0xFF	; 255
    7470:	81 ee       	ldi	r24, 0xE1	; 225
    7472:	94 e0       	ldi	r25, 0x04	; 4

00007474 <.L1^B1>:
    7474:	21 50       	subi	r18, 0x01	; 1
    7476:	80 40       	sbci	r24, 0x00	; 0
    7478:	90 40       	sbci	r25, 0x00	; 0
    747a:	e1 f7       	brne	.-8      	; 0x7474 <.L1^B1>
    747c:	00 c0       	rjmp	.+0      	; 0x747e <L0^A>

0000747e <L0^A>:
	...

00007480 <.LBE91>:
        led_port &= ~led_mask;
    7480:	29 98       	cbi	0x05, 1	; 5

00007482 <.LBB103>:
    7482:	ef ef       	ldi	r30, 0xFF	; 255
    7484:	f1 ee       	ldi	r31, 0xE1	; 225
    7486:	24 e0       	ldi	r18, 0x04	; 4

00007488 <.L1^B2>:
    7488:	e1 50       	subi	r30, 0x01	; 1
    748a:	f0 40       	sbci	r31, 0x00	; 0
    748c:	20 40       	sbci	r18, 0x00	; 0
    748e:	e1 f7       	brne	.-8      	; 0x7488 <.L1^B2>
    7490:	00 c0       	rjmp	.+0      	; 0x7492 <L0^A>

00007492 <L0^A>:
	...

00007494 <.LBE103>:
        led_port |= led_mask;
    7494:	29 9a       	sbi	0x05, 1	; 5

00007496 <.LBB104>:
    7496:	8f ef       	ldi	r24, 0xFF	; 255
    7498:	91 ee       	ldi	r25, 0xE1	; 225
    749a:	e4 e0       	ldi	r30, 0x04	; 4

0000749c <.L1^B3>:
    749c:	81 50       	subi	r24, 0x01	; 1
    749e:	90 40       	sbci	r25, 0x00	; 0
    74a0:	e0 40       	sbci	r30, 0x00	; 0
    74a2:	e1 f7       	brne	.-8      	; 0x749c <.L1^B3>
    74a4:	00 c0       	rjmp	.+0      	; 0x74a6 <L0^A>

000074a6 <L0^A>:
	...

000074a8 <.LBE105>:
        led_port &= ~led_mask;
    74a8:	29 98       	cbi	0x05, 1	; 5

000074aa <.LBB106>:
    74aa:	ff ef       	ldi	r31, 0xFF	; 255
    74ac:	21 ee       	ldi	r18, 0xE1	; 225
    74ae:	84 e0       	ldi	r24, 0x04	; 4

000074b0 <.L1^B4>:
    74b0:	f1 50       	subi	r31, 0x01	; 1
    74b2:	20 40       	sbci	r18, 0x00	; 0
    74b4:	80 40       	sbci	r24, 0x00	; 0
    74b6:	e1 f7       	brne	.-8      	; 0x74b0 <.L1^B4>
    74b8:	00 c0       	rjmp	.+0      	; 0x74ba <L0^A>

000074ba <L0^A>:
	...

000074bc <.LBE107>:
        led_port |= led_mask;
    74bc:	29 9a       	sbi	0x05, 1	; 5

000074be <.LBB108>:
    74be:	9f ef       	ldi	r25, 0xFF	; 255
    74c0:	e1 ee       	ldi	r30, 0xE1	; 225
    74c2:	f4 e0       	ldi	r31, 0x04	; 4

000074c4 <.L1^B5>:
    74c4:	91 50       	subi	r25, 0x01	; 1
    74c6:	e0 40       	sbci	r30, 0x00	; 0
    74c8:	f0 40       	sbci	r31, 0x00	; 0
    74ca:	e1 f7       	brne	.-8      	; 0x74c4 <.L1^B5>
    74cc:	00 c0       	rjmp	.+0      	; 0x74ce <L0^A>

000074ce <L0^A>:
	...

000074d0 <.LBE109>:
        led_port &= ~led_mask;
    74d0:	29 98       	cbi	0x05, 1	; 5

000074d2 <.LBB110>:
    74d2:	2f ef       	ldi	r18, 0xFF	; 255
    74d4:	81 ee       	ldi	r24, 0xE1	; 225
    74d6:	94 e0       	ldi	r25, 0x04	; 4

000074d8 <.L1^B6>:
    74d8:	21 50       	subi	r18, 0x01	; 1
    74da:	80 40       	sbci	r24, 0x00	; 0
    74dc:	90 40       	sbci	r25, 0x00	; 0
    74de:	e1 f7       	brne	.-8      	; 0x74d8 <.L1^B6>
    74e0:	00 c0       	rjmp	.+0      	; 0x74e2 <L0^A>

000074e2 <L0^A>:
	...

000074e4 <.LBE111>:
        led_port |= led_mask;
    74e4:	29 9a       	sbi	0x05, 1	; 5

000074e6 <.LBB112>:
    74e6:	ef ef       	ldi	r30, 0xFF	; 255
    74e8:	f1 ee       	ldi	r31, 0xE1	; 225
    74ea:	24 e0       	ldi	r18, 0x04	; 4

000074ec <.L1^B7>:
    74ec:	e1 50       	subi	r30, 0x01	; 1
    74ee:	f0 40       	sbci	r31, 0x00	; 0
    74f0:	20 40       	sbci	r18, 0x00	; 0
    74f2:	e1 f7       	brne	.-8      	; 0x74ec <.L1^B7>
    74f4:	00 c0       	rjmp	.+0      	; 0x74f6 <L0^A>

000074f6 <L0^A>:
	...

000074f8 <.LBE113>:
        led_port &= ~led_mask;
    74f8:	29 98       	cbi	0x05, 1	; 5

000074fa <.LBB114>:
    74fa:	8f ef       	ldi	r24, 0xFF	; 255
    74fc:	91 ee       	ldi	r25, 0xE1	; 225
    74fe:	e4 e0       	ldi	r30, 0x04	; 4

00007500 <.L1^B8>:
    7500:	81 50       	subi	r24, 0x01	; 1
    7502:	90 40       	sbci	r25, 0x00	; 0
    7504:	e0 40       	sbci	r30, 0x00	; 0
    7506:	e1 f7       	brne	.-8      	; 0x7500 <.L1^B8>
    7508:	00 c0       	rjmp	.+0      	; 0x750a <L0^A>

0000750a <L0^A>:
	...

0000750c <.LBE115>:
        led_port |= led_mask;
    750c:	29 9a       	sbi	0x05, 1	; 5

0000750e <.LBB116>:
    750e:	ff ef       	ldi	r31, 0xFF	; 255
    7510:	21 ee       	ldi	r18, 0xE1	; 225
    7512:	84 e0       	ldi	r24, 0x04	; 4

00007514 <.L1^B9>:
    7514:	f1 50       	subi	r31, 0x01	; 1
    7516:	20 40       	sbci	r18, 0x00	; 0
    7518:	80 40       	sbci	r24, 0x00	; 0
    751a:	e1 f7       	brne	.-8      	; 0x7514 <.L1^B9>
    751c:	00 c0       	rjmp	.+0      	; 0x751e <L0^A>

0000751e <L0^A>:
	...

00007520 <.LBE117>:
        led_port &= ~led_mask;
    7520:	29 98       	cbi	0x05, 1	; 5

00007522 <.LBB118>:
    7522:	9f ef       	ldi	r25, 0xFF	; 255
    7524:	e1 ee       	ldi	r30, 0xE1	; 225
    7526:	f4 e0       	ldi	r31, 0x04	; 4

00007528 <.L1^B10>:
    7528:	91 50       	subi	r25, 0x01	; 1
    752a:	e0 40       	sbci	r30, 0x00	; 0
    752c:	f0 40       	sbci	r31, 0x00	; 0
    752e:	e1 f7       	brne	.-8      	; 0x7528 <.L1^B10>
    7530:	00 c0       	rjmp	.+0      	; 0x7532 <L0^A>

00007532 <L0^A>:
	...

00007534 <.LBE119>:
    for (i=0; i<5; i++) {
    7534:	0a e1       	ldi	r16, 0x1A	; 26
    7536:	12 e0       	ldi	r17, 0x02	; 2

00007538 <.Loc.176>:
                msg.type = BOOTPGM_PAGE;
    7538:	91 e8       	ldi	r25, 0x81	; 129
    753a:	b9 2e       	mov	r11, r25

0000753c <.Loc.177>:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
    753c:	29 e0       	ldi	r18, 0x09	; 9
    753e:	c2 2e       	mov	r12, r18

00007540 <.Loc.178>:
                msg.type = GPS;
    7540:	dd 24       	eor	r13, r13
    7542:	d3 94       	inc	r13

00007544 <.L3>:
        if (has_new_packet) {
    7544:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

00007548 <.Loc.182>:
    7548:	88 23       	and	r24, r24
    754a:	e1 f3       	breq	.-8      	; 0x7544 <.L3>

0000754c <.Loc.183>:
            has_new_packet = 0;
    754c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <has_new_packet>

00007550 <.Loc.185>:
            switch(packet_type) {
    7550:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <packet_type>
    7554:	84 30       	cpi	r24, 0x04	; 4
    7556:	09 f4       	brne	.+2      	; 0x755a <L0^A+0x2>

00007558 <L0^A>:
    7558:	ac c0       	rjmp	.+344    	; 0x76b2 <.L4>
    755a:	08 f0       	brcs	.+2      	; 0x755e <L0^A+0x2>

0000755c <L0^A>:
    755c:	51 c0       	rjmp	.+162    	; 0x7600 <.L5>
    755e:	82 30       	cpi	r24, 0x02	; 2
    7560:	09 f4       	brne	.+2      	; 0x7564 <L0^A+0x2>

00007562 <L0^A>:
    7562:	ec c0       	rjmp	.+472    	; 0x773c <.L6>
    7564:	83 30       	cpi	r24, 0x03	; 3
    7566:	09 f0       	breq	.+2      	; 0x756a <.LVL21>

00007568 <L0^A>:
    7568:	96 c0       	rjmp	.+300    	; 0x7696 <.L45>

0000756a <.LVL21>:
                    rawmsg[i] = new_packet[i+2];
    756a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    756e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00007572 <.Loc.189>:
    7572:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>

00007576 <.Loc.190>:
    7576:	80 83       	st	Z, r24

00007578 <.LVL22>:
    7578:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    757c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00007580 <.Loc.195>:
    7580:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>

00007584 <.Loc.196>:
    7584:	81 83       	std	Z+1, r24	; 0x01

00007586 <.LVL23>:
    7586:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    758a:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

0000758e <.Loc.201>:
    758e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>

00007592 <.Loc.202>:
    7592:	82 83       	std	Z+2, r24	; 0x02

00007594 <.LVL24>:
    7594:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>

00007598 <.Loc.207>:
    7598:	83 83       	std	Z+3, r24	; 0x03

0000759a <.LVL25>:
    759a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>

0000759e <.Loc.212>:
    759e:	84 83       	std	Z+4, r24	; 0x04

000075a0 <.LVL26>:
    75a0:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>

000075a4 <.Loc.217>:
    75a4:	85 83       	std	Z+5, r24	; 0x05

000075a6 <.LVL27>:
    75a6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>

000075aa <.Loc.222>:
    75aa:	86 83       	std	Z+6, r24	; 0x06

000075ac <.LVL28>:
    75ac:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>

000075b0 <.Loc.227>:
    75b0:	87 83       	std	Z+7, r24	; 0x07

000075b2 <.LVL29>:
    75b2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>

000075b6 <.Loc.232>:
    75b6:	80 87       	std	Z+8, r24	; 0x08

000075b8 <.LVL30>:
    75b8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>

000075bc <.Loc.237>:
    75bc:	81 87       	std	Z+9, r24	; 0x09

000075be <.LVL31>:
    75be:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <new_packet+0xc>

000075c2 <.Loc.242>:
    75c2:	82 87       	std	Z+10, r24	; 0x0a

000075c4 <.LVL32>:
    75c4:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <new_packet+0xd>

000075c8 <.Loc.247>:
    75c8:	83 87       	std	Z+11, r24	; 0x0b

000075ca <.LVL33>:
                while(!has_new_packet) {
    75ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

000075ce <.Loc.252>:
    75ce:	81 11       	cpse	r24, r1
    75d0:	b9 cf       	rjmp	.-142    	; 0x7544 <.L3>

000075d2 <.L12>:
                    message_send(&msg);
    75d2:	8b e8       	ldi	r24, 0x8B	; 139
    75d4:	91 e0       	ldi	r25, 0x01	; 1
    75d6:	0e 94 7f 39 	call	0x72fe	; 0x72fe <message_send>

000075da <.LVL34>:
                    led_port |= led_mask;
    75da:	29 9a       	sbi	0x05, 1	; 5

000075dc <.LBB120>:
    75dc:	8f e6       	ldi	r24, 0x6F	; 111
    75de:	97 e1       	ldi	r25, 0x17	; 23

000075e0 <.L1^B11>:
    75e0:	01 97       	sbiw	r24, 0x01	; 1
    75e2:	f1 f7       	brne	.-4      	; 0x75e0 <.L1^B11>
    75e4:	00 c0       	rjmp	.+0      	; 0x75e6 <L0^A>

000075e6 <L0^A>:
	...

000075e8 <.LBE123>:
                    led_port &= ~led_mask;
    75e8:	29 98       	cbi	0x05, 1	; 5

000075ea <.LBB124>:
    75ea:	ef e6       	ldi	r30, 0x6F	; 111
    75ec:	f7 e1       	ldi	r31, 0x17	; 23

000075ee <.L1^B12>:
    75ee:	31 97       	sbiw	r30, 0x01	; 1
    75f0:	f1 f7       	brne	.-4      	; 0x75ee <.L1^B12>
    75f2:	00 c0       	rjmp	.+0      	; 0x75f4 <L0^A>

000075f4 <L0^A>:
	...

000075f6 <.LBE127>:
                while(!has_new_packet) {
    75f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

000075fa <.Loc.282>:
    75fa:	88 23       	and	r24, r24
    75fc:	51 f3       	breq	.-44     	; 0x75d2 <.L12>
    75fe:	a2 cf       	rjmp	.-188    	; 0x7544 <.L3>

00007600 <.L5>:
            switch(packet_type) {
    7600:	85 30       	cpi	r24, 0x05	; 5
    7602:	09 f4       	brne	.+2      	; 0x7606 <L0^A+0x2>

00007604 <L0^A>:
    7604:	e8 c0       	rjmp	.+464    	; 0x77d6 <.L10>
    7606:	86 30       	cpi	r24, 0x06	; 6
    7608:	09 f0       	breq	.+2      	; 0x760c <.LVL40>

0000760a <L0^A>:
    760a:	9c cf       	rjmp	.-200    	; 0x7544 <.L3>

0000760c <.LVL40>:
                    rawmsg[i] = new_packet[i+2];
    760c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    7610:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00007614 <.Loc.287>:
    7614:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>

00007618 <.Loc.288>:
    7618:	80 83       	st	Z, r24

0000761a <.LVL41>:
    761a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    761e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00007622 <.Loc.293>:
    7622:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>

00007626 <.Loc.294>:
    7626:	81 83       	std	Z+1, r24	; 0x01

00007628 <.LVL42>:
    7628:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    762c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00007630 <.Loc.299>:
    7630:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>

00007634 <.Loc.300>:
    7634:	82 83       	std	Z+2, r24	; 0x02

00007636 <.LVL43>:
    7636:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>

0000763a <.Loc.305>:
    763a:	83 83       	std	Z+3, r24	; 0x03

0000763c <.LVL44>:
    763c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>

00007640 <.Loc.310>:
    7640:	84 83       	std	Z+4, r24	; 0x04

00007642 <.LVL45>:
    7642:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>

00007646 <.Loc.315>:
    7646:	85 83       	std	Z+5, r24	; 0x05

00007648 <.LVL46>:
    7648:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>

0000764c <.Loc.320>:
    764c:	86 83       	std	Z+6, r24	; 0x06

0000764e <.LVL47>:
    764e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>

00007652 <.Loc.325>:
    7652:	87 83       	std	Z+7, r24	; 0x07

00007654 <.LVL48>:
    7654:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>

00007658 <.Loc.330>:
    7658:	80 87       	std	Z+8, r24	; 0x08

0000765a <.LVL49>:
    765a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>

0000765e <.Loc.335>:
    765e:	81 87       	std	Z+9, r24	; 0x09

00007660 <.LVL50>:
                msg.crc = message_crc(&msg);
    7660:	8b e8       	ldi	r24, 0x8B	; 139
    7662:	91 e0       	ldi	r25, 0x01	; 1
    7664:	0e 94 c7 38 	call	0x718e	; 0x718e <message_crc>

00007668 <.LVL51>:
    7668:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    766c:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>

00007670 <.Loc.341>:
                message_send(&msg);
    7670:	8b e8       	ldi	r24, 0x8B	; 139
    7672:	91 e0       	ldi	r25, 0x01	; 1
    7674:	0e 94 7f 39 	call	0x72fe	; 0x72fe <message_send>

00007678 <.LVL52>:
                led_port |= led_mask;
    7678:	29 9a       	sbi	0x05, 1	; 5

0000767a <.LBB128>:
    767a:	8f e6       	ldi	r24, 0x6F	; 111
    767c:	97 e1       	ldi	r25, 0x17	; 23

0000767e <.L1^B13>:
    767e:	01 97       	sbiw	r24, 0x01	; 1
    7680:	f1 f7       	brne	.-4      	; 0x767e <.L1^B13>
    7682:	00 c0       	rjmp	.+0      	; 0x7684 <L0^A>

00007684 <L0^A>:
	...

00007686 <.LBE131>:
                led_port &= ~led_mask;
    7686:	29 98       	cbi	0x05, 1	; 5

00007688 <.LBB132>:
    7688:	ef e6       	ldi	r30, 0x6F	; 111
    768a:	f7 e1       	ldi	r31, 0x17	; 23

0000768c <.L1^B14>:
    768c:	31 97       	sbiw	r30, 0x01	; 1
    768e:	f1 f7       	brne	.-4      	; 0x768c <.L1^B14>
    7690:	00 c0       	rjmp	.+0      	; 0x7692 <L0^A>

00007692 <L0^A>:
	...

00007694 <.Loc.367>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
    7694:	57 cf       	rjmp	.-338    	; 0x7544 <.L3>

00007696 <.L45>:
            switch(packet_type) {
    7696:	81 30       	cpi	r24, 0x01	; 1
    7698:	09 f0       	breq	.+2      	; 0x769c <.Loc.370>

0000769a <L0^A>:
    769a:	54 cf       	rjmp	.-344    	; 0x7544 <.L3>

0000769c <.Loc.370>:
                leds_toggle = !leds_toggle;
    769c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <leds_toggle>
    76a0:	91 e0       	ldi	r25, 0x01	; 1
    76a2:	81 11       	cpse	r24, r1
    76a4:	90 e0       	ldi	r25, 0x00	; 0

000076a6 <.Loc.372>:
    76a6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <leds_toggle>

000076aa <.Loc.373>:
                if (leds_toggle) {
    76aa:	81 11       	cpse	r24, r1
    76ac:	e3 c0       	rjmp	.+454    	; 0x7874 <.L17>

000076ae <.Loc.375>:
                    led_port |= led_mask;
    76ae:	29 9a       	sbi	0x05, 1	; 5
    76b0:	49 cf       	rjmp	.-366    	; 0x7544 <.L3>

000076b2 <.L4>:
                msg.type = BOOTPGM_PAGE;
    76b2:	b0 92 94 01 	sts	0x0194, r11	; 0x800194 <msg+0x9>

000076b6 <.Loc.379>:
                bootmsg->page_address = new_packet[2];
    76b6:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <bootmsg>
    76ba:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <bootmsg+0x1>

000076be <.Loc.381>:
    76be:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>

000076c2 <.Loc.382>:
    76c2:	80 83       	st	Z, r24

000076c4 <.Loc.383>:
                bootmsg->unused = 0;
    76c4:	10 86       	std	Z+8, r1	; 0x08

000076c6 <.Loc.385>:
                cli();
    76c6:	f8 94       	cli

000076c8 <.LVL57>:
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
    76c8:	cb e9       	ldi	r28, 0x9B	; 155
    76ca:	d1 e0       	ldi	r29, 0x01	; 1

000076cc <.Loc.388>:
    76cc:	a1 2c       	mov	r10, r1
    76ce:	22 c0       	rjmp	.+68     	; 0x7714 <.L18>

000076d0 <.L19>:
                    bootmsg->page_offset = i/2;
    76d0:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <bootmsg>
    76d4:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <bootmsg+0x1>

000076d8 <.Loc.391>:
    76d8:	8a 2d       	mov	r24, r10
    76da:	86 95       	lsr	r24
    76dc:	11 96       	adiw	r26, 0x01	; 1
    76de:	8c 93       	st	X, r24
    76e0:	11 97       	sbiw	r26, 0x01	; 1

000076e2 <.Loc.392>:
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
    76e2:	12 96       	adiw	r26, 0x02	; 2
    76e4:	86 e0       	ldi	r24, 0x06	; 6
    76e6:	fe 01       	movw	r30, r28

000076e8 <.L^B1>:
    76e8:	01 90       	ld	r0, Z+
    76ea:	0d 92       	st	X+, r0
    76ec:	8a 95       	dec	r24
    76ee:	e1 f7       	brne	.-8      	; 0x76e8 <.L^B1>

000076f0 <.Loc.393>:
                    msg.crc = message_crc(&msg);
    76f0:	8b e8       	ldi	r24, 0x8B	; 139
    76f2:	91 e0       	ldi	r25, 0x01	; 1
    76f4:	0e 94 c7 38 	call	0x718e	; 0x718e <message_crc>

000076f8 <.LVL59>:
    76f8:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    76fc:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>

00007700 <.Loc.396>:
                    message_send(&msg);
    7700:	8b e8       	ldi	r24, 0x8B	; 139
    7702:	91 e0       	ldi	r25, 0x01	; 1
    7704:	0e 94 7f 39 	call	0x72fe	; 0x72fe <message_send>

00007708 <.LVL60>:
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
    7708:	f6 e0       	ldi	r31, 0x06	; 6
    770a:	af 0e       	add	r10, r31

0000770c <.Loc.399>:
    770c:	26 96       	adiw	r28, 0x06	; 6

0000770e <.Loc.400>:
    770e:	24 e8       	ldi	r18, 0x84	; 132
    7710:	a2 16       	cp	r10, r18
    7712:	21 f0       	breq	.+8      	; 0x771c <.L20>

00007714 <.L18>:
    7714:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

00007718 <.Loc.402>:
    7718:	88 23       	and	r24, r24
    771a:	d1 f2       	breq	.-76     	; 0x76d0 <.L19>

0000771c <.L20>:
                sei();
    771c:	78 94       	sei

0000771e <.Loc.404>:
                led_port |= led_mask;
    771e:	29 9a       	sbi	0x05, 1	; 5

00007720 <.LBB136>:
	__builtin_avr_delay_cycles(__ticks_dc);
    7720:	8f e1       	ldi	r24, 0x1F	; 31
    7722:	9e e4       	ldi	r25, 0x4E	; 78

00007724 <.L1^B15>:
    7724:	01 97       	sbiw	r24, 0x01	; 1
    7726:	f1 f7       	brne	.-4      	; 0x7724 <.L1^B15>
    7728:	00 c0       	rjmp	.+0      	; 0x772a <L0^A>

0000772a <L0^A>:
	...

0000772c <.LBE139>:
                led_port &= ~led_mask;
    772c:	29 98       	cbi	0x05, 1	; 5

0000772e <.LBB140>:
    772e:	ef e1       	ldi	r30, 0x1F	; 31
    7730:	fe e4       	ldi	r31, 0x4E	; 78

00007732 <.L1^B16>:
    7732:	31 97       	sbiw	r30, 0x01	; 1
    7734:	f1 f7       	brne	.-4      	; 0x7732 <.L1^B16>
    7736:	00 c0       	rjmp	.+0      	; 0x7738 <L0^A>

00007738 <L0^A>:
	...

0000773a <.Loc.429>:
}
    773a:	04 cf       	rjmp	.-504    	; 0x7544 <.L3>

0000773c <.L6>:
                    rawmsg[i] = new_packet[i+2];
    773c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    7740:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00007744 <.Loc.434>:
    7744:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>

00007748 <.Loc.435>:
    7748:	80 83       	st	Z, r24

0000774a <.LVL67>:
    774a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    774e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00007752 <.Loc.440>:
    7752:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>

00007756 <.Loc.441>:
    7756:	81 83       	std	Z+1, r24	; 0x01

00007758 <.LVL68>:
    7758:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    775c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00007760 <.Loc.446>:
    7760:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>

00007764 <.Loc.447>:
    7764:	82 83       	std	Z+2, r24	; 0x02

00007766 <.LVL69>:
    7766:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>

0000776a <.Loc.452>:
    776a:	83 83       	std	Z+3, r24	; 0x03

0000776c <.LVL70>:
    776c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>

00007770 <.Loc.457>:
    7770:	84 83       	std	Z+4, r24	; 0x04

00007772 <.LVL71>:
    7772:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>

00007776 <.Loc.462>:
    7776:	85 83       	std	Z+5, r24	; 0x05

00007778 <.LVL72>:
    7778:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>

0000777c <.Loc.467>:
    777c:	86 83       	std	Z+6, r24	; 0x06

0000777e <.LVL73>:
    777e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>

00007782 <.Loc.472>:
    7782:	87 83       	std	Z+7, r24	; 0x07

00007784 <.LVL74>:
    7784:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>

00007788 <.Loc.477>:
    7788:	80 87       	std	Z+8, r24	; 0x08

0000778a <.LVL75>:
    778a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>

0000778e <.Loc.482>:
    778e:	81 87       	std	Z+9, r24	; 0x09

00007790 <.LVL76>:
                msg.crc = message_crc(&msg);
    7790:	8b e8       	ldi	r24, 0x8B	; 139
    7792:	91 e0       	ldi	r25, 0x01	; 1
    7794:	0e 94 c7 38 	call	0x718e	; 0x718e <message_crc>

00007798 <.LVL77>:
    7798:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    779c:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>

000077a0 <.Loc.488>:
                while(!has_new_packet) {
    77a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

000077a4 <.Loc.491>:
    77a4:	81 11       	cpse	r24, r1
    77a6:	ce ce       	rjmp	.-612    	; 0x7544 <.L3>

000077a8 <.L14>:
                    message_send(&msg);
    77a8:	8b e8       	ldi	r24, 0x8B	; 139
    77aa:	91 e0       	ldi	r25, 0x01	; 1
    77ac:	0e 94 7f 39 	call	0x72fe	; 0x72fe <message_send>

000077b0 <.LVL78>:
                    led_port |= led_mask;
    77b0:	29 9a       	sbi	0x05, 1	; 5

000077b2 <.LBB144>:
	__builtin_avr_delay_cycles(__ticks_dc);
    77b2:	8f e6       	ldi	r24, 0x6F	; 111
    77b4:	97 e1       	ldi	r25, 0x17	; 23

000077b6 <.L1^B17>:
    77b6:	01 97       	sbiw	r24, 0x01	; 1
    77b8:	f1 f7       	brne	.-4      	; 0x77b6 <.L1^B17>
    77ba:	00 c0       	rjmp	.+0      	; 0x77bc <L0^A>

000077bc <L0^A>:
	...

000077be <.LBE147>:
                    led_port &= ~led_mask;
    77be:	29 98       	cbi	0x05, 1	; 5

000077c0 <.LBB148>:
    77c0:	ef e6       	ldi	r30, 0x6F	; 111
    77c2:	f7 e1       	ldi	r31, 0x17	; 23

000077c4 <.L1^B18>:
    77c4:	31 97       	sbiw	r30, 0x01	; 1
    77c6:	f1 f7       	brne	.-4      	; 0x77c4 <.L1^B18>
    77c8:	00 c0       	rjmp	.+0      	; 0x77ca <L0^A>

000077ca <L0^A>:
	...

000077cc <.LBE151>:
                while(!has_new_packet) {
    77cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

000077d0 <.Loc.521>:
    77d0:	88 23       	and	r24, r24
    77d2:	51 f3       	breq	.-44     	; 0x77a8 <.L14>
    77d4:	b7 ce       	rjmp	.-658    	; 0x7544 <.L3>

000077d6 <.L10>:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
    77d6:	f7 01       	movw	r30, r14
    77d8:	2c 2d       	mov	r18, r12

000077da <.L^B2>:
    77da:	11 92       	st	Z+, r1
    77dc:	2a 95       	dec	r18
    77de:	e9 f7       	brne	.-6      	; 0x77da <.L^B2>

000077e0 <.Loc.523>:
                msg.type = GPS;
    77e0:	d0 92 94 01 	sts	0x0194, r13	; 0x800194 <msg+0x9>

000077e4 <.Loc.525>:
                cli();
    77e4:	f8 94       	cli

000077e6 <.LVL84>:
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
    77e6:	ca e9       	ldi	r28, 0x9A	; 154
    77e8:	d1 e0       	ldi	r29, 0x01	; 1

000077ea <.L23>:
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    77ea:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <gpsmsg>
    77ee:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <gpsmsg+0x1>
    77f2:	88 e0       	ldi	r24, 0x08	; 8
    77f4:	fe 01       	movw	r30, r28

000077f6 <.L^B3>:
    77f6:	01 90       	ld	r0, Z+
    77f8:	0d 92       	st	X+, r0
    77fa:	8a 95       	dec	r24
    77fc:	e1 f7       	brne	.-8      	; 0x77f6 <.L^B3>

000077fe <.Loc.529>:
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    77fe:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <gpsmsg>
    7802:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <gpsmsg+0x1>

00007806 <.Loc.531>:
    7806:	80 81       	ld	r24, Z
    7808:	91 81       	ldd	r25, Z+1	; 0x01
    780a:	89 2b       	or	r24, r25
    780c:	79 f4       	brne	.+30     	; 0x782c <.L21>

0000780e <.Loc.532>:
    780e:	82 81       	ldd	r24, Z+2	; 0x02
    7810:	93 81       	ldd	r25, Z+3	; 0x03
    7812:	89 2b       	or	r24, r25
    7814:	59 f4       	brne	.+22     	; 0x782c <.L21>

00007816 <.Loc.533>:
    7816:	84 81       	ldd	r24, Z+4	; 0x04
    7818:	95 81       	ldd	r25, Z+5	; 0x05
    781a:	89 2b       	or	r24, r25
    781c:	39 f4       	brne	.+14     	; 0x782c <.L21>

0000781e <.Loc.534>:
    781e:	86 81       	ldd	r24, Z+6	; 0x06
    7820:	81 11       	cpse	r24, r1
    7822:	04 c0       	rjmp	.+8      	; 0x782c <.L21>

00007824 <.Loc.535>:
    7824:	87 81       	ldd	r24, Z+7	; 0x07
    7826:	90 85       	ldd	r25, Z+8	; 0x08
    7828:	89 2b       	or	r24, r25
    782a:	a1 f0       	breq	.+40     	; 0x7854 <.L22>

0000782c <.L21>:
                    msg.crc = message_crc(&msg);
    782c:	8b e8       	ldi	r24, 0x8B	; 139
    782e:	91 e0       	ldi	r25, 0x01	; 1
    7830:	0e 94 c7 38 	call	0x718e	; 0x718e <message_crc>

00007834 <.LVL86>:
    7834:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    7838:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>

0000783c <.Loc.539>:
                    message_send(&msg);
    783c:	8b e8       	ldi	r24, 0x8B	; 139
    783e:	91 e0       	ldi	r25, 0x01	; 1
    7840:	0e 94 7f 39 	call	0x72fe	; 0x72fe <message_send>

00007844 <.LBB152>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7844:	85 e8       	ldi	r24, 0x85	; 133

00007846 <.L1^B19>:
    7846:	8a 95       	dec	r24
    7848:	f1 f7       	brne	.-4      	; 0x7846 <.L1^B19>
	...

0000784c <.LBE155>:
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
    784c:	28 96       	adiw	r28, 0x08	; 8

0000784e <.LVL89>:
    784e:	0c 17       	cp	r16, r28
    7850:	1d 07       	cpc	r17, r29
    7852:	59 f6       	brne	.-106    	; 0x77ea <.L23>

00007854 <.L22>:
                sei();
    7854:	78 94       	sei

00007856 <.Loc.555>:
                led_port |= led_mask;
    7856:	29 9a       	sbi	0x05, 1	; 5

00007858 <.LBB156>:
	__builtin_avr_delay_cycles(__ticks_dc);
    7858:	ef e1       	ldi	r30, 0x1F	; 31
    785a:	fe e4       	ldi	r31, 0x4E	; 78

0000785c <.L1^B20>:
    785c:	31 97       	sbiw	r30, 0x01	; 1
    785e:	f1 f7       	brne	.-4      	; 0x785c <.L1^B20>
    7860:	00 c0       	rjmp	.+0      	; 0x7862 <L0^A>

00007862 <L0^A>:
	...

00007864 <.LBE159>:
                led_port &= ~led_mask;
    7864:	29 98       	cbi	0x05, 1	; 5

00007866 <.LBB160>:
    7866:	8f e1       	ldi	r24, 0x1F	; 31
    7868:	9e e4       	ldi	r25, 0x4E	; 78

0000786a <.L1^B21>:
    786a:	01 97       	sbiw	r24, 0x01	; 1
    786c:	f1 f7       	brne	.-4      	; 0x786a <.L1^B21>
    786e:	00 c0       	rjmp	.+0      	; 0x7870 <L0^A>

00007870 <L0^A>:
	...

00007872 <.Loc.580>:
}
    7872:	68 ce       	rjmp	.-816    	; 0x7544 <.L3>

00007874 <.L17>:
                    led_port &= ~led_mask;
    7874:	29 98       	cbi	0x05, 1	; 5
    7876:	66 ce       	rjmp	.-820    	; 0x7544 <.L3>

00007878 <memcpy>:
    7878:	fb 01       	movw	r30, r22
    787a:	dc 01       	movw	r26, r24
    787c:	02 c0       	rjmp	.+4      	; 0x7882 <.L_memcpy_start>

0000787e <.L_memcpy_loop>:
    787e:	01 90       	ld	r0, Z+
    7880:	0d 92       	st	X+, r0

00007882 <.L_memcpy_start>:
    7882:	41 50       	subi	r20, 0x01	; 1
    7884:	50 40       	sbci	r21, 0x00	; 0
    7886:	d8 f7       	brcc	.-10     	; 0x787e <.L_memcpy_loop>
    7888:	08 95       	ret

0000788a <_exit>:
    788a:	f8 94       	cli

0000788c <__stop_program>:
    788c:	ff cf       	rjmp	.-2      	; 0x788c <__stop_program>
