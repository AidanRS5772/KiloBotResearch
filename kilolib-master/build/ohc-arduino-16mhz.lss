
build/ohc-arduino-16mhz.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2

00000076 <.Loc.1>:
  76:	a0 e0       	ldi	r26, 0x00	; 0

00000078 <.Loc.2>:
  78:	b1 e0       	ldi	r27, 0x01	; 1

0000007a <.Loc.3>:
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.Loc.5>

0000007c <.Loc.4>:
  7c:	1d 92       	st	X+, r1

0000007e <.Loc.5>:
  7e:	a0 32       	cpi	r26, 0x20	; 32

00000080 <.Loc.6>:
  80:	b2 07       	cpc	r27, r18

00000082 <.Loc.7>:
  82:	e1 f7       	brne	.-8      	; 0x7c <.Loc.4>

00000084 <L0^A>:
  84:	0e 94 01 02 	call	0x402	; 0x402 <main>
  88:	0c 94 47 04 	jmp	0x88e	; 0x88e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
  90:	1f 92       	push	r1

00000092 <.LCFI0>:
  92:	0f 92       	push	r0

00000094 <.LCFI1>:
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	0f 93       	push	r16

0000009c <.LCFI2>:
  9c:	1f 93       	push	r17

0000009e <.LCFI3>:
  9e:	2f 93       	push	r18

000000a0 <.LCFI4>:
  a0:	3f 93       	push	r19

000000a2 <.LCFI5>:
  a2:	4f 93       	push	r20

000000a4 <.LCFI6>:
  a4:	5f 93       	push	r21

000000a6 <.LCFI7>:
  a6:	6f 93       	push	r22

000000a8 <.LCFI8>:
  a8:	7f 93       	push	r23

000000aa <.LCFI9>:
  aa:	8f 93       	push	r24

000000ac <.LCFI10>:
  ac:	9f 93       	push	r25

000000ae <.LCFI11>:
  ae:	af 93       	push	r26

000000b0 <.LCFI12>:
  b0:	bf 93       	push	r27

000000b2 <.LCFI13>:
  b2:	cf 93       	push	r28

000000b4 <.LCFI14>:
  b4:	df 93       	push	r29

000000b6 <.LCFI15>:
  b6:	ef 93       	push	r30

000000b8 <.LCFI16>:
  b8:	ff 93       	push	r31

000000ba <.LCFI17>:
    uint8_t rx = UDR0;
  ba:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

000000be <.LVL95>:

    packet_checksum ^= packet_buffer[packet_head];
  be:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <packet_head>
  c2:	e6 2f       	mov	r30, r22
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	eb 5f       	subi	r30, 0xFB	; 251
  c8:	fe 4f       	sbci	r31, 0xFE	; 254

000000ca <.Loc.589>:
  ca:	80 81       	ld	r24, Z
  cc:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <packet_checksum>
  d0:	82 27       	eor	r24, r18

000000d2 <.Loc.590>:
    packet_buffer[packet_head] = rx;
  d2:	90 83       	st	Z, r25

000000d4 <.Loc.592>:
    packet_checksum ^= rx;
  d4:	28 2f       	mov	r18, r24
  d6:	29 27       	eor	r18, r25
  d8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <packet_checksum>

000000dc <.Loc.594>:
    packet_head++;
  dc:	6f 5f       	subi	r22, 0xFF	; 255

000000de <.Loc.596>:
    if (packet_head >= PACKET_SIZE)
  de:	64 38       	cpi	r22, 0x84	; 132
  e0:	f8 f4       	brcc	.+62     	; 0x120 <.L47>

000000e2 <.Loc.598>:
    packet_head++;
  e2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <packet_head>
  e6:	26 2f       	mov	r18, r22
  e8:	30 e0       	ldi	r19, 0x00	; 0

000000ea <.Loc.599>:
        packet_head = 0;

    if (packet_buffer[packet_head] == PACKET_HEADER) {
  ea:	f9 01       	movw	r30, r18
  ec:	eb 5f       	subi	r30, 0xFB	; 251
  ee:	fe 4f       	sbci	r31, 0xFE	; 254

000000f0 <.Loc.601>:
  f0:	40 81       	ld	r20, Z
  f2:	45 35       	cpi	r20, 0x55	; 85
  f4:	01 f1       	breq	.+64     	; 0x136 <.L56>

000000f6 <.L46>:
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
            packet_type = new_packet[1];
        }
    }
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	7f 91       	pop	r23
 108:	6f 91       	pop	r22
 10a:	5f 91       	pop	r21
 10c:	4f 91       	pop	r20
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <.L47>:
        packet_head = 0;
 120:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <packet_head>
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	60 e0       	ldi	r22, 0x00	; 0

0000012a <.Loc.605>:
    if (packet_buffer[packet_head] == PACKET_HEADER) {
 12a:	f9 01       	movw	r30, r18
 12c:	eb 5f       	subi	r30, 0xFB	; 251
 12e:	fe 4f       	sbci	r31, 0xFE	; 254

00000130 <.Loc.607>:
 130:	40 81       	ld	r20, Z
 132:	45 35       	cpi	r20, 0x55	; 85
 134:	01 f7       	brne	.-64     	; 0xf6 <.L46>

00000136 <.L56>:
        if (packet_checksum == 0) {
 136:	89 13       	cpse	r24, r25
 138:	de cf       	rjmp	.-68     	; 0xf6 <.L46>

0000013a <.LBB164>:
            uint16_t num = PACKET_SIZE-packet_head;
 13a:	04 e8       	ldi	r16, 0x84	; 132
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	e8 01       	movw	r28, r16
 140:	c2 1b       	sub	r28, r18
 142:	d3 0b       	sbc	r29, r19

00000144 <.LVL98>:
            for (i = 0; i < num; i++)
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	6b 5f       	subi	r22, 0xFB	; 251
 148:	7e 4f       	sbci	r23, 0xFE	; 254
 14a:	ae 01       	movw	r20, r28
 14c:	88 e9       	ldi	r24, 0x98	; 152
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 3e 04 	call	0x87c	; 0x87c <memcpy>

00000154 <.LVL99>:
            for (i = num; i < PACKET_SIZE; i++)
 154:	c4 38       	cpi	r28, 0x84	; 132
 156:	d1 05       	cpc	r29, r1
 158:	91 f0       	breq	.+36     	; 0x17e <.L50>

0000015a <.LVL100>:
 15a:	ce 01       	movw	r24, r28
 15c:	88 56       	subi	r24, 0x68	; 104
 15e:	9e 4f       	sbci	r25, 0xFE	; 254

00000160 <.Loc.618>:
                new_packet[i] = packet_buffer[i-num];
 160:	9e 01       	movw	r18, r28
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	25 38       	cpi	r18, 0x85	; 133
 16c:	31 05       	cpc	r19, r1
 16e:	18 f4       	brcc	.+6      	; 0x176 <.L52>
 170:	a8 01       	movw	r20, r16
 172:	4c 1b       	sub	r20, r28
 174:	5d 0b       	sbc	r21, r29

00000176 <.L52>:
 176:	65 e0       	ldi	r22, 0x05	; 5
 178:	71 e0       	ldi	r23, 0x01	; 1
 17a:	0e 94 3e 04 	call	0x87c	; 0x87c <memcpy>

0000017e <.L50>:
            has_new_packet = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <has_new_packet>

00000184 <.Loc.621>:
            packet_type = new_packet[1];
 184:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <new_packet+0x1>

00000188 <.Loc.623>:
 188:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <packet_type>

0000018c <.LBE164>:
}
 18c:	b4 cf       	rjmp	.-152    	; 0xf6 <.L46>

0000018e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
 18e:	fc 01       	movw	r30, r24

00000190 <.LBB4>:
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 190:	20 81       	ld	r18, Z
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	9f ef       	ldi	r25, 0xFF	; 255

00000196 <.LVL2>:
 196:	82 27       	eor	r24, r18
 198:	08 2e       	mov	r0, r24
 19a:	82 95       	swap	r24
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	80 25       	eor	r24, r0
 1a0:	09 2e       	mov	r0, r25
 1a2:	98 2f       	mov	r25, r24
 1a4:	82 95       	swap	r24
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	08 26       	eor	r0, r24
 1aa:	86 95       	lsr	r24
 1ac:	98 27       	eor	r25, r24
 1ae:	89 27       	eor	r24, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	88 0f       	add	r24, r24
 1b4:	88 0f       	add	r24, r24
 1b6:	80 25       	eor	r24, r0

000001b8 <.LBB15>:
 1b8:	21 81       	ldd	r18, Z+1	; 0x01
 1ba:	82 27       	eor	r24, r18
 1bc:	08 2e       	mov	r0, r24
 1be:	82 95       	swap	r24
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	80 25       	eor	r24, r0
 1c4:	09 2e       	mov	r0, r25
 1c6:	98 2f       	mov	r25, r24
 1c8:	82 95       	swap	r24
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	08 26       	eor	r0, r24
 1ce:	86 95       	lsr	r24
 1d0:	98 27       	eor	r25, r24
 1d2:	89 27       	eor	r24, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	88 0f       	add	r24, r24
 1d8:	88 0f       	add	r24, r24
 1da:	80 25       	eor	r24, r0

000001dc <.LBB16>:
 1dc:	22 81       	ldd	r18, Z+2	; 0x02
 1de:	82 27       	eor	r24, r18
 1e0:	08 2e       	mov	r0, r24
 1e2:	82 95       	swap	r24
 1e4:	80 7f       	andi	r24, 0xF0	; 240
 1e6:	80 25       	eor	r24, r0
 1e8:	09 2e       	mov	r0, r25
 1ea:	98 2f       	mov	r25, r24
 1ec:	82 95       	swap	r24
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	08 26       	eor	r0, r24
 1f2:	86 95       	lsr	r24
 1f4:	98 27       	eor	r25, r24
 1f6:	89 27       	eor	r24, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	88 0f       	add	r24, r24
 1fc:	88 0f       	add	r24, r24
 1fe:	80 25       	eor	r24, r0

00000200 <.LBB17>:
 200:	23 81       	ldd	r18, Z+3	; 0x03
 202:	82 27       	eor	r24, r18
 204:	08 2e       	mov	r0, r24
 206:	82 95       	swap	r24
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	80 25       	eor	r24, r0
 20c:	09 2e       	mov	r0, r25
 20e:	98 2f       	mov	r25, r24
 210:	82 95       	swap	r24
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	08 26       	eor	r0, r24
 216:	86 95       	lsr	r24
 218:	98 27       	eor	r25, r24
 21a:	89 27       	eor	r24, r25
 21c:	88 0f       	add	r24, r24
 21e:	88 0f       	add	r24, r24
 220:	88 0f       	add	r24, r24
 222:	80 25       	eor	r24, r0

00000224 <.LBB18>:
 224:	24 81       	ldd	r18, Z+4	; 0x04
 226:	82 27       	eor	r24, r18
 228:	08 2e       	mov	r0, r24
 22a:	82 95       	swap	r24
 22c:	80 7f       	andi	r24, 0xF0	; 240
 22e:	80 25       	eor	r24, r0
 230:	09 2e       	mov	r0, r25
 232:	98 2f       	mov	r25, r24
 234:	82 95       	swap	r24
 236:	8f 70       	andi	r24, 0x0F	; 15
 238:	08 26       	eor	r0, r24
 23a:	86 95       	lsr	r24
 23c:	98 27       	eor	r25, r24
 23e:	89 27       	eor	r24, r25
 240:	88 0f       	add	r24, r24
 242:	88 0f       	add	r24, r24
 244:	88 0f       	add	r24, r24
 246:	80 25       	eor	r24, r0

00000248 <.LBB19>:
 248:	25 81       	ldd	r18, Z+5	; 0x05
 24a:	82 27       	eor	r24, r18
 24c:	08 2e       	mov	r0, r24
 24e:	82 95       	swap	r24
 250:	80 7f       	andi	r24, 0xF0	; 240
 252:	80 25       	eor	r24, r0
 254:	09 2e       	mov	r0, r25
 256:	98 2f       	mov	r25, r24
 258:	82 95       	swap	r24
 25a:	8f 70       	andi	r24, 0x0F	; 15
 25c:	08 26       	eor	r0, r24
 25e:	86 95       	lsr	r24
 260:	98 27       	eor	r25, r24
 262:	89 27       	eor	r24, r25
 264:	88 0f       	add	r24, r24
 266:	88 0f       	add	r24, r24
 268:	88 0f       	add	r24, r24
 26a:	80 25       	eor	r24, r0

0000026c <.LBB20>:
 26c:	26 81       	ldd	r18, Z+6	; 0x06
 26e:	82 27       	eor	r24, r18
 270:	08 2e       	mov	r0, r24
 272:	82 95       	swap	r24
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	80 25       	eor	r24, r0
 278:	09 2e       	mov	r0, r25
 27a:	98 2f       	mov	r25, r24
 27c:	82 95       	swap	r24
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	08 26       	eor	r0, r24
 282:	86 95       	lsr	r24
 284:	98 27       	eor	r25, r24
 286:	89 27       	eor	r24, r25
 288:	88 0f       	add	r24, r24
 28a:	88 0f       	add	r24, r24
 28c:	88 0f       	add	r24, r24
 28e:	80 25       	eor	r24, r0

00000290 <.LBB21>:
 290:	27 81       	ldd	r18, Z+7	; 0x07
 292:	82 27       	eor	r24, r18
 294:	08 2e       	mov	r0, r24
 296:	82 95       	swap	r24
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	80 25       	eor	r24, r0
 29c:	09 2e       	mov	r0, r25
 29e:	98 2f       	mov	r25, r24
 2a0:	82 95       	swap	r24
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	08 26       	eor	r0, r24
 2a6:	86 95       	lsr	r24
 2a8:	98 27       	eor	r25, r24
 2aa:	89 27       	eor	r24, r25
 2ac:	88 0f       	add	r24, r24
 2ae:	88 0f       	add	r24, r24
 2b0:	88 0f       	add	r24, r24
 2b2:	80 25       	eor	r24, r0

000002b4 <.LBB22>:
 2b4:	20 85       	ldd	r18, Z+8	; 0x08
 2b6:	82 27       	eor	r24, r18
 2b8:	08 2e       	mov	r0, r24
 2ba:	82 95       	swap	r24
 2bc:	80 7f       	andi	r24, 0xF0	; 240
 2be:	80 25       	eor	r24, r0
 2c0:	09 2e       	mov	r0, r25
 2c2:	98 2f       	mov	r25, r24
 2c4:	82 95       	swap	r24
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	08 26       	eor	r0, r24
 2ca:	86 95       	lsr	r24
 2cc:	98 27       	eor	r25, r24
 2ce:	89 27       	eor	r24, r25
 2d0:	88 0f       	add	r24, r24
 2d2:	88 0f       	add	r24, r24
 2d4:	88 0f       	add	r24, r24
 2d6:	80 25       	eor	r24, r0

000002d8 <.LBB23>:
 2d8:	21 85       	ldd	r18, Z+9	; 0x09
 2da:	82 27       	eor	r24, r18
 2dc:	08 2e       	mov	r0, r24
 2de:	82 95       	swap	r24
 2e0:	80 7f       	andi	r24, 0xF0	; 240
 2e2:	80 25       	eor	r24, r0
 2e4:	09 2e       	mov	r0, r25
 2e6:	98 2f       	mov	r25, r24
 2e8:	82 95       	swap	r24
 2ea:	8f 70       	andi	r24, 0x0F	; 15
 2ec:	08 26       	eor	r0, r24
 2ee:	86 95       	lsr	r24
 2f0:	98 27       	eor	r25, r24
 2f2:	89 27       	eor	r24, r25
 2f4:	88 0f       	add	r24, r24
 2f6:	88 0f       	add	r24, r24
 2f8:	88 0f       	add	r24, r24
 2fa:	80 25       	eor	r24, r0

000002fc <.LBE23>:
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
 2fc:	08 95       	ret

000002fe <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
 2fe:	0f b6       	in	r0, 0x3f	; 63

00000300 <.Loc.1>:
#ifndef OHC
    cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
 300:	a4 b1       	in	r26, 0x04	; 4

00000302 <.Loc.2>:

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
 302:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tx_mask>

00000306 <.Loc.3>:
    or tmpreg1, ddrreg
 306:	2a 2b       	or	r18, r26

00000308 <.Loc.4>:
    out IR_DDR, tmpreg1
 308:	24 b9       	out	0x04, r18	; 4

0000030a <.Loc.5>:

    ldi tmpreg1, 0x01
 30a:	21 e0       	ldi	r18, 0x01	; 1

0000030c <.Loc.6>:
    irsend
 30c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
 310:	20 30       	cpi	r18, 0x00	; 0
 312:	29 f0       	breq	.+10     	; 0x31e <.L1^B1>
 314:	00 00       	nop
 316:	25 b1       	in	r18, 0x05	; 5
 318:	23 2b       	or	r18, r19
 31a:	25 b9       	out	0x05, r18	; 5
 31c:	04 c0       	rjmp	.+8      	; 0x326 <.L2^B1>

0000031e <.L1^B1>:
 31e:	00 00       	nop
 320:	00 00       	nop
 322:	00 00       	nop
 324:	00 c0       	rjmp	.+0      	; 0x326 <.L2^B1>

00000326 <.L2^B1>:
 326:	00 00       	nop
 328:	00 00       	nop
 32a:	00 00       	nop
 32c:	30 95       	com	r19
 32e:	25 b1       	in	r18, 0x05	; 5
 330:	23 23       	and	r18, r19
 332:	25 b9       	out	0x05, r18	; 5

00000334 <.Loc.7>:
    delay_cycles (2*rx_bitcycles-irsend_cycles)
 334:	2e ea       	ldi	r18, 0xAE	; 174

00000336 <.L1^B2>:
 336:	2a 95       	dec	r18
 338:	f1 f7       	brne	.-4      	; 0x336 <.L1^B2>

0000033a <.Loc.8>:

    ldi tmpreg1, rx_bitcycles*7/8
 33a:	2b ee       	ldi	r18, 0xEB	; 235

0000033c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
 33c:	30 b7       	in	r19, 0x30	; 48

0000033e <.Loc.10>:
    sbrs tmpreg2, ACO
 33e:	35 ff       	sbrs	r19, 5

00000340 <.Loc.11>:
    rjmp nocollision
 340:	0a c0       	rjmp	.+20     	; 0x356 <nocollision>

00000342 <.Loc.12>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
 342:	a4 b9       	out	0x04, r26	; 4

00000344 <.Loc.13>:
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
 344:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>

00000348 <.Loc.14>:
    com tmpreg2
 348:	30 95       	com	r19

0000034a <.Loc.15>:
    in tmpreg1, IR_PORT
 34a:	25 b1       	in	r18, 0x05	; 5

0000034c <.Loc.16>:
    and tmpreg1, tmpreg2
 34c:	23 23       	and	r18, r19

0000034e <.Loc.17>:
    out IR_PORT, tmpreg1
 34e:	25 b9       	out	0x05, r18	; 5

00000350 <.Loc.18>:
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
 350:	0f be       	out	0x3f, r0	; 63

00000352 <.Loc.19>:
    return 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret

00000356 <nocollision>:
	...

00000358 <.Loc.21>:
nocollision:
    nop
    dec tmpreg1
 358:	2a 95       	dec	r18

0000035a <.Loc.22>:
    brne checkcollision
 35a:	81 f7       	brne	.-32     	; 0x33c <checkcollision>

0000035c <.Loc.23>:

    ldi tmpreg1, 0x01
 35c:	21 e0       	ldi	r18, 0x01	; 1

0000035e <.Loc.24>:
    irsend
 35e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
 362:	20 30       	cpi	r18, 0x00	; 0
 364:	29 f0       	breq	.+10     	; 0x370 <.L1^B3>
 366:	00 00       	nop
 368:	25 b1       	in	r18, 0x05	; 5
 36a:	23 2b       	or	r18, r19
 36c:	25 b9       	out	0x05, r18	; 5
 36e:	04 c0       	rjmp	.+8      	; 0x378 <.L2^B2>

00000370 <.L1^B3>:
 370:	00 00       	nop
 372:	00 00       	nop
 374:	00 00       	nop
 376:	00 c0       	rjmp	.+0      	; 0x378 <.L2^B2>

00000378 <.L2^B2>:
 378:	00 00       	nop
 37a:	00 00       	nop
 37c:	00 00       	nop
 37e:	30 95       	com	r19
 380:	25 b1       	in	r18, 0x05	; 5
 382:	23 23       	and	r18, r19
 384:	25 b9       	out	0x05, r18	; 5

00000386 <.Loc.25>:
    delay_cycles (rx_bitcycles-irsend_cycles)
 386:	00 00       	nop
 388:	24 e5       	ldi	r18, 0x54	; 84

0000038a <.L1^B4>:
 38a:	2a 95       	dec	r18
 38c:	f1 f7       	brne	.-4      	; 0x38a <.L1^B4>

0000038e <.Loc.26>:

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
 38e:	fc 01       	movw	r30, r24

00000390 <.Loc.27>:
    ldi byteidx, 12
 390:	8c e0       	ldi	r24, 0x0C	; 12

00000392 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
 392:	61 91       	ld	r22, Z+

00000394 <.Loc.29>:
    ldi bytevalH, 0x00
 394:	70 e0       	ldi	r23, 0x00	; 0

00000396 <.Loc.30>:
    add bytevalL, bytevalL
 396:	66 0f       	add	r22, r22

00000398 <.Loc.31>:
    adc bytevalH, bytevalH
 398:	77 1f       	adc	r23, r23

0000039a <.Loc.32>:
    ori bytevalL, 0x01
 39a:	61 60       	ori	r22, 0x01	; 1

0000039c <.Loc.33>:
    ori bytevalH, 0x02
 39c:	72 60       	ori	r23, 0x02	; 2

0000039e <.Loc.34>:
    ; bitidex = 10
    ldi bitidx, 10
 39e:	9a e0       	ldi	r25, 0x0A	; 10

000003a0 <.Loc.35>:
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
 3a0:	41 e0       	ldi	r20, 0x01	; 1

000003a2 <.Loc.36>:
    ldi bitmaskH, 0x00
 3a2:	50 e0       	ldi	r21, 0x00	; 0

000003a4 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
 3a4:	9a 01       	movw	r18, r20

000003a6 <.Loc.38>:
    and tmpreg1, bytevalL
 3a6:	26 23       	and	r18, r22

000003a8 <.Loc.39>:
    and tmpreg2, bytevalH
 3a8:	37 23       	and	r19, r23

000003aa <.Loc.40>:
    or  tmpreg1, tmpreg2
 3aa:	23 2b       	or	r18, r19

000003ac <.Loc.41>:

    ; irsend tmpreg
    irsend
 3ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
 3b0:	20 30       	cpi	r18, 0x00	; 0
 3b2:	29 f0       	breq	.+10     	; 0x3be <.L1^B5>
 3b4:	00 00       	nop
 3b6:	25 b1       	in	r18, 0x05	; 5
 3b8:	23 2b       	or	r18, r19
 3ba:	25 b9       	out	0x05, r18	; 5
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <.L2^B3>

000003be <.L1^B5>:
 3be:	00 00       	nop
 3c0:	00 00       	nop
 3c2:	00 00       	nop
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <.L2^B3>

000003c6 <.L2^B3>:
 3c6:	00 00       	nop
 3c8:	00 00       	nop
 3ca:	00 00       	nop
 3cc:	30 95       	com	r19
 3ce:	25 b1       	in	r18, 0x05	; 5
 3d0:	23 23       	and	r18, r19
 3d2:	25 b9       	out	0x05, r18	; 5

000003d4 <.Loc.42>:
    delay_cycles (rx_bitcycles-irsend_cycles-9)
 3d4:	00 00       	nop
 3d6:	21 e5       	ldi	r18, 0x51	; 81

000003d8 <.L1^B6>:
 3d8:	2a 95       	dec	r18
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <.L1^B6>

000003dc <.Loc.43>:

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
 3dc:	44 0f       	add	r20, r20

000003de <.Loc.44>:
    adc bitmaskH, bitmaskH
 3de:	55 1f       	adc	r21, r21

000003e0 <.Loc.45>:

    ; if (bitidex--) goto sendbit
    dec bitidx
 3e0:	9a 95       	dec	r25

000003e2 <.Loc.46>:
    brne sendbit
 3e2:	01 f7       	brne	.-64     	; 0x3a4 <sendbit>

000003e4 <.Loc.47>:

    ; if (byteidx--) goto sendbyte
    dec byteidx
 3e4:	8a 95       	dec	r24

000003e6 <.Loc.48>:
    brne sendbyte
 3e6:	a9 f6       	brne	.-86     	; 0x392 <sendbyte>

000003e8 <.Loc.49>:

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
 3e8:	20 b7       	in	r18, 0x30	; 48

000003ea <.Loc.50>:
    ori tmpreg1, (1<<ACI)
 3ea:	20 61       	ori	r18, 0x10	; 16

000003ec <.Loc.51>:
    out ACSR, tmpreg1
 3ec:	20 bf       	out	0x30, r18	; 48

000003ee <.Loc.52>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
 3ee:	a4 b9       	out	0x04, r26	; 4

000003f0 <.Loc.53>:

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
 3f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>

000003f4 <.Loc.54>:
    com tmpreg2
 3f4:	30 95       	com	r19

000003f6 <.Loc.55>:
    in tmpreg1, IR_PORT
 3f6:	25 b1       	in	r18, 0x05	; 5

000003f8 <.Loc.56>:
    and tmpreg1, tmpreg2
 3f8:	23 23       	and	r18, r19

000003fa <.Loc.57>:
    out IR_PORT, tmpreg1
 3fa:	25 b9       	out	0x05, r18	; 5

000003fc <.Loc.58>:

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
 3fc:	0f be       	out	0x3f, r0	; 63

000003fe <.Loc.59>:
    return 1
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	08 95       	ret

00000402 <main>:
    cli();
 402:	f8 94       	cli

00000404 <.Loc.2>:
    ir_ddr |= ir_mask;
 404:	21 9a       	sbi	0x04, 1	; 4

00000406 <.Loc.4>:
    led_ddr |= led_mask;
 406:	25 9a       	sbi	0x04, 5	; 4

00000408 <.Loc.6>:
    led_port &= ~led_mask;
 408:	2d 98       	cbi	0x05, 5	; 5

0000040a <.Loc.8>:
    ir_port &= ~ir_mask;
 40a:	29 98       	cbi	0x05, 1	; 5

0000040c <.Loc.10>:
    ACSR |= (1<<ACD);
 40c:	80 b7       	in	r24, 0x30	; 48
 40e:	80 68       	ori	r24, 0x80	; 128
 410:	80 bf       	out	0x30, r24	; 48

00000412 <.Loc.12>:
    CLKPR = (1<<CLKPCE);
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>

00000418 <.Loc.14>:
    CLKPR = 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>

0000041e <.Loc.16>:
    UBRR0 = UBRR_VALUE;
 41e:	8c e0       	ldi	r24, 0x0C	; 12
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 426:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

0000042a <.Loc.18>:
    UCSR0A &= ~(1<<U2X0);
 42a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 42e:	8d 7f       	andi	r24, 0xFD	; 253
 430:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

00000434 <.Loc.20>:
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
 434:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 438:	86 60       	ori	r24, 0x06	; 6
 43a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

0000043e <.Loc.22>:
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
 43e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 442:	88 69       	ori	r24, 0x98	; 152
 444:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

00000448 <.Loc.24>:
    sei();
 448:	78 94       	sei

0000044a <.Loc.25>:
    tx_mask = ir_mask;
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tx_mask>

00000450 <.Loc.27>:
    bootmsg = (bootmsg_t*)msg.data;
 450:	8b e8       	ldi	r24, 0x8B	; 139
 452:	e8 2e       	mov	r14, r24
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	f8 2e       	mov	r15, r24
 458:	f0 92 8a 01 	sts	0x018A, r15	; 0x80018a <bootmsg+0x1>
 45c:	e0 92 89 01 	sts	0x0189, r14	; 0x800189 <bootmsg>

00000460 <.Loc.29>:
    gpsmsg = (gpsmsg_t*)msg.data;
 460:	f0 92 1f 02 	sts	0x021F, r15	; 0x80021f <gpsmsg+0x1>
 464:	e0 92 1e 02 	sts	0x021E, r14	; 0x80021e <gpsmsg>

00000468 <.Loc.31>:
    rawmsg = (uint8_t*)&msg;
 468:	f0 92 1d 02 	sts	0x021D, r15	; 0x80021d <rawmsg+0x1>
 46c:	e0 92 1c 02 	sts	0x021C, r14	; 0x80021c <rawmsg>

00000470 <.LVL0>:
        led_port |= led_mask;
 470:	2d 9a       	sbi	0x05, 5	; 5

00000472 <.LBB80>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	81 ee       	ldi	r24, 0xE1	; 225
 476:	94 e0       	ldi	r25, 0x04	; 4

00000478 <.L1^B1>:
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <.L1^B1>
 480:	00 c0       	rjmp	.+0      	; 0x482 <L0^A>

00000482 <L0^A>:
	...

00000484 <.LBE91>:
        led_port &= ~led_mask;
 484:	2d 98       	cbi	0x05, 5	; 5

00000486 <.LBB103>:
 486:	ef ef       	ldi	r30, 0xFF	; 255
 488:	f1 ee       	ldi	r31, 0xE1	; 225
 48a:	24 e0       	ldi	r18, 0x04	; 4

0000048c <.L1^B2>:
 48c:	e1 50       	subi	r30, 0x01	; 1
 48e:	f0 40       	sbci	r31, 0x00	; 0
 490:	20 40       	sbci	r18, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <.L1^B2>
 494:	00 c0       	rjmp	.+0      	; 0x496 <L0^A>

00000496 <L0^A>:
	...

00000498 <.LBE103>:
        led_port |= led_mask;
 498:	2d 9a       	sbi	0x05, 5	; 5

0000049a <.LBB104>:
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	91 ee       	ldi	r25, 0xE1	; 225
 49e:	e4 e0       	ldi	r30, 0x04	; 4

000004a0 <.L1^B3>:
 4a0:	81 50       	subi	r24, 0x01	; 1
 4a2:	90 40       	sbci	r25, 0x00	; 0
 4a4:	e0 40       	sbci	r30, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <.L1^B3>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <L0^A>

000004aa <L0^A>:
	...

000004ac <.LBE105>:
        led_port &= ~led_mask;
 4ac:	2d 98       	cbi	0x05, 5	; 5

000004ae <.LBB106>:
 4ae:	ff ef       	ldi	r31, 0xFF	; 255
 4b0:	21 ee       	ldi	r18, 0xE1	; 225
 4b2:	84 e0       	ldi	r24, 0x04	; 4

000004b4 <.L1^B4>:
 4b4:	f1 50       	subi	r31, 0x01	; 1
 4b6:	20 40       	sbci	r18, 0x00	; 0
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <.L1^B4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <L0^A>

000004be <L0^A>:
	...

000004c0 <.LBE107>:
        led_port |= led_mask;
 4c0:	2d 9a       	sbi	0x05, 5	; 5

000004c2 <.LBB108>:
 4c2:	9f ef       	ldi	r25, 0xFF	; 255
 4c4:	e1 ee       	ldi	r30, 0xE1	; 225
 4c6:	f4 e0       	ldi	r31, 0x04	; 4

000004c8 <.L1^B5>:
 4c8:	91 50       	subi	r25, 0x01	; 1
 4ca:	e0 40       	sbci	r30, 0x00	; 0
 4cc:	f0 40       	sbci	r31, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <.L1^B5>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <L0^A>

000004d2 <L0^A>:
	...

000004d4 <.LBE109>:
        led_port &= ~led_mask;
 4d4:	2d 98       	cbi	0x05, 5	; 5

000004d6 <.LBB110>:
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	81 ee       	ldi	r24, 0xE1	; 225
 4da:	94 e0       	ldi	r25, 0x04	; 4

000004dc <.L1^B6>:
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <.L1^B6>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <L0^A>

000004e6 <L0^A>:
	...

000004e8 <.LBE111>:
        led_port |= led_mask;
 4e8:	2d 9a       	sbi	0x05, 5	; 5

000004ea <.LBB112>:
 4ea:	ef ef       	ldi	r30, 0xFF	; 255
 4ec:	f1 ee       	ldi	r31, 0xE1	; 225
 4ee:	24 e0       	ldi	r18, 0x04	; 4

000004f0 <.L1^B7>:
 4f0:	e1 50       	subi	r30, 0x01	; 1
 4f2:	f0 40       	sbci	r31, 0x00	; 0
 4f4:	20 40       	sbci	r18, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <.L1^B7>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <L0^A>

000004fa <L0^A>:
	...

000004fc <.LBE113>:
        led_port &= ~led_mask;
 4fc:	2d 98       	cbi	0x05, 5	; 5

000004fe <.LBB114>:
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	91 ee       	ldi	r25, 0xE1	; 225
 502:	e4 e0       	ldi	r30, 0x04	; 4

00000504 <.L1^B8>:
 504:	81 50       	subi	r24, 0x01	; 1
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e0 40       	sbci	r30, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <.L1^B8>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <L0^A>

0000050e <L0^A>:
	...

00000510 <.LBE115>:
        led_port |= led_mask;
 510:	2d 9a       	sbi	0x05, 5	; 5

00000512 <.LBB116>:
 512:	ff ef       	ldi	r31, 0xFF	; 255
 514:	21 ee       	ldi	r18, 0xE1	; 225
 516:	84 e0       	ldi	r24, 0x04	; 4

00000518 <.L1^B9>:
 518:	f1 50       	subi	r31, 0x01	; 1
 51a:	20 40       	sbci	r18, 0x00	; 0
 51c:	80 40       	sbci	r24, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <.L1^B9>
 520:	00 c0       	rjmp	.+0      	; 0x522 <L0^A>

00000522 <L0^A>:
	...

00000524 <.LBE117>:
        led_port &= ~led_mask;
 524:	2d 98       	cbi	0x05, 5	; 5

00000526 <.LBB118>:
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	e1 ee       	ldi	r30, 0xE1	; 225
 52a:	f4 e0       	ldi	r31, 0x04	; 4

0000052c <.L1^B10>:
 52c:	91 50       	subi	r25, 0x01	; 1
 52e:	e0 40       	sbci	r30, 0x00	; 0
 530:	f0 40       	sbci	r31, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <.L1^B10>
 534:	00 c0       	rjmp	.+0      	; 0x536 <L0^A>

00000536 <L0^A>:
	...

00000538 <.LBE119>:
    for (i=0; i<5; i++) {
 538:	0a e1       	ldi	r16, 0x1A	; 26
 53a:	12 e0       	ldi	r17, 0x02	; 2

0000053c <.Loc.176>:
                msg.type = BOOTPGM_PAGE;
 53c:	91 e8       	ldi	r25, 0x81	; 129
 53e:	b9 2e       	mov	r11, r25

00000540 <.Loc.177>:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 540:	29 e0       	ldi	r18, 0x09	; 9
 542:	c2 2e       	mov	r12, r18

00000544 <.Loc.178>:
                msg.type = GPS;
 544:	dd 24       	eor	r13, r13
 546:	d3 94       	inc	r13

00000548 <.L3>:
        if (has_new_packet) {
 548:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

0000054c <.Loc.182>:
 54c:	88 23       	and	r24, r24
 54e:	e1 f3       	breq	.-8      	; 0x548 <.L3>

00000550 <.Loc.183>:
            has_new_packet = 0;
 550:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <has_new_packet>

00000554 <.Loc.185>:
            switch(packet_type) {
 554:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <packet_type>
 558:	84 30       	cpi	r24, 0x04	; 4
 55a:	09 f4       	brne	.+2      	; 0x55e <L0^A+0x2>

0000055c <L0^A>:
 55c:	ac c0       	rjmp	.+344    	; 0x6b6 <.L4>
 55e:	08 f0       	brcs	.+2      	; 0x562 <L0^A+0x2>

00000560 <L0^A>:
 560:	51 c0       	rjmp	.+162    	; 0x604 <.L5>
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	09 f4       	brne	.+2      	; 0x568 <L0^A+0x2>

00000566 <L0^A>:
 566:	ec c0       	rjmp	.+472    	; 0x740 <.L6>
 568:	83 30       	cpi	r24, 0x03	; 3
 56a:	09 f0       	breq	.+2      	; 0x56e <.LVL21>

0000056c <L0^A>:
 56c:	96 c0       	rjmp	.+300    	; 0x69a <.L45>

0000056e <.LVL21>:
                    rawmsg[i] = new_packet[i+2];
 56e:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 572:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000576 <.Loc.189>:
 576:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>

0000057a <.Loc.190>:
 57a:	80 83       	st	Z, r24

0000057c <.LVL22>:
 57c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 580:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000584 <.Loc.195>:
 584:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>

00000588 <.Loc.196>:
 588:	81 83       	std	Z+1, r24	; 0x01

0000058a <.LVL23>:
 58a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 58e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000592 <.Loc.201>:
 592:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>

00000596 <.Loc.202>:
 596:	82 83       	std	Z+2, r24	; 0x02

00000598 <.LVL24>:
 598:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>

0000059c <.Loc.207>:
 59c:	83 83       	std	Z+3, r24	; 0x03

0000059e <.LVL25>:
 59e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>

000005a2 <.Loc.212>:
 5a2:	84 83       	std	Z+4, r24	; 0x04

000005a4 <.LVL26>:
 5a4:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>

000005a8 <.Loc.217>:
 5a8:	85 83       	std	Z+5, r24	; 0x05

000005aa <.LVL27>:
 5aa:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>

000005ae <.Loc.222>:
 5ae:	86 83       	std	Z+6, r24	; 0x06

000005b0 <.LVL28>:
 5b0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>

000005b4 <.Loc.227>:
 5b4:	87 83       	std	Z+7, r24	; 0x07

000005b6 <.LVL29>:
 5b6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>

000005ba <.Loc.232>:
 5ba:	80 87       	std	Z+8, r24	; 0x08

000005bc <.LVL30>:
 5bc:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>

000005c0 <.Loc.237>:
 5c0:	81 87       	std	Z+9, r24	; 0x09

000005c2 <.LVL31>:
 5c2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <new_packet+0xc>

000005c6 <.Loc.242>:
 5c6:	82 87       	std	Z+10, r24	; 0x0a

000005c8 <.LVL32>:
 5c8:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <new_packet+0xd>

000005cc <.Loc.247>:
 5cc:	83 87       	std	Z+11, r24	; 0x0b

000005ce <.LVL33>:
                while(!has_new_packet) {
 5ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

000005d2 <.Loc.252>:
 5d2:	81 11       	cpse	r24, r1
 5d4:	b9 cf       	rjmp	.-142    	; 0x548 <.L3>

000005d6 <.L12>:
                    message_send(&msg);
 5d6:	8b e8       	ldi	r24, 0x8B	; 139
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	0e 94 7f 01 	call	0x2fe	; 0x2fe <message_send>

000005de <.LVL34>:
                    led_port |= led_mask;
 5de:	2d 9a       	sbi	0x05, 5	; 5

000005e0 <.LBB120>:
 5e0:	8f e6       	ldi	r24, 0x6F	; 111
 5e2:	97 e1       	ldi	r25, 0x17	; 23

000005e4 <.L1^B11>:
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <.L1^B11>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <L0^A>

000005ea <L0^A>:
	...

000005ec <.LBE123>:
                    led_port &= ~led_mask;
 5ec:	2d 98       	cbi	0x05, 5	; 5

000005ee <.LBB124>:
 5ee:	ef e6       	ldi	r30, 0x6F	; 111
 5f0:	f7 e1       	ldi	r31, 0x17	; 23

000005f2 <.L1^B12>:
 5f2:	31 97       	sbiw	r30, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <.L1^B12>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <L0^A>

000005f8 <L0^A>:
	...

000005fa <.LBE127>:
                while(!has_new_packet) {
 5fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

000005fe <.Loc.282>:
 5fe:	88 23       	and	r24, r24
 600:	51 f3       	breq	.-44     	; 0x5d6 <.L12>
 602:	a2 cf       	rjmp	.-188    	; 0x548 <.L3>

00000604 <.L5>:
            switch(packet_type) {
 604:	85 30       	cpi	r24, 0x05	; 5
 606:	09 f4       	brne	.+2      	; 0x60a <L0^A+0x2>

00000608 <L0^A>:
 608:	e8 c0       	rjmp	.+464    	; 0x7da <.L10>
 60a:	86 30       	cpi	r24, 0x06	; 6
 60c:	09 f0       	breq	.+2      	; 0x610 <.LVL40>

0000060e <L0^A>:
 60e:	9c cf       	rjmp	.-200    	; 0x548 <.L3>

00000610 <.LVL40>:
                    rawmsg[i] = new_packet[i+2];
 610:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 614:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000618 <.Loc.287>:
 618:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>

0000061c <.Loc.288>:
 61c:	80 83       	st	Z, r24

0000061e <.LVL41>:
 61e:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 622:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000626 <.Loc.293>:
 626:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>

0000062a <.Loc.294>:
 62a:	81 83       	std	Z+1, r24	; 0x01

0000062c <.LVL42>:
 62c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 630:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000634 <.Loc.299>:
 634:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>

00000638 <.Loc.300>:
 638:	82 83       	std	Z+2, r24	; 0x02

0000063a <.LVL43>:
 63a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>

0000063e <.Loc.305>:
 63e:	83 83       	std	Z+3, r24	; 0x03

00000640 <.LVL44>:
 640:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>

00000644 <.Loc.310>:
 644:	84 83       	std	Z+4, r24	; 0x04

00000646 <.LVL45>:
 646:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>

0000064a <.Loc.315>:
 64a:	85 83       	std	Z+5, r24	; 0x05

0000064c <.LVL46>:
 64c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>

00000650 <.Loc.320>:
 650:	86 83       	std	Z+6, r24	; 0x06

00000652 <.LVL47>:
 652:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>

00000656 <.Loc.325>:
 656:	87 83       	std	Z+7, r24	; 0x07

00000658 <.LVL48>:
 658:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>

0000065c <.Loc.330>:
 65c:	80 87       	std	Z+8, r24	; 0x08

0000065e <.LVL49>:
 65e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>

00000662 <.Loc.335>:
 662:	81 87       	std	Z+9, r24	; 0x09

00000664 <.LVL50>:
                msg.crc = message_crc(&msg);
 664:	8b e8       	ldi	r24, 0x8B	; 139
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 c7 00 	call	0x18e	; 0x18e <message_crc>

0000066c <.LVL51>:
 66c:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
 670:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>

00000674 <.Loc.341>:
                message_send(&msg);
 674:	8b e8       	ldi	r24, 0x8B	; 139
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	0e 94 7f 01 	call	0x2fe	; 0x2fe <message_send>

0000067c <.LVL52>:
                led_port |= led_mask;
 67c:	2d 9a       	sbi	0x05, 5	; 5

0000067e <.LBB128>:
 67e:	8f e6       	ldi	r24, 0x6F	; 111
 680:	97 e1       	ldi	r25, 0x17	; 23

00000682 <.L1^B13>:
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <.L1^B13>
 686:	00 c0       	rjmp	.+0      	; 0x688 <L0^A>

00000688 <L0^A>:
	...

0000068a <.LBE131>:
                led_port &= ~led_mask;
 68a:	2d 98       	cbi	0x05, 5	; 5

0000068c <.LBB132>:
 68c:	ef e6       	ldi	r30, 0x6F	; 111
 68e:	f7 e1       	ldi	r31, 0x17	; 23

00000690 <.L1^B14>:
 690:	31 97       	sbiw	r30, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <.L1^B14>
 694:	00 c0       	rjmp	.+0      	; 0x696 <L0^A>

00000696 <L0^A>:
	...

00000698 <.Loc.367>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
 698:	57 cf       	rjmp	.-338    	; 0x548 <.L3>

0000069a <.L45>:
            switch(packet_type) {
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	09 f0       	breq	.+2      	; 0x6a0 <.Loc.370>

0000069e <L0^A>:
 69e:	54 cf       	rjmp	.-344    	; 0x548 <.L3>

000006a0 <.Loc.370>:
                leds_toggle = !leds_toggle;
 6a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <leds_toggle>
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	81 11       	cpse	r24, r1
 6a8:	90 e0       	ldi	r25, 0x00	; 0

000006aa <.Loc.372>:
 6aa:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <leds_toggle>

000006ae <.Loc.373>:
                if (leds_toggle) {
 6ae:	81 11       	cpse	r24, r1
 6b0:	e3 c0       	rjmp	.+454    	; 0x878 <.L17>

000006b2 <.Loc.375>:
                    led_port |= led_mask;
 6b2:	2d 9a       	sbi	0x05, 5	; 5
 6b4:	49 cf       	rjmp	.-366    	; 0x548 <.L3>

000006b6 <.L4>:
                msg.type = BOOTPGM_PAGE;
 6b6:	b0 92 94 01 	sts	0x0194, r11	; 0x800194 <msg+0x9>

000006ba <.Loc.379>:
                bootmsg->page_address = new_packet[2];
 6ba:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <bootmsg>
 6be:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <bootmsg+0x1>

000006c2 <.Loc.381>:
 6c2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>

000006c6 <.Loc.382>:
 6c6:	80 83       	st	Z, r24

000006c8 <.Loc.383>:
                bootmsg->unused = 0;
 6c8:	10 86       	std	Z+8, r1	; 0x08

000006ca <.Loc.385>:
                cli();
 6ca:	f8 94       	cli

000006cc <.LVL57>:
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
 6cc:	cb e9       	ldi	r28, 0x9B	; 155
 6ce:	d1 e0       	ldi	r29, 0x01	; 1

000006d0 <.Loc.388>:
 6d0:	a1 2c       	mov	r10, r1
 6d2:	22 c0       	rjmp	.+68     	; 0x718 <.L18>

000006d4 <.L19>:
                    bootmsg->page_offset = i/2;
 6d4:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <bootmsg>
 6d8:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <bootmsg+0x1>

000006dc <.Loc.391>:
 6dc:	8a 2d       	mov	r24, r10
 6de:	86 95       	lsr	r24
 6e0:	11 96       	adiw	r26, 0x01	; 1
 6e2:	8c 93       	st	X, r24
 6e4:	11 97       	sbiw	r26, 0x01	; 1

000006e6 <.Loc.392>:
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
 6e6:	12 96       	adiw	r26, 0x02	; 2
 6e8:	86 e0       	ldi	r24, 0x06	; 6
 6ea:	fe 01       	movw	r30, r28

000006ec <.L^B1>:
 6ec:	01 90       	ld	r0, Z+
 6ee:	0d 92       	st	X+, r0
 6f0:	8a 95       	dec	r24
 6f2:	e1 f7       	brne	.-8      	; 0x6ec <.L^B1>

000006f4 <.Loc.393>:
                    msg.crc = message_crc(&msg);
 6f4:	8b e8       	ldi	r24, 0x8B	; 139
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	0e 94 c7 00 	call	0x18e	; 0x18e <message_crc>

000006fc <.LVL59>:
 6fc:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
 700:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>

00000704 <.Loc.396>:
                    message_send(&msg);
 704:	8b e8       	ldi	r24, 0x8B	; 139
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	0e 94 7f 01 	call	0x2fe	; 0x2fe <message_send>

0000070c <.LVL60>:
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
 70c:	f6 e0       	ldi	r31, 0x06	; 6
 70e:	af 0e       	add	r10, r31

00000710 <.Loc.399>:
 710:	26 96       	adiw	r28, 0x06	; 6

00000712 <.Loc.400>:
 712:	24 e8       	ldi	r18, 0x84	; 132
 714:	a2 16       	cp	r10, r18
 716:	21 f0       	breq	.+8      	; 0x720 <.L20>

00000718 <.L18>:
 718:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

0000071c <.Loc.402>:
 71c:	88 23       	and	r24, r24
 71e:	d1 f2       	breq	.-76     	; 0x6d4 <.L19>

00000720 <.L20>:
                sei();
 720:	78 94       	sei

00000722 <.Loc.404>:
                led_port |= led_mask;
 722:	2d 9a       	sbi	0x05, 5	; 5

00000724 <.LBB136>:
	__builtin_avr_delay_cycles(__ticks_dc);
 724:	8f e1       	ldi	r24, 0x1F	; 31
 726:	9e e4       	ldi	r25, 0x4E	; 78

00000728 <.L1^B15>:
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <.L1^B15>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <L0^A>

0000072e <L0^A>:
	...

00000730 <.LBE139>:
                led_port &= ~led_mask;
 730:	2d 98       	cbi	0x05, 5	; 5

00000732 <.LBB140>:
 732:	ef e1       	ldi	r30, 0x1F	; 31
 734:	fe e4       	ldi	r31, 0x4E	; 78

00000736 <.L1^B16>:
 736:	31 97       	sbiw	r30, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <.L1^B16>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <L0^A>

0000073c <L0^A>:
	...

0000073e <.Loc.429>:
}
 73e:	04 cf       	rjmp	.-504    	; 0x548 <.L3>

00000740 <.L6>:
                    rawmsg[i] = new_packet[i+2];
 740:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 744:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000748 <.Loc.434>:
 748:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>

0000074c <.Loc.435>:
 74c:	80 83       	st	Z, r24

0000074e <.LVL67>:
 74e:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 752:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000756 <.Loc.440>:
 756:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>

0000075a <.Loc.441>:
 75a:	81 83       	std	Z+1, r24	; 0x01

0000075c <.LVL68>:
 75c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
 760:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>

00000764 <.Loc.446>:
 764:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>

00000768 <.Loc.447>:
 768:	82 83       	std	Z+2, r24	; 0x02

0000076a <.LVL69>:
 76a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>

0000076e <.Loc.452>:
 76e:	83 83       	std	Z+3, r24	; 0x03

00000770 <.LVL70>:
 770:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>

00000774 <.Loc.457>:
 774:	84 83       	std	Z+4, r24	; 0x04

00000776 <.LVL71>:
 776:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>

0000077a <.Loc.462>:
 77a:	85 83       	std	Z+5, r24	; 0x05

0000077c <.LVL72>:
 77c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>

00000780 <.Loc.467>:
 780:	86 83       	std	Z+6, r24	; 0x06

00000782 <.LVL73>:
 782:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>

00000786 <.Loc.472>:
 786:	87 83       	std	Z+7, r24	; 0x07

00000788 <.LVL74>:
 788:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>

0000078c <.Loc.477>:
 78c:	80 87       	std	Z+8, r24	; 0x08

0000078e <.LVL75>:
 78e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>

00000792 <.Loc.482>:
 792:	81 87       	std	Z+9, r24	; 0x09

00000794 <.LVL76>:
                msg.crc = message_crc(&msg);
 794:	8b e8       	ldi	r24, 0x8B	; 139
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	0e 94 c7 00 	call	0x18e	; 0x18e <message_crc>

0000079c <.LVL77>:
 79c:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
 7a0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>

000007a4 <.Loc.488>:
                while(!has_new_packet) {
 7a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

000007a8 <.Loc.491>:
 7a8:	81 11       	cpse	r24, r1
 7aa:	ce ce       	rjmp	.-612    	; 0x548 <.L3>

000007ac <.L14>:
                    message_send(&msg);
 7ac:	8b e8       	ldi	r24, 0x8B	; 139
 7ae:	91 e0       	ldi	r25, 0x01	; 1
 7b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <message_send>

000007b4 <.LVL78>:
                    led_port |= led_mask;
 7b4:	2d 9a       	sbi	0x05, 5	; 5

000007b6 <.LBB144>:
	__builtin_avr_delay_cycles(__ticks_dc);
 7b6:	8f e6       	ldi	r24, 0x6F	; 111
 7b8:	97 e1       	ldi	r25, 0x17	; 23

000007ba <.L1^B17>:
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <.L1^B17>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <L0^A>

000007c0 <L0^A>:
	...

000007c2 <.LBE147>:
                    led_port &= ~led_mask;
 7c2:	2d 98       	cbi	0x05, 5	; 5

000007c4 <.LBB148>:
 7c4:	ef e6       	ldi	r30, 0x6F	; 111
 7c6:	f7 e1       	ldi	r31, 0x17	; 23

000007c8 <.L1^B18>:
 7c8:	31 97       	sbiw	r30, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <.L1^B18>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <L0^A>

000007ce <L0^A>:
	...

000007d0 <.LBE151>:
                while(!has_new_packet) {
 7d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>

000007d4 <.Loc.521>:
 7d4:	88 23       	and	r24, r24
 7d6:	51 f3       	breq	.-44     	; 0x7ac <.L14>
 7d8:	b7 ce       	rjmp	.-658    	; 0x548 <.L3>

000007da <.L10>:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
 7da:	f7 01       	movw	r30, r14
 7dc:	2c 2d       	mov	r18, r12

000007de <.L^B2>:
 7de:	11 92       	st	Z+, r1
 7e0:	2a 95       	dec	r18
 7e2:	e9 f7       	brne	.-6      	; 0x7de <.L^B2>

000007e4 <.Loc.523>:
                msg.type = GPS;
 7e4:	d0 92 94 01 	sts	0x0194, r13	; 0x800194 <msg+0x9>

000007e8 <.Loc.525>:
                cli();
 7e8:	f8 94       	cli

000007ea <.LVL84>:
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
 7ea:	ca e9       	ldi	r28, 0x9A	; 154
 7ec:	d1 e0       	ldi	r29, 0x01	; 1

000007ee <.L23>:
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
 7ee:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <gpsmsg>
 7f2:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <gpsmsg+0x1>
 7f6:	88 e0       	ldi	r24, 0x08	; 8
 7f8:	fe 01       	movw	r30, r28

000007fa <.L^B3>:
 7fa:	01 90       	ld	r0, Z+
 7fc:	0d 92       	st	X+, r0
 7fe:	8a 95       	dec	r24
 800:	e1 f7       	brne	.-8      	; 0x7fa <.L^B3>

00000802 <.Loc.529>:
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
 802:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <gpsmsg>
 806:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <gpsmsg+0x1>

0000080a <.Loc.531>:
 80a:	80 81       	ld	r24, Z
 80c:	91 81       	ldd	r25, Z+1	; 0x01
 80e:	89 2b       	or	r24, r25
 810:	79 f4       	brne	.+30     	; 0x830 <.L21>

00000812 <.Loc.532>:
 812:	82 81       	ldd	r24, Z+2	; 0x02
 814:	93 81       	ldd	r25, Z+3	; 0x03
 816:	89 2b       	or	r24, r25
 818:	59 f4       	brne	.+22     	; 0x830 <.L21>

0000081a <.Loc.533>:
 81a:	84 81       	ldd	r24, Z+4	; 0x04
 81c:	95 81       	ldd	r25, Z+5	; 0x05
 81e:	89 2b       	or	r24, r25
 820:	39 f4       	brne	.+14     	; 0x830 <.L21>

00000822 <.Loc.534>:
 822:	86 81       	ldd	r24, Z+6	; 0x06
 824:	81 11       	cpse	r24, r1
 826:	04 c0       	rjmp	.+8      	; 0x830 <.L21>

00000828 <.Loc.535>:
 828:	87 81       	ldd	r24, Z+7	; 0x07
 82a:	90 85       	ldd	r25, Z+8	; 0x08
 82c:	89 2b       	or	r24, r25
 82e:	a1 f0       	breq	.+40     	; 0x858 <.L22>

00000830 <.L21>:
                    msg.crc = message_crc(&msg);
 830:	8b e8       	ldi	r24, 0x8B	; 139
 832:	91 e0       	ldi	r25, 0x01	; 1
 834:	0e 94 c7 00 	call	0x18e	; 0x18e <message_crc>

00000838 <.LVL86>:
 838:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
 83c:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>

00000840 <.Loc.539>:
                    message_send(&msg);
 840:	8b e8       	ldi	r24, 0x8B	; 139
 842:	91 e0       	ldi	r25, 0x01	; 1
 844:	0e 94 7f 01 	call	0x2fe	; 0x2fe <message_send>

00000848 <.LBB152>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 848:	85 e8       	ldi	r24, 0x85	; 133

0000084a <.L1^B19>:
 84a:	8a 95       	dec	r24
 84c:	f1 f7       	brne	.-4      	; 0x84a <.L1^B19>
	...

00000850 <.LBE155>:
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
 850:	28 96       	adiw	r28, 0x08	; 8

00000852 <.LVL89>:
 852:	0c 17       	cp	r16, r28
 854:	1d 07       	cpc	r17, r29
 856:	59 f6       	brne	.-106    	; 0x7ee <.L23>

00000858 <.L22>:
                sei();
 858:	78 94       	sei

0000085a <.Loc.555>:
                led_port |= led_mask;
 85a:	2d 9a       	sbi	0x05, 5	; 5

0000085c <.LBB156>:
	__builtin_avr_delay_cycles(__ticks_dc);
 85c:	ef e1       	ldi	r30, 0x1F	; 31
 85e:	fe e4       	ldi	r31, 0x4E	; 78

00000860 <.L1^B20>:
 860:	31 97       	sbiw	r30, 0x01	; 1
 862:	f1 f7       	brne	.-4      	; 0x860 <.L1^B20>
 864:	00 c0       	rjmp	.+0      	; 0x866 <L0^A>

00000866 <L0^A>:
	...

00000868 <.LBE159>:
                led_port &= ~led_mask;
 868:	2d 98       	cbi	0x05, 5	; 5

0000086a <.LBB160>:
 86a:	8f e1       	ldi	r24, 0x1F	; 31
 86c:	9e e4       	ldi	r25, 0x4E	; 78

0000086e <.L1^B21>:
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	f1 f7       	brne	.-4      	; 0x86e <.L1^B21>
 872:	00 c0       	rjmp	.+0      	; 0x874 <L0^A>

00000874 <L0^A>:
	...

00000876 <.Loc.580>:
}
 876:	68 ce       	rjmp	.-816    	; 0x548 <.L3>

00000878 <.L17>:
                    led_port &= ~led_mask;
 878:	2d 98       	cbi	0x05, 5	; 5
 87a:	66 ce       	rjmp	.-820    	; 0x548 <.L3>

0000087c <memcpy>:
 87c:	fb 01       	movw	r30, r22
 87e:	dc 01       	movw	r26, r24
 880:	02 c0       	rjmp	.+4      	; 0x886 <.L_memcpy_start>

00000882 <.L_memcpy_loop>:
 882:	01 90       	ld	r0, Z+
 884:	0d 92       	st	X+, r0

00000886 <.L_memcpy_start>:
 886:	41 50       	subi	r20, 0x01	; 1
 888:	50 40       	sbci	r21, 0x00	; 0
 88a:	d8 f7       	brcc	.-10     	; 0x882 <.L_memcpy_loop>
 88c:	08 95       	ret

0000088e <_exit>:
 88e:	f8 94       	cli

00000890 <__stop_program>:
 890:	ff cf       	rjmp	.-2      	; 0x890 <__stop_program>
