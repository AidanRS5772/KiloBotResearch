
build/blank.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 97 08 	jmp	0x112e	; 0x112e <__vector_11>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_23>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      74:	14 be       	out	0x34, r1	; 52

00000076 <.LBB100>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	f8 94       	cli
      7a:	a8 95       	wdr
      7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      80:	88 61       	ori	r24, 0x18	; 24
      82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      86:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      8a:	0f be       	out	0x3f, r0	; 63

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1

0000008e <.Loc.1>:
      8e:	a0 e0       	ldi	r26, 0x00	; 0

00000090 <.Loc.2>:
      90:	b1 e0       	ldi	r27, 0x01	; 1

00000092 <.Loc.3>:
      92:	ec e8       	ldi	r30, 0x8C	; 140

00000094 <.Loc.4>:
      94:	fe e1       	ldi	r31, 0x1E	; 30

00000096 <.Loc.5>:
      96:	02 c0       	rjmp	.+4      	; 0x9c <.L__do_copy_data_start>

00000098 <.L__do_copy_data_loop>:
      98:	05 90       	lpm	r0, Z+

0000009a <.Loc.7>:
      9a:	0d 92       	st	X+, r0

0000009c <.L__do_copy_data_start>:
      9c:	ae 30       	cpi	r26, 0x0E	; 14

0000009e <.Loc.9>:
      9e:	b1 07       	cpc	r27, r17

000000a0 <.Loc.10>:
      a0:	d9 f7       	brne	.-10     	; 0x98 <.L__do_copy_data_loop>

000000a2 <__do_clear_bss>:
      a2:	21 e0       	ldi	r18, 0x01	; 1

000000a4 <.Loc.1>:
      a4:	ae e0       	ldi	r26, 0x0E	; 14

000000a6 <.Loc.2>:
      a6:	b1 e0       	ldi	r27, 0x01	; 1

000000a8 <.Loc.3>:
      a8:	01 c0       	rjmp	.+2      	; 0xac <.Loc.5>

000000aa <.Loc.4>:
      aa:	1d 92       	st	X+, r1

000000ac <.Loc.5>:
      ac:	a0 37       	cpi	r26, 0x70	; 112

000000ae <.Loc.6>:
      ae:	b2 07       	cpc	r27, r18

000000b0 <.Loc.7>:
      b0:	e1 f7       	brne	.-8      	; 0xaa <.Loc.4>

000000b2 <L0^A>:
      b2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <main>
      b6:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:
#include "kilolib.h"
#define DEBUG

void setup() { }
      be:	08 95       	ret

000000c0 <loop>:
int i = 1;
void loop() {
    i++;
      c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <i>
      c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <i+0x1>
      c8:	01 96       	adiw	r24, 0x01	; 1
      ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <i+0x1>
      ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <i>

000000d2 <.Loc.5>:
    spinup_motors();
      d2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <spinup_motors>

000000d6 <.LVL0>:
    set_motors(kilo_straight_left, kilo_straight_right);
      d6:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_straight_right>
      da:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <kilo_straight_left>
      de:	0e 94 db 02 	call	0x5b6	; 0x5b6 <set_motors>

000000e2 <.LVL1>:
    if(i%2 == 0){
      e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <i>

000000e6 <.Loc.9>:
      e6:	80 fd       	sbrc	r24, 0
      e8:	07 c0       	rjmp	.+14     	; 0xf8 <.L4>

000000ea <.Loc.10>:
        set_color(RGB(0,1,0));
      ea:	84 e0       	ldi	r24, 0x04	; 4
      ec:	0e 94 73 08 	call	0x10e6	; 0x10e6 <set_color>

000000f0 <.LVL2>:
    }
    else{
        set_color(RGB(0,0,1));
    }

    delay(60000);
      f0:	80 e6       	ldi	r24, 0x60	; 96
      f2:	9a ee       	ldi	r25, 0xEA	; 234
      f4:	0c 94 ce 02 	jmp	0x59c	; 0x59c <delay>

000000f8 <.L4>:
        set_color(RGB(0,0,1));
      f8:	80 e1       	ldi	r24, 0x10	; 16
      fa:	0e 94 73 08 	call	0x10e6	; 0x10e6 <set_color>

000000fe <.LVL4>:
    delay(60000);
      fe:	80 e6       	ldi	r24, 0x60	; 96
     100:	9a ee       	ldi	r25, 0xEA	; 234
     102:	0c 94 ce 02 	jmp	0x59c	; 0x59c <delay>

00000106 <message_rx_dummy>:
void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     106:	08 95       	ret

00000108 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	08 95       	ret

0000010e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     10e:	08 95       	ret

00000110 <set_color.constprop.1>:

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     110:	55 98       	cbi	0x0a, 5	; 10

00000112 <.Loc.11>:

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     112:	54 98       	cbi	0x0a, 4	; 10

00000114 <.Loc.14>:

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     114:	3b 9a       	sbi	0x07, 3	; 7

00000116 <.Loc.17>:
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     116:	3a 9a       	sbi	0x07, 2	; 7

00000118 <.Loc.20>:
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     118:	3d 98       	cbi	0x07, 5	; 7

0000011a <.Loc.23>:

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     11a:	3c 98       	cbi	0x07, 4	; 7

0000011c <.Loc.26>:
}
     11c:	08 95       	ret

0000011e <set_color.constprop.4>:
        DDRD |= (1<<5);
     11e:	55 9a       	sbi	0x0a, 5	; 10

00000120 <.Loc.31>:
        DDRD |= (1<<4);
     120:	54 9a       	sbi	0x0a, 4	; 10

00000122 <.Loc.34>:
        DDRC &= ~(1<<3);
     122:	3b 98       	cbi	0x07, 3	; 7

00000124 <.Loc.37>:
        DDRC &= ~(1<<2);
     124:	3a 98       	cbi	0x07, 2	; 7

00000126 <.Loc.40>:
        DDRC &= ~(1<<5);
     126:	3d 98       	cbi	0x07, 5	; 7

00000128 <.Loc.43>:
        DDRC &= ~(1<<4);
     128:	3c 98       	cbi	0x07, 4	; 7

0000012a <.Loc.46>:
}
     12a:	08 95       	ret

0000012c <set_color.constprop.6>:
        DDRD &= ~(1<<5);
     12c:	55 98       	cbi	0x0a, 5	; 10

0000012e <.Loc.51>:
        DDRD &= ~(1<<4);
     12e:	54 98       	cbi	0x0a, 4	; 10

00000130 <.Loc.54>:
        DDRC &= ~(1<<3);
     130:	3b 98       	cbi	0x07, 3	; 7

00000132 <.Loc.57>:
        DDRC &= ~(1<<2);
     132:	3a 98       	cbi	0x07, 2	; 7

00000134 <.Loc.60>:
        DDRC &= ~(1<<5);
     134:	3d 98       	cbi	0x07, 5	; 7

00000136 <.Loc.63>:
        DDRC &= ~(1<<4);
     136:	3c 98       	cbi	0x07, 4	; 7

00000138 <.Loc.66>:
}
     138:	08 95       	ret

0000013a <kilo_init>:
void kilo_init() {
     13a:	bf 92       	push	r11

0000013c <.LCFI0>:
     13c:	cf 92       	push	r12

0000013e <.LCFI1>:
     13e:	df 92       	push	r13

00000140 <.LCFI2>:
     140:	ef 92       	push	r14

00000142 <.LCFI3>:
     142:	ff 92       	push	r15

00000144 <.LCFI4>:
     144:	0f 93       	push	r16

00000146 <.LCFI5>:
     146:	1f 93       	push	r17

00000148 <.LCFI6>:
     148:	cf 93       	push	r28

0000014a <.LCFI7>:
     14a:	df 93       	push	r29

0000014c <.LCFI8>:
    cli();
     14c:	f8 94       	cli

0000014e <.Loc.69>:
    ports_off();
     14e:	14 b8       	out	0x04, r1	; 4

00000150 <.Loc.70>:
     150:	17 b8       	out	0x07, r1	; 7

00000152 <.Loc.71>:
     152:	1a b8       	out	0x0a, r1	; 10

00000154 <.Loc.72>:
     154:	15 b8       	out	0x05, r1	; 5

00000156 <.Loc.73>:
     156:	18 b8       	out	0x08, r1	; 8

00000158 <.Loc.74>:
     158:	1b b8       	out	0x0b, r1	; 11

0000015a <.Loc.75>:
    ports_on();
     15a:	52 9a       	sbi	0x0a, 2	; 10

0000015c <.Loc.77>:
     15c:	5a 9a       	sbi	0x0b, 2	; 11

0000015e <.Loc.78>:
    tx_timer_setup();
     15e:	14 bc       	out	0x24, r1	; 36

00000160 <.Loc.80>:
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	85 bd       	out	0x25, r24	; 37

00000164 <.Loc.81>:
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	87 bd       	out	0x27, r24	; 39

00000168 <.Loc.82>:
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>

0000016e <.Loc.83>:
    rx_timer_setup();
     16e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

00000172 <.Loc.85>:
     172:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00000176 <.Loc.86>:
     176:	2f e8       	ldi	r18, 0x8F	; 143
     178:	3b e0       	ldi	r19, 0x0B	; 11
     17a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     17e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

00000182 <.Loc.87>:
     182:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

00000186 <.Loc.88>:
    motors_setup();
     186:	53 98       	cbi	0x0a, 3	; 10

00000188 <.Loc.90>:
     188:	23 98       	cbi	0x04, 3	; 4

0000018a <.Loc.91>:
     18a:	91 ea       	ldi	r25, 0xA1	; 161
     18c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>

00000190 <.Loc.92>:
     190:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

00000194 <.Loc.93>:
     194:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

00000198 <.Loc.94>:
     198:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

0000019c <.Loc.95>:
    acomp_setup();
     19c:	8b e0       	ldi	r24, 0x0B	; 11
     19e:	80 bf       	out	0x30, r24	; 48

000001a0 <.Loc.97>:
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>

000001a6 <.Loc.98>:
    adc_setup();
     1a6:	86 e0       	ldi	r24, 0x06	; 6
     1a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000001ac <.Loc.100>:
     1ac:	83 e8       	ldi	r24, 0x83	; 131
     1ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000001b2 <.Loc.101>:
     1b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     1b6:	80 64       	ori	r24, 0x40	; 64
     1b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000001bc <.L9>:
     1bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     1c0:	86 fd       	sbrc	r24, 6
     1c2:	fc cf       	rjmp	.-8      	; 0x1bc <.L9>

000001c4 <.Loc.106>:
    adc_trigger_high_gain();
     1c4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000001c8 <.Loc.108>:
     1c8:	83 ea       	ldi	r24, 0xA3	; 163
     1ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000001ce <.Loc.109>:
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

000001d4 <.Loc.110>:
    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

000001dc <.LVL4>:
    if (osccal != 0xFF)
     1dc:	8f 3f       	cpi	r24, 0xFF	; 255
     1de:	11 f0       	breq	.+4      	; 0x1e4 <.L10>

000001e0 <.Loc.115>:
        OSCCAL = osccal;
     1e0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>

000001e4 <.L10>:
    rx_busy = 0;
     1e4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

000001e8 <.Loc.119>:
    rx_leadingbit = 1;
     1e8:	c1 e0       	ldi	r28, 0x01	; 1
     1ea:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <rx_leadingbit>

000001ee <.Loc.121>:
    rx_leadingbyte = 1;
     1ee:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <rx_leadingbyte>

000001f2 <.Loc.123>:
    rx_byteindex = 0;
     1f2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>

000001f6 <.Loc.125>:
    rx_bytevalue = 0;
     1f6:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>

000001fa <.Loc.127>:
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1fa:	80 e9       	ldi	r24, 0x90	; 144
     1fc:	90 e0       	ldi	r25, 0x00	; 0

000001fe <.LVL5>:
     1fe:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

00000202 <.LVL6>:
     202:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <tx_mask>

00000206 <.Loc.131>:
    if (tx_mask & ~TX_MASK_MAX)
     206:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <tx_mask>
     20a:	88 73       	andi	r24, 0x38	; 56

0000020c <.Loc.133>:
     20c:	11 f0       	breq	.+4      	; 0x212 <.L11>

0000020e <.Loc.134>:
        tx_mask = TX_MASK_MIN;
     20e:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <tx_mask>

00000212 <.L11>:
    tx_clock = 0;
     212:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     216:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>

0000021a <.Loc.138>:
    tx_increment = 255;
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     222:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>

00000226 <.Loc.140>:
    kilo_ticks = 0;
     226:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <kilo_ticks>
     22a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <kilo_ticks+0x1>
     22e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <kilo_ticks+0x2>
     232:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <kilo_ticks+0x3>

00000236 <.Loc.142>:
    kilo_state = IDLE;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>

0000023c <.Loc.144>:
    kilo_tx_period = 3906;
     23c:	82 e4       	ldi	r24, 0x42	; 66
     23e:	9f e0       	ldi	r25, 0x0F	; 15
     240:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <kilo_tx_period+0x1>
     244:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <kilo_tx_period>

00000248 <.Loc.146>:
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     248:	80 eb       	ldi	r24, 0xB0	; 176
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

00000250 <.LVL7>:
     250:	c8 2f       	mov	r28, r24

00000252 <.Loc.148>:
     252:	81 eb       	ldi	r24, 0xB1	; 177
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

0000025a <.LVL8>:
     25a:	d8 2f       	mov	r29, r24

0000025c <.Loc.150>:
     25c:	d0 93 6c 01 	sts	0x016C, r29	; 0x80016c <kilo_uid+0x1>
     260:	c0 93 6b 01 	sts	0x016B, r28	; 0x80016b <kilo_uid>

00000264 <.Loc.151>:
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     264:	85 e0       	ldi	r24, 0x05	; 5
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

0000026c <.LVL9>:
     26c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>

00000270 <.Loc.154>:
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     270:	89 e0       	ldi	r24, 0x09	; 9
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

00000278 <.LVL10>:
     278:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>

0000027c <.Loc.157>:
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     27c:	8c e0       	ldi	r24, 0x0C	; 12
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

00000284 <.LVL11>:
     284:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_straight_left>

00000288 <.Loc.160>:
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     288:	84 e1       	ldi	r24, 0x14	; 20
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

00000290 <.LVL12>:
     290:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>

00000294 <.LVL13>:
    for (i=0; i<14; i++) {
     294:	0a e3       	ldi	r16, 0x3A	; 58
     296:	11 e0       	ldi	r17, 0x01	; 1
     298:	83 e1       	ldi	r24, 0x13	; 19
     29a:	e8 2e       	mov	r14, r24
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	f8 2e       	mov	r15, r24
     2a0:	96 e5       	ldi	r25, 0x56	; 86
     2a2:	c9 2e       	mov	r12, r25
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	d9 2e       	mov	r13, r25

000002a8 <.Loc.166>:
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2a8:	c0 e2       	ldi	r28, 0x20	; 32
     2aa:	d0 e0       	ldi	r29, 0x00	; 0

000002ac <.L12>:
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

000002b2 <.LVL15>:
     2b2:	b8 2e       	mov	r11, r24

000002b4 <.Loc.169>:
     2b4:	ce 01       	movw	r24, r28
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

000002bc <.LVL16>:
     2bc:	9b 2d       	mov	r25, r11

000002be <.Loc.171>:
     2be:	f8 01       	movw	r30, r16
     2c0:	81 93       	st	Z+, r24
     2c2:	91 93       	st	Z+, r25
     2c4:	8f 01       	movw	r16, r30

000002c6 <.Loc.172>:
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2c6:	ce 01       	movw	r24, r28
     2c8:	c0 96       	adiw	r24, 0x30	; 48
     2ca:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

000002ce <.LVL17>:
     2ce:	b8 2e       	mov	r11, r24

000002d0 <.Loc.174>:
     2d0:	ce 01       	movw	r24, r28
     2d2:	c1 96       	adiw	r24, 0x31	; 49
     2d4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_read_byte>

000002d8 <.LVL18>:
     2d8:	9b 2d       	mov	r25, r11

000002da <.Loc.176>:
     2da:	f7 01       	movw	r30, r14
     2dc:	81 93       	st	Z+, r24
     2de:	91 93       	st	Z+, r25
     2e0:	7f 01       	movw	r14, r30

000002e2 <.Loc.177>:
    for (i=0; i<14; i++) {
     2e2:	22 96       	adiw	r28, 0x02	; 2

000002e4 <.Loc.179>:
     2e4:	c0 16       	cp	r12, r16
     2e6:	d1 06       	cpc	r13, r17
     2e8:	09 f7       	brne	.-62     	; 0x2ac <.L12>

000002ea <.Loc.180>:
    sei();
     2ea:	78 94       	sei

000002ec <.Loc.181>:
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ff 90       	pop	r15
     2f6:	ef 90       	pop	r14
     2f8:	df 90       	pop	r13
     2fa:	cf 90       	pop	r12
     2fc:	bf 90       	pop	r11
     2fe:	08 95       	ret

00000300 <__vector_6>:
ISR(WDT_vect) {
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	1f 92       	push	r1
     308:	11 24       	eor	r1, r1
     30a:	8f 93       	push	r24

0000030c <.LBB103>:
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	a8 95       	wdr
     312:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     316:	88 61       	ori	r24, 0x18	; 24
     318:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     31c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     320:	0f be       	out	0x3f, r0	; 63

00000322 <.LBE104>:
}
     322:	8f 91       	pop	r24
     324:	1f 90       	pop	r1
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	18 95       	reti

0000032e <kilo_start>:
void kilo_start(void (*setup)(void), void (*loop)(void)) {
     32e:	3c 01       	movw	r6, r24
     330:	eb 01       	movw	r28, r22

00000332 <.LVL20>:
    uint8_t has_setup = 0;
     332:	10 e0       	ldi	r17, 0x00	; 0

00000334 <.LBB156>:
    OCR2B = cw;
     334:	99 24       	eor	r9, r9
     336:	9a 94       	dec	r9

00000338 <.LBE156>:
                kilo_state = RUNNING;
     338:	84 e0       	ldi	r24, 0x04	; 4
     33a:	c8 2e       	mov	r12, r24

0000033c <.LBB159>:
        adc_setup_conversion(6);
     33c:	96 e0       	ldi	r25, 0x06	; 6
     33e:	a9 2e       	mov	r10, r25
     340:	23 e8       	ldi	r18, 0x83	; 131
     342:	b2 2e       	mov	r11, r18

00000344 <.LBB164>:
		__asm__ __volatile__ (
     344:	38 e1       	ldi	r19, 0x18	; 24
     346:	d3 2e       	mov	r13, r19
     348:	49 e2       	ldi	r20, 0x29	; 41
     34a:	e4 2e       	mov	r14, r20

0000034c <.L25>:
        switch(kilo_state) {
     34c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <kilo_state>
     350:	e7 30       	cpi	r30, 0x07	; 7
     352:	e0 f7       	brcc	.-8      	; 0x34c <.L25>
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ec 5c       	subi	r30, 0xCC	; 204
     358:	f0 4f       	sbci	r31, 0xF0	; 240
     35a:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__tablejump2__>

0000035e <.L30>:
                if (!has_setup) {
     35e:	11 11       	cpse	r17, r1
     360:	02 c0       	rjmp	.+4      	; 0x366 <.L41>

00000362 <.Loc.212>:
                    setup();
     362:	f3 01       	movw	r30, r6
     364:	09 95       	icall

00000366 <.L41>:
                kilo_state = RUNNING;
     366:	c0 92 11 01 	sts	0x0111, r12	; 0x800111 <kilo_state>
     36a:	11 e0       	ldi	r17, 0x01	; 1

0000036c <.L29>:
                loop();
     36c:	fe 01       	movw	r30, r28
     36e:	09 95       	icall

00000370 <.LVL25>:
                break;
     370:	ed cf       	rjmp	.-38     	; 0x34c <.L25>

00000372 <.L31>:
    if (!rx_busy) {
     372:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>

00000376 <.Loc.223>:
     376:	81 11       	cpse	r24, r1
     378:	e9 c0       	rjmp	.+466    	; 0x54c <.L36>

0000037a <.Loc.224>:
        cli();                                    // disable interrupts
     37a:	f8 94       	cli

0000037c <.Loc.225>:
        adc_setup_conversion(6);
     37c:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00000380 <.Loc.226>:
     380:	b0 92 7a 00 	sts	0x007A, r11	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000384 <.Loc.227>:
        adc_start_conversion();
     384:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     388:	80 64       	ori	r24, 0x40	; 64
     38a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

0000038e <.L37>:
        adc_finish_conversion();
     38e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     392:	86 fd       	sbrc	r24, 6
     394:	fc cf       	rjmp	.-8      	; 0x38e <.L37>

00000396 <.Loc.233>:
        voltage = ADCW;                           // store AD result
     396:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     39a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

0000039e <.LVL27>:
        sei();                                    // reenable interrupts
     39e:	78 94       	sei

000003a0 <.LBE161>:
                if(voltage > 682)
     3a0:	8b 3a       	cpi	r24, 0xAB	; 171
     3a2:	e2 e0       	ldi	r30, 0x02	; 2
     3a4:	9e 07       	cpc	r25, r30
     3a6:	0c f0       	brlt	.+2      	; 0x3aa <.Loc.242>

000003a8 <L0^A>:
     3a8:	ce c0       	rjmp	.+412    	; 0x546 <.L50>

000003aa <.Loc.242>:
                else if(voltage > 648)
     3aa:	89 38       	cpi	r24, 0x89	; 137
     3ac:	f2 e0       	ldi	r31, 0x02	; 2
     3ae:	9f 07       	cpc	r25, r31
     3b0:	0c f0       	brlt	.+2      	; 0x3b4 <.LVL29>

000003b2 <L0^A>:
     3b2:	cf c0       	rjmp	.+414    	; 0x552 <.L51>

000003b4 <.LVL29>:
                else if(voltage > 614)
     3b4:	87 36       	cpi	r24, 0x67	; 103
     3b6:	92 40       	sbci	r25, 0x02	; 2
     3b8:	0c f4       	brge	.+2      	; 0x3bc <.LBB168>

000003ba <L0^A>:
     3ba:	c8 c0       	rjmp	.+400    	; 0x54c <.L36>

000003bc <.LBB168>:
        DDRD |= (1<<5);
     3bc:	55 9a       	sbi	0x0a, 5	; 10

000003be <.Loc.251>:
        DDRD |= (1<<4);
     3be:	54 9a       	sbi	0x0a, 4	; 10

000003c0 <.Loc.254>:
        DDRC |= (1<<3);
     3c0:	3b 9a       	sbi	0x07, 3	; 7

000003c2 <.Loc.257>:
        DDRC |= (1<<2);
     3c2:	3a 9a       	sbi	0x07, 2	; 7

000003c4 <.Loc.260>:
        DDRC &= ~(1<<5);
     3c4:	3d 98       	cbi	0x07, 5	; 7

000003c6 <.Loc.263>:
        DDRC &= ~(1<<4);
     3c6:	3c 98       	cbi	0x07, 4	; 7

000003c8 <.Loc.266>:
}
     3c8:	c1 cf       	rjmp	.-126    	; 0x34c <.L25>

000003ca <.L32>:
                set_color(RGB(0,3,0));
     3ca:	0e 94 88 00 	call	0x110	; 0x110 <set_color.constprop.1>

000003ce <.LBB170>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ce:	ef ec       	ldi	r30, 0xCF	; 207
     3d0:	f7 e0       	ldi	r31, 0x07	; 7

000003d2 <.L1^B1>:
     3d2:	31 97       	sbiw	r30, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <.L1^B1>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <L0^A>

000003d8 <L0^A>:
	...

000003da <.LBE173>:
                set_color(RGB(0,0,0));
     3da:	0e 94 96 00 	call	0x12c	; 0x12c <set_color.constprop.6>

000003de <.LBB174>:
     3de:	ff ef       	ldi	r31, 0xFF	; 255
     3e0:	21 ee       	ldi	r18, 0xE1	; 225
     3e2:	84 e0       	ldi	r24, 0x04	; 4

000003e4 <.L1^B2>:
     3e4:	f1 50       	subi	r31, 0x01	; 1
     3e6:	20 40       	sbci	r18, 0x00	; 0
     3e8:	80 40       	sbci	r24, 0x00	; 0
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <.L1^B2>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <L0^A>

000003ee <L0^A>:
	...

000003f0 <.Loc.291>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
     3f0:	ad cf       	rjmp	.-166    	; 0x34c <.L25>

000003f2 <.L33>:
                cli();
     3f2:	f8 94       	cli

000003f4 <.Loc.294>:
                acomp_off();
     3f4:	80 b7       	in	r24, 0x30	; 48
     3f6:	87 7f       	andi	r24, 0xF7	; 247
     3f8:	80 bf       	out	0x30, r24	; 48

000003fa <.Loc.295>:
                adc_off();
     3fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3fe:	8f 77       	andi	r24, 0x7F	; 127
     400:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000404 <.Loc.296>:
                ports_off();
     404:	14 b8       	out	0x04, r1	; 4

00000406 <.Loc.297>:
     406:	17 b8       	out	0x07, r1	; 7

00000408 <.Loc.298>:
     408:	1a b8       	out	0x0a, r1	; 10

0000040a <.Loc.299>:
     40a:	15 b8       	out	0x05, r1	; 5

0000040c <.Loc.300>:
     40c:	18 b8       	out	0x08, r1	; 8

0000040e <.Loc.301>:
     40e:	1b b8       	out	0x0b, r1	; 11

00000410 <.LBB178>:
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	a8 95       	wdr
     416:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>

00000420 <.LBE178>:
                WDTCSR |= (1<<WDIE);
     420:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     424:	80 64       	ori	r24, 0x40	; 64
     426:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

0000042a <.Loc.310>:
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     42a:	83 b7       	in	r24, 0x33	; 51
     42c:	81 7f       	andi	r24, 0xF1	; 241
     42e:	84 60       	ori	r24, 0x04	; 4
     430:	83 bf       	out	0x33, r24	; 51

00000432 <.Loc.312>:
                cli();
     432:	f8 94       	cli

00000434 <.Loc.314>:
                sleep_enable();
     434:	83 b7       	in	r24, 0x33	; 51
     436:	81 60       	ori	r24, 0x01	; 1
     438:	83 bf       	out	0x33, r24	; 51

0000043a <.Loc.316>:
                sei();
     43a:	78 94       	sei

0000043c <.Loc.318>:
                sleep_cpu();
     43c:	88 95       	sleep

0000043e <.Loc.320>:
                sleep_disable();
     43e:	83 b7       	in	r24, 0x33	; 51
     440:	8e 7f       	andi	r24, 0xFE	; 254
     442:	83 bf       	out	0x33, r24	; 51

00000444 <.Loc.323>:
                sei();
     444:	78 94       	sei

00000446 <.Loc.325>:
                rx_busy = 0;
     446:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

0000044a <.Loc.327>:
                ports_on();
     44a:	52 9a       	sbi	0x0a, 2	; 10

0000044c <.Loc.328>:
     44c:	5a 9a       	sbi	0x0b, 2	; 11

0000044e <.Loc.329>:
                adc_on();
     44e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     452:	80 68       	ori	r24, 0x80	; 128
     454:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000458 <.LBB179>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	87 e5       	ldi	r24, 0x57	; 87
     45a:	92 e0       	ldi	r25, 0x02	; 2

0000045c <.L1^B3>:
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <.L1^B3>
     460:	00 c0       	rjmp	.+0      	; 0x462 <L0^A>

00000462 <L0^A>:
	...

00000464 <.LBE182>:
                acomp_on();
     464:	80 b7       	in	r24, 0x30	; 48
     466:	88 61       	ori	r24, 0x18	; 24
     468:	80 bf       	out	0x30, r24	; 48

0000046a <.LBB183>:
        DDRD |= (1<<5);
     46a:	55 9a       	sbi	0x0a, 5	; 10

0000046c <.Loc.348>:
        DDRD |= (1<<4);
     46c:	54 9a       	sbi	0x0a, 4	; 10

0000046e <.Loc.351>:
        DDRC |= (1<<3);
     46e:	3b 9a       	sbi	0x07, 3	; 7

00000470 <.Loc.354>:
        DDRC |= (1<<2);
     470:	3a 9a       	sbi	0x07, 2	; 7

00000472 <.Loc.357>:
        DDRC |= (1<<5);
     472:	3d 9a       	sbi	0x07, 5	; 7

00000474 <.Loc.360>:
        DDRC |= (1<<4);
     474:	3c 9a       	sbi	0x07, 4	; 7

00000476 <.LBB185>:
	__builtin_avr_delay_cycles(__ticks_dc);
     476:	ef e1       	ldi	r30, 0x1F	; 31
     478:	fe e4       	ldi	r31, 0x4E	; 78

0000047a <.L1^B4>:
     47a:	31 97       	sbiw	r30, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <.L1^B4>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <L0^A>

00000480 <L0^A>:
	...

00000482 <.LBE188>:
                if (rx_busy) {
     482:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>

00000486 <.Loc.377>:
     486:	81 11       	cpse	r24, r1
     488:	52 c0       	rjmp	.+164    	; 0x52e <.L52>

0000048a <.L40>:
                    set_color(RGB(0,0,0));
     48a:	0e 94 96 00 	call	0x12c	; 0x12c <set_color.constprop.6>

0000048e <.LVL43>:
     48e:	5e cf       	rjmp	.-324    	; 0x34c <.L25>

00000490 <.L26>:
                if (cur_motion == MOVE_STOP) {
     490:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>

00000494 <.Loc.381>:
     494:	81 11       	cpse	r24, r1
     496:	21 c0       	rjmp	.+66     	; 0x4da <.L42>

00000498 <.LBB189>:
    OCR2A = ccw;
     498:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

0000049c <.Loc.386>:
    OCR2B = cw;
     49c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

000004a0 <.LBE189>:
                    prev_motion = MOVE_STOP;
     4a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
     4a4:	53 cf       	rjmp	.-346    	; 0x34c <.L25>

000004a6 <.L28>:
                if (is_charging()) {
     4a6:	48 99       	sbic	0x09, 0	; 9
     4a8:	f0 cf       	rjmp	.-32     	; 0x48a <.L40>

000004aa <.LBB191>:
        DDRD |= (1<<5);
     4aa:	55 9a       	sbi	0x0a, 5	; 10

000004ac <.Loc.398>:
        DDRD &= ~(1<<4);
     4ac:	54 98       	cbi	0x0a, 4	; 10

000004ae <.Loc.401>:
        DDRC &= ~(1<<3);
     4ae:	3b 98       	cbi	0x07, 3	; 7

000004b0 <.Loc.404>:
        DDRC &= ~(1<<2);
     4b0:	3a 98       	cbi	0x07, 2	; 7

000004b2 <.Loc.407>:
        DDRC &= ~(1<<5);
     4b2:	3d 98       	cbi	0x07, 5	; 7

000004b4 <.Loc.410>:
        DDRC &= ~(1<<4);
     4b4:	3c 98       	cbi	0x07, 4	; 7

000004b6 <.LBB193>:
     4b6:	8f ec       	ldi	r24, 0xCF	; 207
     4b8:	97 e0       	ldi	r25, 0x07	; 7

000004ba <.L1^B5>:
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <.L1^B5>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <L0^A>

000004c0 <L0^A>:
	...

000004c2 <.LBE196>:
                    set_color(RGB(0,0,0));
     4c2:	0e 94 96 00 	call	0x12c	; 0x12c <set_color.constprop.6>

000004c6 <.LBB197>:
     4c6:	9f ef       	ldi	r25, 0xFF	; 255
     4c8:	e1 ee       	ldi	r30, 0xE1	; 225
     4ca:	f4 e0       	ldi	r31, 0x04	; 4

000004cc <.L1^B6>:
     4cc:	91 50       	subi	r25, 0x01	; 1
     4ce:	e0 40       	sbci	r30, 0x00	; 0
     4d0:	f0 40       	sbci	r31, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <.L1^B6>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <L0^A>

000004d6 <L0^A>:
	...

000004d8 <.Loc.436>:
}
     4d8:	39 cf       	rjmp	.-398    	; 0x34c <.L25>

000004da <.L42>:
                    if (cur_motion != prev_motion) {
     4da:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     4de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prev_motion>

000004e2 <.Loc.440>:
     4e2:	98 17       	cp	r25, r24
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <.Loc.441>

000004e6 <L0^A>:
     4e6:	32 cf       	rjmp	.-412    	; 0x34c <.L25>

000004e8 <.Loc.441>:
                        prev_motion = cur_motion;
     4e8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     4ec:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prev_motion>

000004f0 <.Loc.443>:
                        if (cur_motion == MOVE_LEFT) {
     4f0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>

000004f4 <.Loc.445>:
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	a1 f1       	breq	.+104    	; 0x560 <.L53>

000004f8 <.Loc.446>:
                        } else if (cur_motion == MOVE_RIGHT) {
     4f8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>

000004fc <.LBB201>:
    OCR2A = ccw;
     4fc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

00000500 <.Loc.449>:
    OCR2B = cw;
     500:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

00000504 <.LBE201>:
                        } else if (cur_motion == MOVE_RIGHT) {
     504:	82 30       	cpi	r24, 0x02	; 2
     506:	e9 f1       	breq	.+122    	; 0x582 <.L54>

00000508 <.LBB204>:
    OCR2A = ccw;
     508:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

0000050c <.Loc.460>:
    OCR2B = cw;
     50c:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

00000510 <.LBB207>:
	__builtin_avr_delay_cycles(__ticks_dc);
     510:	8f e2       	ldi	r24, 0x2F	; 47
     512:	95 e7       	ldi	r25, 0x75	; 117

00000514 <.L1^B7>:
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <.L1^B7>
     518:	00 c0       	rjmp	.+0      	; 0x51a <L0^A>

0000051a <L0^A>:
	...

0000051c <.LBE210>:
                            set_motors(kilo_straight_left, kilo_straight_right);
     51c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <kilo_straight_right>
     520:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_straight_left>

00000524 <.LBB211>:
    OCR2A = ccw;
     524:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

00000528 <.Loc.478>:
    OCR2B = cw;
     528:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

0000052c <.Loc.480>:
}
     52c:	0f cf       	rjmp	.-482    	; 0x34c <.L25>

0000052e <.L52>:
                    set_color(RGB(3,0,0));
     52e:	0e 94 8f 00 	call	0x11e	; 0x11e <set_color.constprop.4>

00000532 <.LBB213>:
     532:	ff ef       	ldi	r31, 0xFF	; 255
     534:	20 e7       	ldi	r18, 0x70	; 112
     536:	82 e0       	ldi	r24, 0x02	; 2

00000538 <.L1^B8>:
     538:	f1 50       	subi	r31, 0x01	; 1
     53a:	20 40       	sbci	r18, 0x00	; 0
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	e1 f7       	brne	.-8      	; 0x538 <.L1^B8>
     540:	00 c0       	rjmp	.+0      	; 0x542 <L0^A>

00000542 <L0^A>:
	...

00000544 <.LBB218>:
}
     544:	a2 cf       	rjmp	.-188    	; 0x48a <.L40>

00000546 <.L50>:
                    set_color(RGB(0,3,0));
     546:	0e 94 88 00 	call	0x110	; 0x110 <set_color.constprop.1>

0000054a <.LVL59>:
     54a:	00 cf       	rjmp	.-512    	; 0x34c <.L25>

0000054c <.L36>:
                    set_color(RGB(3,0,0));
     54c:	0e 94 8f 00 	call	0x11e	; 0x11e <set_color.constprop.4>

00000550 <.LVL60>:
     550:	fd ce       	rjmp	.-518    	; 0x34c <.L25>

00000552 <.L51>:
        DDRD &= ~(1<<5);
     552:	55 98       	cbi	0x0a, 5	; 10

00000554 <.Loc.506>:
        DDRD &= ~(1<<4);
     554:	54 98       	cbi	0x0a, 4	; 10

00000556 <.Loc.509>:
        DDRC &= ~(1<<3);
     556:	3b 98       	cbi	0x07, 3	; 7

00000558 <.Loc.512>:
        DDRC &= ~(1<<2);
     558:	3a 98       	cbi	0x07, 2	; 7

0000055a <.Loc.515>:
        DDRC |= (1<<5);
     55a:	3d 9a       	sbi	0x07, 5	; 7

0000055c <.Loc.518>:
        DDRC |= (1<<4);
     55c:	3c 9a       	sbi	0x07, 4	; 7

0000055e <.Loc.521>:
}
     55e:	f6 ce       	rjmp	.-532    	; 0x34c <.L25>

00000560 <.L53>:
    OCR2A = ccw;
     560:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

00000564 <.Loc.527>:
    OCR2B = cw;
     564:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

00000568 <.LBB223>:
	__builtin_avr_delay_cycles(__ticks_dc);
     568:	8f e2       	ldi	r24, 0x2F	; 47
     56a:	95 e7       	ldi	r25, 0x75	; 117

0000056c <.L1^B9>:
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <.L1^B9>
     570:	00 c0       	rjmp	.+0      	; 0x572 <L0^A>

00000572 <L0^A>:
	...

00000574 <.LBE226>:
                            set_motors(kilo_turn_left, 0);
     574:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_turn_left>

00000578 <.LBB227>:
    OCR2A = ccw;
     578:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

0000057c <.Loc.545>:
    OCR2B = cw;
     57c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

00000580 <.Loc.547>:
}
     580:	e5 ce       	rjmp	.-566    	; 0x34c <.L25>

00000582 <.L54>:
     582:	ef e2       	ldi	r30, 0x2F	; 47
     584:	f5 e7       	ldi	r31, 0x75	; 117

00000586 <.L1^B10>:
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <.L1^B10>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <L0^A>

0000058c <L0^A>:
	...

0000058e <.LBE233>:
                            set_motors(0, kilo_turn_right);
     58e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <kilo_turn_right>

00000592 <.LBB234>:
    OCR2A = ccw;
     592:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

00000596 <.Loc.568>:
    OCR2B = cw;
     596:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

0000059a <.Loc.570>:
}
     59a:	d8 ce       	rjmp	.-592    	; 0x34c <.L25>

0000059c <delay>:
void delay(uint16_t ms) {
     59c:	9c 01       	movw	r18, r24

0000059e <.Loc.573>:
    while (ms > 0) {
     59e:	89 2b       	or	r24, r25
     5a0:	49 f0       	breq	.+18     	; 0x5b4 <.L55>

000005a2 <.L57>:
     5a2:	8f ec       	ldi	r24, 0xCF	; 207
     5a4:	97 e0       	ldi	r25, 0x07	; 7

000005a6 <.L1^B11>:
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <.L1^B11>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <L0^A>

000005ac <L0^A>:
	...

000005ae <.LBE239>:
        ms--;
     5ae:	21 50       	subi	r18, 0x01	; 1
     5b0:	31 09       	sbc	r19, r1

000005b2 <.Loc.588>:
    while (ms > 0) {
     5b2:	b9 f7       	brne	.-18     	; 0x5a2 <.L57>

000005b4 <.L55>:
}
     5b4:	08 95       	ret

000005b6 <set_motors>:
    OCR2A = ccw;
     5b6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

000005ba <.Loc.593>:
    OCR2B = cw;
     5ba:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

000005be <.Loc.595>:
}
     5be:	08 95       	ret

000005c0 <spinup_motors>:
    OCR2A = ccw;
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

000005c6 <.Loc.601>:
    OCR2B = cw;
     5c6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

000005ca <.LBB242>:
     5ca:	8f ec       	ldi	r24, 0xCF	; 207
     5cc:	97 e0       	ldi	r25, 0x07	; 7

000005ce <.L1^B12>:
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <.L1^B12>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <L0^A>

000005d4 <L0^A>:
	...

000005d6 <.LBB304>:
     5d6:	8f ec       	ldi	r24, 0xCF	; 207
     5d8:	97 e0       	ldi	r25, 0x07	; 7

000005da <.L1^B13>:
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <.L1^B13>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <L0^A>

000005e0 <L0^A>:
	...

000005e2 <.LBB306>:
     5e2:	8f ec       	ldi	r24, 0xCF	; 207
     5e4:	97 e0       	ldi	r25, 0x07	; 7

000005e6 <.L1^B14>:
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <.L1^B14>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <L0^A>

000005ec <L0^A>:
	...

000005ee <.LBB308>:
     5ee:	8f ec       	ldi	r24, 0xCF	; 207
     5f0:	97 e0       	ldi	r25, 0x07	; 7

000005f2 <.L1^B15>:
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <.L1^B15>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <L0^A>

000005f8 <L0^A>:
	...

000005fa <.LBB310>:
     5fa:	8f ec       	ldi	r24, 0xCF	; 207
     5fc:	97 e0       	ldi	r25, 0x07	; 7

000005fe <.L1^B16>:
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <.L1^B16>
     602:	00 c0       	rjmp	.+0      	; 0x604 <L0^A>

00000604 <L0^A>:
	...

00000606 <.LBB312>:
     606:	8f ec       	ldi	r24, 0xCF	; 207
     608:	97 e0       	ldi	r25, 0x07	; 7

0000060a <.L1^B17>:
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <.L1^B17>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <L0^A>

00000610 <L0^A>:
	...

00000612 <.LBB314>:
     612:	8f ec       	ldi	r24, 0xCF	; 207
     614:	97 e0       	ldi	r25, 0x07	; 7

00000616 <.L1^B18>:
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <.L1^B18>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <L0^A>

0000061c <L0^A>:
	...

0000061e <.LBB316>:
     61e:	8f ec       	ldi	r24, 0xCF	; 207
     620:	97 e0       	ldi	r25, 0x07	; 7

00000622 <.L1^B19>:
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <.L1^B19>
     626:	00 c0       	rjmp	.+0      	; 0x628 <L0^A>

00000628 <L0^A>:
	...

0000062a <.LBB318>:
     62a:	8f ec       	ldi	r24, 0xCF	; 207
     62c:	97 e0       	ldi	r25, 0x07	; 7

0000062e <.L1^B20>:
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <.L1^B20>
     632:	00 c0       	rjmp	.+0      	; 0x634 <L0^A>

00000634 <L0^A>:
	...

00000636 <.LBB320>:
     636:	8f ec       	ldi	r24, 0xCF	; 207
     638:	97 e0       	ldi	r25, 0x07	; 7

0000063a <.L1^B21>:
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <.L1^B21>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <L0^A>

00000640 <L0^A>:
	...

00000642 <.LBB322>:
     642:	8f ec       	ldi	r24, 0xCF	; 207
     644:	97 e0       	ldi	r25, 0x07	; 7

00000646 <.L1^B22>:
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <.L1^B22>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <L0^A>

0000064c <L0^A>:
	...

0000064e <.LBB324>:
     64e:	8f ec       	ldi	r24, 0xCF	; 207
     650:	97 e0       	ldi	r25, 0x07	; 7

00000652 <.L1^B23>:
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <.L1^B23>
     656:	00 c0       	rjmp	.+0      	; 0x658 <L0^A>

00000658 <L0^A>:
	...

0000065a <.LBB326>:
     65a:	8f ec       	ldi	r24, 0xCF	; 207
     65c:	97 e0       	ldi	r25, 0x07	; 7

0000065e <.L1^B24>:
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <.L1^B24>
     662:	00 c0       	rjmp	.+0      	; 0x664 <L0^A>

00000664 <L0^A>:
	...

00000666 <.LBB328>:
     666:	8f ec       	ldi	r24, 0xCF	; 207
     668:	97 e0       	ldi	r25, 0x07	; 7

0000066a <.L1^B25>:
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <.L1^B25>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <L0^A>

00000670 <L0^A>:
	...

00000672 <.LBB330>:
     672:	8f ec       	ldi	r24, 0xCF	; 207
     674:	97 e0       	ldi	r25, 0x07	; 7

00000676 <.L1^B26>:
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <.L1^B26>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <L0^A>

0000067c <L0^A>:
	...

0000067e <.LBE331>:
}
     67e:	08 95       	ret

00000680 <get_ambientlight>:
    if (!rx_busy) {
     680:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>

00000684 <.Loc.805>:
     684:	81 11       	cpse	r24, r1
     686:	1e c0       	rjmp	.+60     	; 0x6c4 <.L67>

00000688 <.Loc.806>:
        cli();
     688:	f8 94       	cli

0000068a <.Loc.807>:
        adc_setup_conversion(7);
     68a:	87 e0       	ldi	r24, 0x07	; 7
     68c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00000690 <.Loc.808>:
     690:	83 e8       	ldi	r24, 0x83	; 131
     692:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000696 <.Loc.809>:
        adc_start_conversion();
     696:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     69a:	80 64       	ori	r24, 0x40	; 64
     69c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000006a0 <.L66>:
        adc_finish_conversion();
     6a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6a4:	86 fd       	sbrc	r24, 6
     6a6:	fc cf       	rjmp	.-8      	; 0x6a0 <.L66>

000006a8 <.Loc.814>:
        light = ADCW;                             // store AD result
     6a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     6ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

000006b0 <.LVL92>:
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6b0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000006b4 <.Loc.817>:
     6b4:	23 ea       	ldi	r18, 0xA3	; 163
     6b6:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000006ba <.Loc.818>:
     6ba:	21 e0       	ldi	r18, 0x01	; 1
     6bc:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

000006c0 <.Loc.819>:
        sei();                                    // reenable interrupts
     6c0:	78 94       	sei
     6c2:	08 95       	ret

000006c4 <.L67>:
    int16_t light = -1;
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	9f ef       	ldi	r25, 0xFF	; 255

000006c8 <.Loc.822>:
}
     6c8:	08 95       	ret

000006ca <get_temperature>:
    if (!rx_busy) {
     6ca:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>

000006ce <.Loc.828>:
     6ce:	81 11       	cpse	r24, r1
     6d0:	1e c0       	rjmp	.+60     	; 0x70e <.L72>

000006d2 <.Loc.829>:
        cli();
     6d2:	f8 94       	cli

000006d4 <.Loc.830>:
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     6d4:	88 ec       	ldi	r24, 0xC8	; 200
     6d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000006da <.Loc.832>:
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     6da:	87 e8       	ldi	r24, 0x87	; 135
     6dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000006e0 <.Loc.834>:
        adc_start_conversion();
     6e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6e4:	80 64       	ori	r24, 0x40	; 64
     6e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000006ea <.L71>:
        adc_finish_conversion();
     6ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6ee:	86 fd       	sbrc	r24, 6
     6f0:	fc cf       	rjmp	.-8      	; 0x6ea <.L71>

000006f2 <.Loc.838>:
        temp = ADCW;                             // store AD result
     6f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     6f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

000006fa <.LVL95>:
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6fa:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000006fe <.Loc.841>:
     6fe:	23 ea       	ldi	r18, 0xA3	; 163
     700:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000704 <.Loc.842>:
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

0000070a <.Loc.843>:
        sei();                                    // reenable interrupts
     70a:	78 94       	sei
     70c:	08 95       	ret

0000070e <.L72>:
    int16_t temp = -1;
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	9f ef       	ldi	r25, 0xFF	; 255

00000712 <.Loc.846>:
}
     712:	08 95       	ret

00000714 <rand_hard>:
uint8_t rand_hard() {
     714:	1f 93       	push	r17

00000716 <.LCFI9>:
     716:	cf 93       	push	r28

00000718 <.LCFI10>:
     718:	df 93       	push	r29

0000071a <.LCFI11>:
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	e0 e0       	ldi	r30, 0x00	; 0

0000071e <.Loc.854>:
    uint8_t num = 0;
     71e:	80 e0       	ldi	r24, 0x00	; 0

00000720 <.Loc.855>:
            adc_setup_conversion(6);
     720:	16 e0       	ldi	r17, 0x06	; 6
     722:	d3 e8       	ldi	r29, 0x83	; 131

00000724 <.Loc.856>:
            adc_trigger_high_gain();
     724:	c3 ea       	ldi	r28, 0xA3	; 163
     726:	71 e0       	ldi	r23, 0x01	; 1

00000728 <.Loc.857>:
            num |= (1<<i);
     728:	a1 e0       	ldi	r26, 0x01	; 1
     72a:	b0 e0       	ldi	r27, 0x00	; 0

0000072c <.L80>:
    uint8_t num = 0;
     72c:	60 e8       	ldi	r22, 0x80	; 128

0000072e <.L78>:
            cli();
     72e:	f8 94       	cli

00000730 <.Loc.861>:
            adc_setup_conversion(6);
     730:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00000734 <.Loc.862>:
     734:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000738 <.Loc.863>:
            adc_start_conversion();
     738:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     73c:	90 64       	ori	r25, 0x40	; 64
     73e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000742 <.L75>:
            adc_finish_conversion();
     742:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     746:	96 fd       	sbrc	r25, 6
     748:	fc cf       	rjmp	.-8      	; 0x742 <.L75>

0000074a <.Loc.868>:
            a = ADCW&0x1;
     74a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     74e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

00000752 <.Loc.870>:
     752:	21 70       	andi	r18, 0x01	; 1

00000754 <.LVL99>:
            adc_start_conversion();
     754:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     758:	90 64       	ori	r25, 0x40	; 64
     75a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

0000075e <.L76>:
            adc_finish_conversion();
     75e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     762:	96 fd       	sbrc	r25, 6
     764:	fc cf       	rjmp	.-8      	; 0x75e <.L76>

00000766 <.Loc.875>:
            b = ADCW&0x1;
     766:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     76a:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

0000076e <.LVL100>:
            adc_trigger_high_gain();
     76e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00000772 <.Loc.878>:
     772:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00000776 <.Loc.879>:
     776:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

0000077a <.Loc.880>:
            sei();
     77a:	78 94       	sei

0000077c <.Loc.882>:
            b = ADCW&0x1;
     77c:	41 70       	andi	r20, 0x01	; 1

0000077e <.LVL101>:
        } while (a == b && tries < 128);
     77e:	24 13       	cpse	r18, r20
     780:	02 c0       	rjmp	.+4      	; 0x786 <.L77>
     782:	61 50       	subi	r22, 0x01	; 1

00000784 <.Loc.886>:
     784:	a1 f6       	brne	.-88     	; 0x72e <.L78>

00000786 <.L77>:
        if (a)
     786:	22 23       	and	r18, r18
     788:	39 f0       	breq	.+14     	; 0x798 <.L79>

0000078a <.Loc.889>:
            num |= (1<<i);
     78a:	9d 01       	movw	r18, r26

0000078c <.LVL102>:
     78c:	0e 2e       	mov	r0, r30
     78e:	01 c0       	rjmp	.+2      	; 0x792 <.L2^B1>

00000790 <.L1^B27>:
     790:	22 0f       	add	r18, r18

00000792 <.L2^B1>:
     792:	0a 94       	dec	r0
     794:	ea f7       	brpl	.-6      	; 0x790 <.L1^B27>

00000796 <.Loc.892>:
     796:	82 2b       	or	r24, r18

00000798 <.L79>:
    for (i = 0; i < 8; i++) {
     798:	31 96       	adiw	r30, 0x01	; 1

0000079a <.LVL104>:
     79a:	e8 30       	cpi	r30, 0x08	; 8
     79c:	f1 05       	cpc	r31, r1
     79e:	31 f6       	brne	.-116    	; 0x72c <.L80>

000007a0 <.Loc.896>:
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	08 95       	ret

000007a8 <rand_soft>:
    seed ^= seed<<3;
     7a8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <seed>
     7ac:	82 2f       	mov	r24, r18
     7ae:	88 0f       	add	r24, r24
     7b0:	88 0f       	add	r24, r24
     7b2:	88 0f       	add	r24, r24

000007b4 <.Loc.900>:
     7b4:	28 27       	eor	r18, r24

000007b6 <.Loc.901>:
    seed ^= accumulator++>>2;
     7b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <accumulator>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	89 0f       	add	r24, r25
     7be:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <accumulator>

000007c2 <.Loc.904>:
    seed ^= seed>>5;
     7c2:	82 2f       	mov	r24, r18
     7c4:	82 95       	swap	r24
     7c6:	86 95       	lsr	r24
     7c8:	87 70       	andi	r24, 0x07	; 7
     7ca:	82 27       	eor	r24, r18

000007cc <.Loc.905>:
    seed ^= accumulator++>>2;
     7cc:	96 95       	lsr	r25
     7ce:	96 95       	lsr	r25

000007d0 <.Loc.906>:
     7d0:	89 27       	eor	r24, r25
     7d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>

000007d6 <.Loc.907>:
}
     7d6:	08 95       	ret

000007d8 <rand_seed>:
    seed = s;
     7d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>

000007dc <.Loc.912>:
}
     7dc:	08 95       	ret

000007de <get_voltage>:
    if (!rx_busy) {
     7de:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>

000007e2 <.Loc.917>:
     7e2:	81 11       	cpse	r24, r1
     7e4:	16 c0       	rjmp	.+44     	; 0x812 <.L93>

000007e6 <.Loc.918>:
        cli();                                    // disable interrupts
     7e6:	f8 94       	cli

000007e8 <.Loc.919>:
        adc_setup_conversion(6);
     7e8:	86 e0       	ldi	r24, 0x06	; 6
     7ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000007ee <.Loc.920>:
     7ee:	83 e8       	ldi	r24, 0x83	; 131
     7f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000007f4 <.Loc.921>:
        adc_start_conversion();
     7f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     7f8:	80 64       	ori	r24, 0x40	; 64
     7fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000007fe <.L92>:
        adc_finish_conversion();
     7fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     802:	86 fd       	sbrc	r24, 6
     804:	fc cf       	rjmp	.-8      	; 0x7fe <.L92>

00000806 <.Loc.927>:
        voltage = ADCW;                           // store AD result
     806:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     80a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

0000080e <.LVL107>:
        sei();                                    // reenable interrupts
     80e:	78 94       	sei

00000810 <.LVL108>:
    return voltage;
     810:	08 95       	ret

00000812 <.L93>:
    int16_t voltage=-1;
     812:	8f ef       	ldi	r24, 0xFF	; 255
     814:	9f ef       	ldi	r25, 0xFF	; 255

00000816 <.Loc.933>:
}
     816:	08 95       	ret

00000818 <estimate_distance>:
uint8_t estimate_distance(const distance_measurement_t *dist) {
     818:	2f 92       	push	r2

0000081a <.LCFI12>:
     81a:	3f 92       	push	r3

0000081c <.LCFI13>:
     81c:	4f 92       	push	r4

0000081e <.LCFI14>:
     81e:	5f 92       	push	r5

00000820 <.LCFI15>:
     820:	6f 92       	push	r6

00000822 <.LCFI16>:
     822:	7f 92       	push	r7

00000824 <.LCFI17>:
     824:	8f 92       	push	r8

00000826 <.LCFI18>:
     826:	9f 92       	push	r9

00000828 <.LCFI19>:
     828:	af 92       	push	r10

0000082a <.LCFI20>:
     82a:	bf 92       	push	r11

0000082c <.LCFI21>:
     82c:	cf 92       	push	r12

0000082e <.LCFI22>:
     82e:	df 92       	push	r13

00000830 <.LCFI23>:
     830:	ef 92       	push	r14

00000832 <.LCFI24>:
     832:	ff 92       	push	r15

00000834 <.LCFI25>:
     834:	0f 93       	push	r16

00000836 <.LCFI26>:
     836:	1f 93       	push	r17

00000838 <.LCFI27>:
     838:	cf 93       	push	r28

0000083a <.LCFI28>:
     83a:	df 93       	push	r29

0000083c <.LCFI29>:
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62

00000840 <.LCFI30>:
     840:	28 97       	sbiw	r28, 0x08	; 8

00000842 <.LCFI31>:
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	7c 01       	movw	r14, r24

0000084e <.LVL110>:
    if (dist->high_gain < 900) {
     84e:	dc 01       	movw	r26, r24
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	0d 90       	ld	r0, X+
     854:	bc 91       	ld	r27, X
     856:	a0 2d       	mov	r26, r0
     858:	b8 87       	std	Y+8, r27	; 0x08
     85a:	af 83       	std	Y+7, r26	; 0x07

0000085c <.Loc.944>:
     85c:	a4 38       	cpi	r26, 0x84	; 132
     85e:	e3 e0       	ldi	r30, 0x03	; 3
     860:	be 07       	cpc	r27, r30
     862:	0c f4       	brge	.+2      	; 0x866 <.Loc.945>

00000864 <L0^A>:
     864:	77 c0       	rjmp	.+238    	; 0x954 <.L96>

00000866 <.Loc.945>:
        if (dist->low_gain > kilo_irlow[0]) {
     866:	dc 01       	movw	r26, r24
     868:	ed 90       	ld	r14, X+
     86a:	fc 90       	ld	r15, X

0000086c <.Loc.948>:
     86c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <kilo_irlow>
     870:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <kilo_irlow+0x1>

00000874 <.LVL111>:
    uint8_t dist_high=255;
     874:	dd 24       	eor	r13, r13
     876:	da 94       	dec	r13

00000878 <.Loc.950>:
        if (dist->low_gain > kilo_irlow[0]) {
     878:	8e 15       	cp	r24, r14
     87a:	9f 05       	cpc	r25, r15
     87c:	08 f4       	brcc	.+2      	; 0x880 <.L98>

0000087e <L0^A>:
     87e:	3b c2       	rjmp	.+1142   	; 0xcf6 <.L110>

00000880 <.L98>:
                if(dist->low_gain > kilo_irlow[i]) {
     880:	00 91 3c 01 	lds	r16, 0x013C	; 0x80013c <kilo_irlow+0x2>
     884:	10 91 3d 01 	lds	r17, 0x013D	; 0x80013d <kilo_irlow+0x3>

00000888 <.Loc.954>:
     888:	0e 15       	cp	r16, r14
     88a:	1f 05       	cpc	r17, r15
     88c:	08 f4       	brcc	.+2      	; 0x890 <.LVL113>

0000088e <L0^A>:
     88e:	4a c3       	rjmp	.+1684   	; 0xf24 <.L126>

00000890 <.LVL113>:
     890:	00 91 3e 01 	lds	r16, 0x013E	; 0x80013e <kilo_irlow+0x4>
     894:	10 91 3f 01 	lds	r17, 0x013F	; 0x80013f <kilo_irlow+0x5>

00000898 <.Loc.959>:
     898:	0e 15       	cp	r16, r14
     89a:	1f 05       	cpc	r17, r15
     89c:	08 f4       	brcc	.+2      	; 0x8a0 <.LVL114>

0000089e <L0^A>:
     89e:	47 c3       	rjmp	.+1678   	; 0xf2e <.L127>

000008a0 <.LVL114>:
     8a0:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <kilo_irlow+0x6>
     8a4:	10 91 41 01 	lds	r17, 0x0141	; 0x800141 <kilo_irlow+0x7>

000008a8 <.Loc.964>:
     8a8:	0e 15       	cp	r16, r14
     8aa:	1f 05       	cpc	r17, r15
     8ac:	08 f4       	brcc	.+2      	; 0x8b0 <.LVL115>

000008ae <L0^A>:
     8ae:	44 c3       	rjmp	.+1672   	; 0xf38 <.L128>

000008b0 <.LVL115>:
     8b0:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <kilo_irlow+0x8>
     8b4:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <kilo_irlow+0x9>

000008b8 <.Loc.969>:
     8b8:	0e 15       	cp	r16, r14
     8ba:	1f 05       	cpc	r17, r15
     8bc:	08 f4       	brcc	.+2      	; 0x8c0 <.LVL116>

000008be <L0^A>:
     8be:	41 c3       	rjmp	.+1666   	; 0xf42 <.L129>

000008c0 <.LVL116>:
     8c0:	00 91 44 01 	lds	r16, 0x0144	; 0x800144 <kilo_irlow+0xa>
     8c4:	10 91 45 01 	lds	r17, 0x0145	; 0x800145 <kilo_irlow+0xb>

000008c8 <.Loc.974>:
     8c8:	0e 15       	cp	r16, r14
     8ca:	1f 05       	cpc	r17, r15
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <.LVL117>

000008ce <L0^A>:
     8ce:	3e c3       	rjmp	.+1660   	; 0xf4c <.L130>

000008d0 <.LVL117>:
     8d0:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <kilo_irlow+0xc>
     8d4:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <kilo_irlow+0xd>

000008d8 <.Loc.979>:
     8d8:	0e 15       	cp	r16, r14
     8da:	1f 05       	cpc	r17, r15
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <.LVL118>

000008de <L0^A>:
     8de:	3f c3       	rjmp	.+1662   	; 0xf5e <.L131>

000008e0 <.LVL118>:
     8e0:	00 91 48 01 	lds	r16, 0x0148	; 0x800148 <kilo_irlow+0xe>
     8e4:	10 91 49 01 	lds	r17, 0x0149	; 0x800149 <kilo_irlow+0xf>

000008e8 <.Loc.984>:
     8e8:	0e 15       	cp	r16, r14
     8ea:	1f 05       	cpc	r17, r15
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <.LVL119>

000008ee <L0^A>:
     8ee:	40 c3       	rjmp	.+1664   	; 0xf70 <.L132>

000008f0 <.LVL119>:
     8f0:	00 91 4a 01 	lds	r16, 0x014A	; 0x80014a <kilo_irlow+0x10>
     8f4:	10 91 4b 01 	lds	r17, 0x014B	; 0x80014b <kilo_irlow+0x11>

000008f8 <.Loc.989>:
     8f8:	0e 15       	cp	r16, r14
     8fa:	1f 05       	cpc	r17, r15
     8fc:	08 f4       	brcc	.+2      	; 0x900 <.LVL120>

000008fe <L0^A>:
     8fe:	41 c3       	rjmp	.+1666   	; 0xf82 <.L133>

00000900 <.LVL120>:
     900:	00 91 4c 01 	lds	r16, 0x014C	; 0x80014c <kilo_irlow+0x12>
     904:	10 91 4d 01 	lds	r17, 0x014D	; 0x80014d <kilo_irlow+0x13>

00000908 <.Loc.994>:
     908:	0e 15       	cp	r16, r14
     90a:	1f 05       	cpc	r17, r15
     90c:	08 f4       	brcc	.+2      	; 0x910 <.LVL121>

0000090e <L0^A>:
     90e:	46 c2       	rjmp	.+1164   	; 0xd9c <.L134>

00000910 <.LVL121>:
     910:	00 91 4e 01 	lds	r16, 0x014E	; 0x80014e <kilo_irlow+0x14>
     914:	10 91 4f 01 	lds	r17, 0x014F	; 0x80014f <kilo_irlow+0x15>

00000918 <.Loc.999>:
     918:	0e 15       	cp	r16, r14
     91a:	1f 05       	cpc	r17, r15
     91c:	08 f4       	brcc	.+2      	; 0x920 <.LVL122>

0000091e <L0^A>:
     91e:	3a c3       	rjmp	.+1652   	; 0xf94 <.L135>

00000920 <.LVL122>:
     920:	00 91 50 01 	lds	r16, 0x0150	; 0x800150 <kilo_irlow+0x16>
     924:	10 91 51 01 	lds	r17, 0x0151	; 0x800151 <kilo_irlow+0x17>

00000928 <.Loc.1004>:
     928:	0e 15       	cp	r16, r14
     92a:	1f 05       	cpc	r17, r15
     92c:	08 f4       	brcc	.+2      	; 0x930 <.LVL123>

0000092e <L0^A>:
     92e:	3b c3       	rjmp	.+1654   	; 0xfa6 <.L136>

00000930 <.LVL123>:
     930:	00 91 52 01 	lds	r16, 0x0152	; 0x800152 <kilo_irlow+0x18>
     934:	10 91 53 01 	lds	r17, 0x0153	; 0x800153 <kilo_irlow+0x19>

00000938 <.Loc.1009>:
     938:	0e 15       	cp	r16, r14
     93a:	1f 05       	cpc	r17, r15
     93c:	08 f4       	brcc	.+2      	; 0x940 <.LVL124>

0000093e <L0^A>:
     93e:	3c c3       	rjmp	.+1656   	; 0xfb8 <.L137>

00000940 <.LVL124>:
     940:	00 91 54 01 	lds	r16, 0x0154	; 0x800154 <kilo_irlow+0x1a>
     944:	10 91 55 01 	lds	r17, 0x0155	; 0x800155 <kilo_irlow+0x1b>

00000948 <.Loc.1014>:
     948:	0e 15       	cp	r16, r14
     94a:	1f 05       	cpc	r17, r15
     94c:	08 f4       	brcc	.+2      	; 0x950 <.Loc.1015>

0000094e <L0^A>:
     94e:	3d c3       	rjmp	.+1658   	; 0xfca <.L138>

00000950 <.Loc.1015>:
                dist_low=90;
     950:	1a e5       	ldi	r17, 0x5A	; 90
     952:	20 c1       	rjmp	.+576    	; 0xb94 <.L105>

00000954 <.L96>:
        if (dist->high_gain > kilo_irhigh[0]) {
     954:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_irhigh>
     958:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <kilo_irhigh+0x1>
     95c:	8a 17       	cp	r24, r26
     95e:	9b 07       	cpc	r25, r27
     960:	08 f4       	brcc	.+2      	; 0x964 <.LBB336>

00000962 <L0^A>:
     962:	b1 c1       	rjmp	.+866    	; 0xcc6 <.L139>

00000964 <.LBB336>:
                if (dist->high_gain > kilo_irhigh[i]) {
     964:	00 91 15 01 	lds	r16, 0x0115	; 0x800115 <kilo_irhigh+0x2>
     968:	10 91 16 01 	lds	r17, 0x0116	; 0x800116 <kilo_irhigh+0x3>

0000096c <.Loc.1020>:
     96c:	0a 17       	cp	r16, r26
     96e:	1b 07       	cpc	r17, r27
     970:	08 f4       	brcc	.+2      	; 0x974 <.LVL127>

00000972 <L0^A>:
     972:	f1 c2       	rjmp	.+1506   	; 0xf56 <.L112>

00000974 <.LVL127>:
     974:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <kilo_irhigh+0x4>
     978:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <kilo_irhigh+0x5>

0000097c <.Loc.1025>:
     97c:	0a 17       	cp	r16, r26
     97e:	1b 07       	cpc	r17, r27
     980:	08 f4       	brcc	.+2      	; 0x984 <.LVL128>

00000982 <L0^A>:
     982:	f2 c2       	rjmp	.+1508   	; 0xf68 <.L113>

00000984 <.LVL128>:
     984:	00 91 19 01 	lds	r16, 0x0119	; 0x800119 <kilo_irhigh+0x6>
     988:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <kilo_irhigh+0x7>

0000098c <.Loc.1030>:
     98c:	0a 17       	cp	r16, r26
     98e:	1b 07       	cpc	r17, r27
     990:	08 f4       	brcc	.+2      	; 0x994 <.LVL129>

00000992 <L0^A>:
     992:	f3 c2       	rjmp	.+1510   	; 0xf7a <.L114>

00000994 <.LVL129>:
     994:	00 91 1b 01 	lds	r16, 0x011B	; 0x80011b <kilo_irhigh+0x8>
     998:	10 91 1c 01 	lds	r17, 0x011C	; 0x80011c <kilo_irhigh+0x9>

0000099c <.Loc.1035>:
     99c:	0a 17       	cp	r16, r26
     99e:	1b 07       	cpc	r17, r27
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <.LVL130>

000009a2 <L0^A>:
     9a2:	f8 c1       	rjmp	.+1008   	; 0xd94 <.L115>

000009a4 <.LVL130>:
     9a4:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <kilo_irhigh+0xa>
     9a8:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <kilo_irhigh+0xb>

000009ac <.Loc.1040>:
     9ac:	0a 17       	cp	r16, r26
     9ae:	1b 07       	cpc	r17, r27
     9b0:	08 f4       	brcc	.+2      	; 0x9b4 <.LVL131>

000009b2 <L0^A>:
     9b2:	ec c2       	rjmp	.+1496   	; 0xf8c <.L116>

000009b4 <.LVL131>:
     9b4:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <kilo_irhigh+0xc>
     9b8:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <kilo_irhigh+0xd>

000009bc <.Loc.1045>:
     9bc:	0a 17       	cp	r16, r26
     9be:	1b 07       	cpc	r17, r27
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <.LVL132>

000009c2 <L0^A>:
     9c2:	ed c2       	rjmp	.+1498   	; 0xf9e <.L117>

000009c4 <.LVL132>:
     9c4:	00 91 21 01 	lds	r16, 0x0121	; 0x800121 <kilo_irhigh+0xe>
     9c8:	10 91 22 01 	lds	r17, 0x0122	; 0x800122 <kilo_irhigh+0xf>

000009cc <.Loc.1050>:
     9cc:	0a 17       	cp	r16, r26
     9ce:	1b 07       	cpc	r17, r27
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <.LVL133>

000009d2 <L0^A>:
     9d2:	ee c2       	rjmp	.+1500   	; 0xfb0 <.L118>

000009d4 <.LVL133>:
     9d4:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <kilo_irhigh+0x10>
     9d8:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <kilo_irhigh+0x11>

000009dc <.Loc.1055>:
     9dc:	0a 17       	cp	r16, r26
     9de:	1b 07       	cpc	r17, r27
     9e0:	08 f4       	brcc	.+2      	; 0x9e4 <.LVL134>

000009e2 <L0^A>:
     9e2:	ef c2       	rjmp	.+1502   	; 0xfc2 <.L119>

000009e4 <.LVL134>:
     9e4:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <kilo_irhigh+0x12>
     9e8:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <kilo_irhigh+0x13>

000009ec <.Loc.1060>:
     9ec:	0a 17       	cp	r16, r26
     9ee:	1b 07       	cpc	r17, r27
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <.LVL135>

000009f2 <L0^A>:
     9f2:	9b c1       	rjmp	.+822    	; 0xd2a <.L120>

000009f4 <.LVL135>:
     9f4:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <kilo_irhigh+0x14>
     9f8:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <kilo_irhigh+0x15>

000009fc <.Loc.1065>:
     9fc:	0a 17       	cp	r16, r26
     9fe:	1b 07       	cpc	r17, r27
     a00:	08 f4       	brcc	.+2      	; 0xa04 <.LVL136>

00000a02 <L0^A>:
     a02:	e8 c2       	rjmp	.+1488   	; 0xfd4 <.L121>

00000a04 <.LVL136>:
     a04:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <kilo_irhigh+0x16>
     a08:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <kilo_irhigh+0x17>

00000a0c <.Loc.1070>:
     a0c:	0a 17       	cp	r16, r26
     a0e:	1b 07       	cpc	r17, r27
     a10:	08 f4       	brcc	.+2      	; 0xa14 <.LVL137>

00000a12 <L0^A>:
     a12:	e4 c2       	rjmp	.+1480   	; 0xfdc <.L122>

00000a14 <.LVL137>:
     a14:	00 91 2b 01 	lds	r16, 0x012B	; 0x80012b <kilo_irhigh+0x18>
     a18:	10 91 2c 01 	lds	r17, 0x012C	; 0x80012c <kilo_irhigh+0x19>

00000a1c <.Loc.1075>:
     a1c:	0a 17       	cp	r16, r26
     a1e:	1b 07       	cpc	r17, r27
     a20:	08 f4       	brcc	.+2      	; 0xa24 <.LVL138>

00000a22 <L0^A>:
     a22:	e0 c2       	rjmp	.+1472   	; 0xfe4 <.L123>

00000a24 <.LVL138>:
     a24:	00 91 2d 01 	lds	r16, 0x012D	; 0x80012d <kilo_irhigh+0x1a>
     a28:	10 91 2e 01 	lds	r17, 0x012E	; 0x80012e <kilo_irhigh+0x1b>

00000a2c <.Loc.1080>:
            for (i=1; i<14; i++) {
     a2c:	8d e0       	ldi	r24, 0x0D	; 13

00000a2e <.Loc.1081>:
                if (dist->high_gain > kilo_irhigh[i]) {
     a2e:	2d e0       	ldi	r18, 0x0D	; 13
     a30:	30 e0       	ldi	r19, 0x00	; 0

00000a32 <.Loc.1082>:
     a32:	0a 17       	cp	r16, r26
     a34:	1b 07       	cpc	r17, r27
     a36:	08 f4       	brcc	.+2      	; 0xa3a <L0^A+0x2>

00000a38 <L0^A>:
     a38:	7b c1       	rjmp	.+758    	; 0xd30 <.L102>
     a3a:	41 2c       	mov	r4, r1
     a3c:	51 2c       	mov	r5, r1
     a3e:	30 ed       	ldi	r19, 0xD0	; 208
     a40:	3d 83       	std	Y+5, r19	; 0x05
     a42:	40 e4       	ldi	r20, 0x40	; 64
     a44:	4e 83       	std	Y+6, r20	; 0x06
     a46:	2c e0       	ldi	r18, 0x0C	; 12
     a48:	c2 2e       	mov	r12, r18
     a4a:	d1 2c       	mov	r13, r1

00000a4c <.L103>:
            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     a4c:	f6 01       	movw	r30, r12
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ed 5e       	subi	r30, 0xED	; 237
     a54:	fe 4f       	sbci	r31, 0xFE	; 254

00000a56 <.Loc.1085>:
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	d8 01       	movw	r26, r16
     a5c:	a8 1b       	sub	r26, r24
     a5e:	b9 0b       	sbc	r27, r25

00000a60 <.Loc.1086>:
     a60:	9d 01       	movw	r18, r26
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	29 83       	std	Y+1, r18	; 0x01
     a68:	3a 83       	std	Y+2, r19	; 0x02
     a6a:	4b 83       	std	Y+3, r20	; 0x03
     a6c:	5c 83       	std	Y+4, r21	; 0x04
     a6e:	ca 01       	movw	r24, r20
     a70:	bd 01       	movw	r22, r26
     a72:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__floatunsisf>

00000a76 <.Loc.1087>:
     a76:	9b 01       	movw	r18, r22
     a78:	ac 01       	movw	r20, r24
     a7a:	69 83       	std	Y+1, r22	; 0x01
     a7c:	7a 83       	std	Y+2, r23	; 0x02
     a7e:	8b 83       	std	Y+3, r24	; 0x03
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	69 81       	ldd	r22, Y+1	; 0x01
     a84:	7a 81       	ldd	r23, Y+2	; 0x02
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	9c 81       	ldd	r25, Y+4	; 0x04
     a8a:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     a8e:	5b 01       	movw	r10, r22
     a90:	6c 01       	movw	r12, r24

00000a92 <.LVL142>:
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a92:	8f 81       	ldd	r24, Y+7	; 0x07
     a94:	98 85       	ldd	r25, Y+8	; 0x08
     a96:	09 2e       	mov	r0, r25
     a98:	00 0c       	add	r0, r0
     a9a:	aa 0b       	sbc	r26, r26
     a9c:	bb 0b       	sbc	r27, r27
     a9e:	89 83       	std	Y+1, r24	; 0x01
     aa0:	9a 83       	std	Y+2, r25	; 0x02
     aa2:	ab 83       	std	Y+3, r26	; 0x03
     aa4:	bc 83       	std	Y+4, r27	; 0x04
     aa6:	bc 01       	movw	r22, r24
     aa8:	cd 01       	movw	r24, r26
     aaa:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__floatsisf>
     aae:	3b 01       	movw	r6, r22
     ab0:	4c 01       	movw	r8, r24

00000ab2 <.Loc.1091>:
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     ab2:	98 01       	movw	r18, r16
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	29 83       	std	Y+1, r18	; 0x01
     aba:	3a 83       	std	Y+2, r19	; 0x02
     abc:	4b 83       	std	Y+3, r20	; 0x03
     abe:	5c 83       	std	Y+4, r21	; 0x04
     ac0:	ca 01       	movw	r24, r20
     ac2:	b8 01       	movw	r22, r16
     ac4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__floatunsisf>
     ac8:	1b 01       	movw	r2, r22
     aca:	8c 01       	movw	r16, r24

00000acc <.Loc.1092>:
     acc:	92 01       	movw	r18, r4
     ace:	4d 81       	ldd	r20, Y+5	; 0x05
     ad0:	5e 81       	ldd	r21, Y+6	; 0x06
     ad2:	a9 82       	std	Y+1, r10	; 0x01
     ad4:	ba 82       	std	Y+2, r11	; 0x02
     ad6:	cb 82       	std	Y+3, r12	; 0x03
     ad8:	dc 82       	std	Y+4, r13	; 0x04
     ada:	69 81       	ldd	r22, Y+1	; 0x01
     adc:	7a 81       	ldd	r23, Y+2	; 0x02
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>

00000ae6 <.Loc.1093>:
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	29 82       	std	Y+1, r2	; 0x01
     aec:	3a 82       	std	Y+2, r3	; 0x02
     aee:	0b 83       	std	Y+3, r16	; 0x03
     af0:	1c 83       	std	Y+4, r17	; 0x04
     af2:	69 81       	ldd	r22, Y+1	; 0x01
     af4:	7a 81       	ldd	r23, Y+2	; 0x02
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	0e 94 40 0c 	call	0x1880	; 0x1880 <__subsf3>

00000afe <.Loc.1094>:
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     afe:	9b 01       	movw	r18, r22
     b00:	ac 01       	movw	r20, r24
     b02:	69 82       	std	Y+1, r6	; 0x01
     b04:	7a 82       	std	Y+2, r7	; 0x02
     b06:	8b 82       	std	Y+3, r8	; 0x03
     b08:	9c 82       	std	Y+4, r9	; 0x04
     b0a:	69 81       	ldd	r22, Y+1	; 0x01
     b0c:	7a 81       	ldd	r23, Y+2	; 0x02
     b0e:	8b 81       	ldd	r24, Y+3	; 0x03
     b10:	9c 81       	ldd	r25, Y+4	; 0x04
     b12:	0e 94 40 0c 	call	0x1880	; 0x1880 <__subsf3>

00000b16 <.Loc.1095>:
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e2       	ldi	r20, 0x20	; 32
     b1c:	51 e4       	ldi	r21, 0x41	; 65
     b1e:	69 83       	std	Y+1, r22	; 0x01
     b20:	7a 83       	std	Y+2, r23	; 0x02
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	69 81       	ldd	r22, Y+1	; 0x01
     b28:	7a 81       	ldd	r23, Y+2	; 0x02
     b2a:	8b 81       	ldd	r24, Y+3	; 0x03
     b2c:	9c 81       	ldd	r25, Y+4	; 0x04

00000b2e <.Loc.1098>:
     b2e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>

00000b32 <.Loc.1099>:
            b=((int)((int)b/(int)slope));
     b32:	69 83       	std	Y+1, r22	; 0x01

00000b34 <.Loc.1100>:
     b34:	7a 83       	std	Y+2, r23	; 0x02
     b36:	8b 83       	std	Y+3, r24	; 0x03
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	69 81       	ldd	r22, Y+1	; 0x01
     b3c:	7a 81       	ldd	r23, Y+2	; 0x02
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	9c 81       	ldd	r25, Y+4	; 0x04
     b42:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixsfsi>
     b46:	8b 01       	movw	r16, r22

00000b48 <.Loc.1101>:
     b48:	a9 82       	std	Y+1, r10	; 0x01
     b4a:	ba 82       	std	Y+2, r11	; 0x02
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	dc 82       	std	Y+4, r13	; 0x04
     b50:	69 81       	ldd	r22, Y+1	; 0x01
     b52:	7a 81       	ldd	r23, Y+2	; 0x02
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixsfsi>
     b5c:	69 83       	std	Y+1, r22	; 0x01
     b5e:	7a 83       	std	Y+2, r23	; 0x02
     b60:	8b 83       	std	Y+3, r24	; 0x03
     b62:	9c 83       	std	Y+4, r25	; 0x04

00000b64 <.Loc.1102>:
     b64:	c8 01       	movw	r24, r16
     b66:	69 81       	ldd	r22, Y+1	; 0x01
     b68:	7a 81       	ldd	r23, Y+2	; 0x02
     b6a:	0e 94 03 0c 	call	0x1806	; 0x1806 <__divmodhi4>

00000b6e <.Loc.1103>:
            dist_high=b;
     b6e:	d6 2e       	mov	r13, r22

00000b70 <.LBE336>:
    if (dist->high_gain > 700) {
     b70:	4f 81       	ldd	r20, Y+7	; 0x07
     b72:	58 85       	ldd	r21, Y+8	; 0x08
     b74:	4d 3b       	cpi	r20, 0xBD	; 189
     b76:	52 40       	sbci	r21, 0x02	; 2
     b78:	0c f4       	brge	.+2      	; 0xb7c <.Loc.1107>

00000b7a <L0^A>:
     b7a:	09 c1       	rjmp	.+530    	; 0xd8e <.L140>

00000b7c <.Loc.1107>:
        if (dist->low_gain > kilo_irlow[0]) {
     b7c:	d7 01       	movw	r26, r14
     b7e:	ed 90       	ld	r14, X+
     b80:	fc 90       	ld	r15, X

00000b82 <.LVL155>:
     b82:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <kilo_irlow>
     b86:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <kilo_irlow+0x1>
     b8a:	8e 15       	cp	r24, r14
     b8c:	9f 05       	cpc	r25, r15
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <.Loc.1110>

00000b90 <L0^A>:
     b90:	77 ce       	rjmp	.-786    	; 0x880 <.L98>

00000b92 <.Loc.1110>:
            dist_low=0;
     b92:	10 e0       	ldi	r17, 0x00	; 0

00000b94 <.L105>:
        if (dist_high != 255) {
     b94:	bf ef       	ldi	r27, 0xFF	; 255
     b96:	81 e2       	ldi	r24, 0x21	; 33
     b98:	81 0f       	add	r24, r17
     b9a:	db 16       	cp	r13, r27
     b9c:	09 f4       	brne	.+2      	; 0xba0 <L0^A+0x2>

00000b9e <L0^A>:
     b9e:	ac c0       	rjmp	.+344    	; 0xcf8 <.L95>
     ba0:	2d 2d       	mov	r18, r13
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	29 83       	std	Y+1, r18	; 0x01
     baa:	3a 83       	std	Y+2, r19	; 0x02
     bac:	4b 83       	std	Y+3, r20	; 0x03
     bae:	5c 83       	std	Y+4, r21	; 0x04
     bb0:	ca 01       	movw	r24, r20
     bb2:	b9 01       	movw	r22, r18
     bb4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__floatunsisf>
     bb8:	6b 01       	movw	r12, r22
     bba:	7c 01       	movw	r14, r24
     bbc:	81 2f       	mov	r24, r17
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	ab 83       	std	Y+3, r26	; 0x03
     bca:	bc 83       	std	Y+4, r27	; 0x04
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__floatunsisf>
     bd4:	4b 01       	movw	r8, r22
     bd6:	5c 01       	movw	r10, r24

00000bd8 <.L101>:
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     bd8:	2f 81       	ldd	r18, Y+7	; 0x07
     bda:	38 85       	ldd	r19, Y+8	; 0x08
     bdc:	03 2e       	mov	r0, r19
     bde:	00 0c       	add	r0, r0
     be0:	44 0b       	sbc	r20, r20
     be2:	55 0b       	sbc	r21, r21
     be4:	29 83       	std	Y+1, r18	; 0x01
     be6:	3a 83       	std	Y+2, r19	; 0x02
     be8:	4b 83       	std	Y+3, r20	; 0x03
     bea:	5c 83       	std	Y+4, r21	; 0x04
     bec:	ca 01       	movw	r24, r20
     bee:	b9 01       	movw	r22, r18
     bf0:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__floatsisf>
     bf4:	8b 01       	movw	r16, r22
     bf6:	8e 83       	std	Y+6, r24	; 0x06
     bf8:	9d 83       	std	Y+5, r25	; 0x05
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	81 e6       	ldi	r24, 0x61	; 97
     c04:	94 e4       	ldi	r25, 0x44	; 68
     c06:	0e 94 40 0c 	call	0x1880	; 0x1880 <__subsf3>

00000c0a <.Loc.1115>:
     c0a:	96 01       	movw	r18, r12
     c0c:	a7 01       	movw	r20, r14
     c0e:	69 83       	std	Y+1, r22	; 0x01
     c10:	7a 83       	std	Y+2, r23	; 0x02
     c12:	8b 83       	std	Y+3, r24	; 0x03
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	69 81       	ldd	r22, Y+1	; 0x01
     c18:	7a 81       	ldd	r23, Y+2	; 0x02
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
     c22:	6b 01       	movw	r12, r22
     c24:	7c 01       	movw	r14, r24

00000c26 <.Loc.1116>:
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4f e2       	ldi	r20, 0x2F	; 47
     c2c:	54 e4       	ldi	r21, 0x44	; 68
     c2e:	09 83       	std	Y+1, r16	; 0x01
     c30:	1a 83       	std	Y+2, r17	; 0x02
     c32:	8e 81       	ldd	r24, Y+6	; 0x06
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	9d 81       	ldd	r25, Y+5	; 0x05
     c38:	9c 83       	std	Y+4, r25	; 0x04
     c3a:	69 81       	ldd	r22, Y+1	; 0x01
     c3c:	7a 81       	ldd	r23, Y+2	; 0x02
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	9c 81       	ldd	r25, Y+4	; 0x04
     c42:	0e 94 40 0c 	call	0x1880	; 0x1880 <__subsf3>

00000c46 <.Loc.1117>:
     c46:	94 01       	movw	r18, r8
     c48:	a5 01       	movw	r20, r10
     c4a:	69 83       	std	Y+1, r22	; 0x01
     c4c:	7a 83       	std	Y+2, r23	; 0x02
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	69 81       	ldd	r22, Y+1	; 0x01
     c54:	7a 81       	ldd	r23, Y+2	; 0x02
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>

00000c5e <.Loc.1118>:
     c5e:	9b 01       	movw	r18, r22
     c60:	ac 01       	movw	r20, r24
     c62:	c9 82       	std	Y+1, r12	; 0x01
     c64:	da 82       	std	Y+2, r13	; 0x02
     c66:	eb 82       	std	Y+3, r14	; 0x03
     c68:	fc 82       	std	Y+4, r15	; 0x04
     c6a:	69 81       	ldd	r22, Y+1	; 0x01
     c6c:	7a 81       	ldd	r23, Y+2	; 0x02
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>

00000c76 <.Loc.1119>:
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	48 e4       	ldi	r20, 0x48	; 72
     c7c:	53 e4       	ldi	r21, 0x43	; 67
     c7e:	69 83       	std	Y+1, r22	; 0x01
     c80:	7a 83       	std	Y+2, r23	; 0x02
     c82:	8b 83       	std	Y+3, r24	; 0x03
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	69 81       	ldd	r22, Y+1	; 0x01
     c88:	7a 81       	ldd	r23, Y+2	; 0x02
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	9c 81       	ldd	r25, Y+4	; 0x04
     c8e:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divsf3>

00000c92 <.Loc.1120>:
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	44 e0       	ldi	r20, 0x04	; 4
     c98:	52 e4       	ldi	r21, 0x42	; 66
     c9a:	69 83       	std	Y+1, r22	; 0x01
     c9c:	7a 83       	std	Y+2, r23	; 0x02
     c9e:	8b 83       	std	Y+3, r24	; 0x03
     ca0:	9c 83       	std	Y+4, r25	; 0x04
     ca2:	69 81       	ldd	r22, Y+1	; 0x01
     ca4:	7a 81       	ldd	r23, Y+2	; 0x02
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     cae:	69 83       	std	Y+1, r22	; 0x01
     cb0:	7a 83       	std	Y+2, r23	; 0x02
     cb2:	8b 83       	std	Y+3, r24	; 0x03
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	69 81       	ldd	r22, Y+1	; 0x01
     cb8:	7a 81       	ldd	r23, Y+2	; 0x02
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fixunssfsi>
     cc2:	86 2f       	mov	r24, r22
     cc4:	19 c0       	rjmp	.+50     	; 0xcf8 <.L95>

00000cc6 <.L139>:
    if (dist->high_gain > 700) {
     cc6:	ad 3b       	cpi	r26, 0xBD	; 189
     cc8:	b2 40       	sbci	r27, 0x02	; 2
     cca:	ac f0       	brlt	.+42     	; 0xcf6 <.L110>

00000ccc <.Loc.1123>:
        if (dist->low_gain > kilo_irlow[0]) {
     ccc:	d7 01       	movw	r26, r14
     cce:	ed 90       	ld	r14, X+
     cd0:	fc 90       	ld	r15, X

00000cd2 <.LVL169>:
     cd2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <kilo_irlow>
     cd6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <kilo_irlow+0x1>

00000cda <.Loc.1126>:
            dist_high=0;
     cda:	d1 2c       	mov	r13, r1

00000cdc <.Loc.1127>:
        if (dist->low_gain > kilo_irlow[0]) {
     cdc:	8e 15       	cp	r24, r14
     cde:	9f 05       	cpc	r25, r15
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <.Loc.1128>

00000ce2 <L0^A>:
     ce2:	ce cd       	rjmp	.-1124   	; 0x880 <.L98>

00000ce4 <.Loc.1128>:
     ce4:	81 2c       	mov	r8, r1
     ce6:	91 2c       	mov	r9, r1
     ce8:	a1 2c       	mov	r10, r1
     cea:	b1 2c       	mov	r11, r1
     cec:	c1 2c       	mov	r12, r1
     cee:	d1 2c       	mov	r13, r1
     cf0:	e1 2c       	mov	r14, r1
     cf2:	f1 2c       	mov	r15, r1
     cf4:	71 cf       	rjmp	.-286    	; 0xbd8 <.L101>

00000cf6 <.L110>:
    if (dist->high_gain > 700) {
     cf6:	81 e2       	ldi	r24, 0x21	; 33

00000cf8 <.L95>:
}
     cf8:	28 96       	adiw	r28, 0x08	; 8
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	bf 90       	pop	r11
     d16:	af 90       	pop	r10
     d18:	9f 90       	pop	r9
     d1a:	8f 90       	pop	r8
     d1c:	7f 90       	pop	r7
     d1e:	6f 90       	pop	r6
     d20:	5f 90       	pop	r5
     d22:	4f 90       	pop	r4
     d24:	3f 90       	pop	r3
     d26:	2f 90       	pop	r2
     d28:	08 95       	ret

00000d2a <.L120>:
            for (i=1; i<14; i++) {
     d2a:	89 e0       	ldi	r24, 0x09	; 9

00000d2c <.Loc.1133>:
                if (dist->high_gain > kilo_irhigh[i]) {
     d2c:	29 e0       	ldi	r18, 0x09	; 9
     d2e:	30 e0       	ldi	r19, 0x00	; 0

00000d30 <.L102>:
     d30:	69 01       	movw	r12, r18
     d32:	f1 e0       	ldi	r31, 0x01	; 1
     d34:	cf 1a       	sub	r12, r31
     d36:	d1 08       	sbc	r13, r1
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	29 83       	std	Y+1, r18	; 0x01
     d42:	3a 83       	std	Y+2, r19	; 0x02
     d44:	4b 83       	std	Y+3, r20	; 0x03
     d46:	5c 83       	std	Y+4, r21	; 0x04
     d48:	ca 01       	movw	r24, r20
     d4a:	b9 01       	movw	r22, r18
     d4c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__floatunsisf>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	69 83       	std	Y+1, r22	; 0x01
     d5a:	7a 83       	std	Y+2, r23	; 0x02
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	69 81       	ldd	r22, Y+1	; 0x01
     d62:	7a 81       	ldd	r23, Y+2	; 0x02
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	a9 01       	movw	r20, r18
     d72:	69 83       	std	Y+1, r22	; 0x01
     d74:	7a 83       	std	Y+2, r23	; 0x02
     d76:	8b 83       	std	Y+3, r24	; 0x03
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	69 81       	ldd	r22, Y+1	; 0x01
     d7c:	7a 81       	ldd	r23, Y+2	; 0x02
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     d86:	2b 01       	movw	r4, r22
     d88:	8d 83       	std	Y+5, r24	; 0x05
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	5f ce       	rjmp	.-834    	; 0xa4c <.L103>

00000d8e <.L140>:
     d8e:	81 e2       	ldi	r24, 0x21	; 33
     d90:	86 0f       	add	r24, r22
     d92:	b2 cf       	rjmp	.-156    	; 0xcf8 <.L95>

00000d94 <.L115>:
            for (i=1; i<14; i++) {
     d94:	84 e0       	ldi	r24, 0x04	; 4

00000d96 <.Loc.1137>:
                if (dist->high_gain > kilo_irhigh[i]) {
     d96:	24 e0       	ldi	r18, 0x04	; 4
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	ca cf       	rjmp	.-108    	; 0xd30 <.L102>

00000d9c <.L134>:
            for(i=1; i<14; i++) {
     d9c:	59 e0       	ldi	r21, 0x09	; 9
     d9e:	65 2e       	mov	r6, r21

00000da0 <.Loc.1140>:
                if(dist->low_gain > kilo_irlow[i]) {
     da0:	e9 e0       	ldi	r30, 0x09	; 9
     da2:	f0 e0       	ldi	r31, 0x00	; 0

00000da4 <.L106>:
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	e8 5c       	subi	r30, 0xC8	; 200
     daa:	fe 4f       	sbci	r31, 0xFE	; 254

00000dac <.Loc.1144>:
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	d8 01       	movw	r26, r16
     db2:	a8 1b       	sub	r26, r24
     db4:	b9 0b       	sbc	r27, r25

00000db6 <.Loc.1145>:
     db6:	9d 01       	movw	r18, r26
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	29 83       	std	Y+1, r18	; 0x01
     dbe:	3a 83       	std	Y+2, r19	; 0x02
     dc0:	4b 83       	std	Y+3, r20	; 0x03
     dc2:	5c 83       	std	Y+4, r21	; 0x04
     dc4:	ca 01       	movw	r24, r20
     dc6:	bd 01       	movw	r22, r26
     dc8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__floatunsisf>

00000dcc <.Loc.1146>:
     dcc:	9b 01       	movw	r18, r22
     dce:	ac 01       	movw	r20, r24
     dd0:	69 83       	std	Y+1, r22	; 0x01
     dd2:	7a 83       	std	Y+2, r23	; 0x02
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	69 81       	ldd	r22, Y+1	; 0x01
     dda:	7a 81       	ldd	r23, Y+2	; 0x02
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     de4:	96 2e       	mov	r9, r22
     de6:	a7 2e       	mov	r10, r23
     de8:	b8 2e       	mov	r11, r24
     dea:	c9 2e       	mov	r12, r25

00000dec <.LVL183>:
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     dec:	c7 01       	movw	r24, r14
     dee:	ff 0c       	add	r15, r15
     df0:	aa 0b       	sbc	r26, r26
     df2:	bb 0b       	sbc	r27, r27
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	ab 83       	std	Y+3, r26	; 0x03
     dfa:	bc 83       	std	Y+4, r27	; 0x04
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__floatsisf>
     e04:	76 2e       	mov	r7, r22
     e06:	87 2e       	mov	r8, r23
     e08:	7c 01       	movw	r14, r24

00000e0a <.Loc.1150>:
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     e0a:	98 01       	movw	r18, r16
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	29 83       	std	Y+1, r18	; 0x01
     e12:	3a 83       	std	Y+2, r19	; 0x02
     e14:	4b 83       	std	Y+3, r20	; 0x03
     e16:	5c 83       	std	Y+4, r21	; 0x04
     e18:	ca 01       	movw	r24, r20
     e1a:	b8 01       	movw	r22, r16
     e1c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__floatunsisf>
     e20:	2b 01       	movw	r4, r22
     e22:	8c 01       	movw	r16, r24

00000e24 <.Loc.1151>:
     e24:	86 2d       	mov	r24, r6
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	a0 e0       	ldi	r26, 0x00	; 0
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	ab 83       	std	Y+3, r26	; 0x03
     e32:	bc 83       	std	Y+4, r27	; 0x04
     e34:	bc 01       	movw	r22, r24
     e36:	cd 01       	movw	r24, r26
     e38:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__floatunsisf>

00000e3c <.Loc.1152>:
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	5f e3       	ldi	r21, 0x3F	; 63
     e44:	69 83       	std	Y+1, r22	; 0x01
     e46:	7a 83       	std	Y+2, r23	; 0x02
     e48:	8b 83       	std	Y+3, r24	; 0x03
     e4a:	9c 83       	std	Y+4, r25	; 0x04
     e4c:	69 81       	ldd	r22, Y+1	; 0x01
     e4e:	7a 81       	ldd	r23, Y+2	; 0x02
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>

00000e58 <.Loc.1153>:
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	a9 01       	movw	r20, r18
     e5e:	69 83       	std	Y+1, r22	; 0x01
     e60:	7a 83       	std	Y+2, r23	; 0x02
     e62:	8b 83       	std	Y+3, r24	; 0x03
     e64:	9c 83       	std	Y+4, r25	; 0x04
     e66:	69 81       	ldd	r22, Y+1	; 0x01
     e68:	7a 81       	ldd	r23, Y+2	; 0x02
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>

00000e72 <.Loc.1154>:
     e72:	29 2d       	mov	r18, r9
     e74:	3a 2d       	mov	r19, r10
     e76:	4b 2d       	mov	r20, r11
     e78:	5c 2d       	mov	r21, r12
     e7a:	69 83       	std	Y+1, r22	; 0x01
     e7c:	7a 83       	std	Y+2, r23	; 0x02
     e7e:	8b 83       	std	Y+3, r24	; 0x03
     e80:	9c 83       	std	Y+4, r25	; 0x04
     e82:	69 81       	ldd	r22, Y+1	; 0x01
     e84:	7a 81       	ldd	r23, Y+2	; 0x02
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	9c 81       	ldd	r25, Y+4	; 0x04
     e8a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>

00000e8e <.Loc.1155>:
     e8e:	9b 01       	movw	r18, r22
     e90:	ac 01       	movw	r20, r24
     e92:	49 82       	std	Y+1, r4	; 0x01
     e94:	5a 82       	std	Y+2, r5	; 0x02
     e96:	0b 83       	std	Y+3, r16	; 0x03
     e98:	1c 83       	std	Y+4, r17	; 0x04
     e9a:	69 81       	ldd	r22, Y+1	; 0x01
     e9c:	7a 81       	ldd	r23, Y+2	; 0x02
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	9c 81       	ldd	r25, Y+4	; 0x04
     ea2:	0e 94 40 0c 	call	0x1880	; 0x1880 <__subsf3>

00000ea6 <.Loc.1156>:
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	79 82       	std	Y+1, r7	; 0x01
     eac:	8a 82       	std	Y+2, r8	; 0x02
     eae:	eb 82       	std	Y+3, r14	; 0x03
     eb0:	fc 82       	std	Y+4, r15	; 0x04
     eb2:	69 81       	ldd	r22, Y+1	; 0x01
     eb4:	7a 81       	ldd	r23, Y+2	; 0x02
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	0e 94 40 0c 	call	0x1880	; 0x1880 <__subsf3>

00000ebe <.Loc.1157>:
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	69 83       	std	Y+1, r22	; 0x01
     ec8:	7a 83       	std	Y+2, r23	; 0x02
     eca:	8b 83       	std	Y+3, r24	; 0x03
     ecc:	9c 83       	std	Y+4, r25	; 0x04
     ece:	69 81       	ldd	r22, Y+1	; 0x01
     ed0:	7a 81       	ldd	r23, Y+2	; 0x02
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04

00000ed6 <.Loc.1160>:
     ed6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>

00000eda <.Loc.1161>:
                b=((int)((int)b/(int)slope));
     eda:	69 83       	std	Y+1, r22	; 0x01

00000edc <.Loc.1162>:
     edc:	7a 83       	std	Y+2, r23	; 0x02
     ede:	8b 83       	std	Y+3, r24	; 0x03
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	69 81       	ldd	r22, Y+1	; 0x01
     ee4:	7a 81       	ldd	r23, Y+2	; 0x02
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixsfsi>
     eee:	8b 01       	movw	r16, r22

00000ef0 <.Loc.1163>:
     ef0:	99 82       	std	Y+1, r9	; 0x01
     ef2:	aa 82       	std	Y+2, r10	; 0x02
     ef4:	bb 82       	std	Y+3, r11	; 0x03
     ef6:	cc 82       	std	Y+4, r12	; 0x04
     ef8:	69 81       	ldd	r22, Y+1	; 0x01
     efa:	7a 81       	ldd	r23, Y+2	; 0x02
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fixsfsi>
     f04:	69 83       	std	Y+1, r22	; 0x01
     f06:	7a 83       	std	Y+2, r23	; 0x02
     f08:	8b 83       	std	Y+3, r24	; 0x03
     f0a:	9c 83       	std	Y+4, r25	; 0x04

00000f0c <.Loc.1164>:
     f0c:	c8 01       	movw	r24, r16
     f0e:	69 81       	ldd	r22, Y+1	; 0x01
     f10:	7a 81       	ldd	r23, Y+2	; 0x02
     f12:	0e 94 03 0c 	call	0x1806	; 0x1806 <__divmodhi4>

00000f16 <.Loc.1165>:
                dist_low=b;
     f16:	16 2f       	mov	r17, r22

00000f18 <.LBE338>:
    if (dist_low != 255) {
     f18:	6f 3f       	cpi	r22, 0xFF	; 255
     f1a:	09 f0       	breq	.+2      	; 0xf1e <L0^A+0x2>

00000f1c <L0^A>:
     f1c:	3b ce       	rjmp	.-906    	; 0xb94 <.L105>
     f1e:	81 e2       	ldi	r24, 0x21	; 33
     f20:	8d 0d       	add	r24, r13
     f22:	ea ce       	rjmp	.-556    	; 0xcf8 <.L95>

00000f24 <.L126>:
            for(i=1; i<14; i++) {
     f24:	66 24       	eor	r6, r6
     f26:	63 94       	inc	r6

00000f28 <.Loc.1170>:
                if(dist->low_gain > kilo_irlow[i]) {
     f28:	e1 e0       	ldi	r30, 0x01	; 1
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	3b cf       	rjmp	.-394    	; 0xda4 <.L106>

00000f2e <.L127>:
            for(i=1; i<14; i++) {
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	68 2e       	mov	r6, r24

00000f32 <.Loc.1172>:
                if(dist->low_gain > kilo_irlow[i]) {
     f32:	e2 e0       	ldi	r30, 0x02	; 2
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	36 cf       	rjmp	.-404    	; 0xda4 <.L106>

00000f38 <.L128>:
            for(i=1; i<14; i++) {
     f38:	b3 e0       	ldi	r27, 0x03	; 3
     f3a:	6b 2e       	mov	r6, r27

00000f3c <.Loc.1174>:
                if(dist->low_gain > kilo_irlow[i]) {
     f3c:	e3 e0       	ldi	r30, 0x03	; 3
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	31 cf       	rjmp	.-414    	; 0xda4 <.L106>

00000f42 <.L129>:
            for(i=1; i<14; i++) {
     f42:	a4 e0       	ldi	r26, 0x04	; 4
     f44:	6a 2e       	mov	r6, r26

00000f46 <.LVL203>:
                if(dist->low_gain > kilo_irlow[i]) {
     f46:	e4 e0       	ldi	r30, 0x04	; 4
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	2c cf       	rjmp	.-424    	; 0xda4 <.L106>

00000f4c <.L130>:
            for(i=1; i<14; i++) {
     f4c:	f5 e0       	ldi	r31, 0x05	; 5
     f4e:	6f 2e       	mov	r6, r31

00000f50 <.Loc.1178>:
                if(dist->low_gain > kilo_irlow[i]) {
     f50:	e5 e0       	ldi	r30, 0x05	; 5
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	27 cf       	rjmp	.-434    	; 0xda4 <.L106>

00000f56 <.L112>:
            for (i=1; i<14; i++) {
     f56:	81 e0       	ldi	r24, 0x01	; 1

00000f58 <.Loc.1180>:
                if (dist->high_gain > kilo_irhigh[i]) {
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	e9 ce       	rjmp	.-558    	; 0xd30 <.L102>

00000f5e <.L131>:
            for(i=1; i<14; i++) {
     f5e:	e6 e0       	ldi	r30, 0x06	; 6
     f60:	6e 2e       	mov	r6, r30

00000f62 <.Loc.1183>:
                if(dist->low_gain > kilo_irlow[i]) {
     f62:	e6 e0       	ldi	r30, 0x06	; 6
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	1e cf       	rjmp	.-452    	; 0xda4 <.L106>

00000f68 <.L113>:
            for (i=1; i<14; i++) {
     f68:	82 e0       	ldi	r24, 0x02	; 2

00000f6a <.Loc.1185>:
                if (dist->high_gain > kilo_irhigh[i]) {
     f6a:	22 e0       	ldi	r18, 0x02	; 2
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	e0 ce       	rjmp	.-576    	; 0xd30 <.L102>

00000f70 <.L132>:
            for(i=1; i<14; i++) {
     f70:	77 e0       	ldi	r23, 0x07	; 7
     f72:	67 2e       	mov	r6, r23

00000f74 <.Loc.1188>:
                if(dist->low_gain > kilo_irlow[i]) {
     f74:	e7 e0       	ldi	r30, 0x07	; 7
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	15 cf       	rjmp	.-470    	; 0xda4 <.L106>

00000f7a <.L114>:
            for (i=1; i<14; i++) {
     f7a:	83 e0       	ldi	r24, 0x03	; 3

00000f7c <.Loc.1190>:
                if (dist->high_gain > kilo_irhigh[i]) {
     f7c:	23 e0       	ldi	r18, 0x03	; 3
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	d7 ce       	rjmp	.-594    	; 0xd30 <.L102>

00000f82 <.L133>:
            for(i=1; i<14; i++) {
     f82:	68 e0       	ldi	r22, 0x08	; 8
     f84:	66 2e       	mov	r6, r22

00000f86 <.Loc.1193>:
                if(dist->low_gain > kilo_irlow[i]) {
     f86:	e8 e0       	ldi	r30, 0x08	; 8
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	0c cf       	rjmp	.-488    	; 0xda4 <.L106>

00000f8c <.L116>:
            for (i=1; i<14; i++) {
     f8c:	85 e0       	ldi	r24, 0x05	; 5

00000f8e <.Loc.1195>:
                if (dist->high_gain > kilo_irhigh[i]) {
     f8e:	25 e0       	ldi	r18, 0x05	; 5
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	ce ce       	rjmp	.-612    	; 0xd30 <.L102>

00000f94 <.L135>:
            for(i=1; i<14; i++) {
     f94:	4a e0       	ldi	r20, 0x0A	; 10
     f96:	64 2e       	mov	r6, r20

00000f98 <.Loc.1198>:
                if(dist->low_gain > kilo_irlow[i]) {
     f98:	ea e0       	ldi	r30, 0x0A	; 10
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	03 cf       	rjmp	.-506    	; 0xda4 <.L106>

00000f9e <.L117>:
            for (i=1; i<14; i++) {
     f9e:	86 e0       	ldi	r24, 0x06	; 6

00000fa0 <.Loc.1200>:
                if (dist->high_gain > kilo_irhigh[i]) {
     fa0:	26 e0       	ldi	r18, 0x06	; 6
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	c5 ce       	rjmp	.-630    	; 0xd30 <.L102>

00000fa6 <.L136>:
            for(i=1; i<14; i++) {
     fa6:	3b e0       	ldi	r19, 0x0B	; 11
     fa8:	63 2e       	mov	r6, r19

00000faa <.Loc.1203>:
                if(dist->low_gain > kilo_irlow[i]) {
     faa:	eb e0       	ldi	r30, 0x0B	; 11
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	fa ce       	rjmp	.-524    	; 0xda4 <.L106>

00000fb0 <.L118>:
            for (i=1; i<14; i++) {
     fb0:	87 e0       	ldi	r24, 0x07	; 7

00000fb2 <.Loc.1205>:
                if (dist->high_gain > kilo_irhigh[i]) {
     fb2:	27 e0       	ldi	r18, 0x07	; 7
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	bc ce       	rjmp	.-648    	; 0xd30 <.L102>

00000fb8 <.L137>:
            for(i=1; i<14; i++) {
     fb8:	2c e0       	ldi	r18, 0x0C	; 12
     fba:	62 2e       	mov	r6, r18

00000fbc <.Loc.1208>:
                if(dist->low_gain > kilo_irlow[i]) {
     fbc:	ec e0       	ldi	r30, 0x0C	; 12
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	f1 ce       	rjmp	.-542    	; 0xda4 <.L106>

00000fc2 <.L119>:
            for (i=1; i<14; i++) {
     fc2:	88 e0       	ldi	r24, 0x08	; 8

00000fc4 <.Loc.1210>:
                if (dist->high_gain > kilo_irhigh[i]) {
     fc4:	28 e0       	ldi	r18, 0x08	; 8
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	b3 ce       	rjmp	.-666    	; 0xd30 <.L102>

00000fca <.L138>:
            for(i=1; i<14; i++) {
     fca:	9d e0       	ldi	r25, 0x0D	; 13
     fcc:	69 2e       	mov	r6, r25

00000fce <.Loc.1213>:
                if(dist->low_gain > kilo_irlow[i]) {
     fce:	ed e0       	ldi	r30, 0x0D	; 13
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	e8 ce       	rjmp	.-560    	; 0xda4 <.L106>

00000fd4 <.L121>:
            for (i=1; i<14; i++) {
     fd4:	8a e0       	ldi	r24, 0x0A	; 10

00000fd6 <.Loc.1215>:
                if (dist->high_gain > kilo_irhigh[i]) {
     fd6:	2a e0       	ldi	r18, 0x0A	; 10
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	aa ce       	rjmp	.-684    	; 0xd30 <.L102>

00000fdc <.L122>:
            for (i=1; i<14; i++) {
     fdc:	8b e0       	ldi	r24, 0x0B	; 11

00000fde <.Loc.1217>:
                if (dist->high_gain > kilo_irhigh[i]) {
     fde:	2b e0       	ldi	r18, 0x0B	; 11
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	a6 ce       	rjmp	.-692    	; 0xd30 <.L102>

00000fe4 <.L123>:
            for (i=1; i<14; i++) {
     fe4:	8c e0       	ldi	r24, 0x0C	; 12

00000fe6 <.Loc.1219>:
                if (dist->high_gain > kilo_irhigh[i]) {
     fe6:	2c e0       	ldi	r18, 0x0C	; 12
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	a2 ce       	rjmp	.-700    	; 0xd30 <.L102>

00000fec <__vector_14>:
ISR(TIMER0_COMPA_vect) {
     fec:	1f 92       	push	r1

00000fee <.LCFI32>:
     fee:	0f 92       	push	r0

00000ff0 <.LCFI33>:
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	2f 93       	push	r18

00000ff8 <.LCFI34>:
     ff8:	3f 93       	push	r19

00000ffa <.LCFI35>:
     ffa:	4f 93       	push	r20

00000ffc <.LCFI36>:
     ffc:	5f 93       	push	r21

00000ffe <.LCFI37>:
     ffe:	6f 93       	push	r22

00001000 <.LCFI38>:
    1000:	7f 93       	push	r23

00001002 <.LCFI39>:
    1002:	8f 93       	push	r24

00001004 <.LCFI40>:
    1004:	9f 93       	push	r25

00001006 <.LCFI41>:
    1006:	af 93       	push	r26

00001008 <.LCFI42>:
    1008:	bf 93       	push	r27

0000100a <.LCFI43>:
    100a:	ef 93       	push	r30

0000100c <.LCFI44>:
    100c:	ff 93       	push	r31

0000100e <.LCFI45>:
    tx_clock += tx_increment;
    100e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tx_clock>
    1012:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <tx_clock+0x1>
    1016:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <tx_increment>
    101a:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <tx_increment+0x1>
    101e:	82 0f       	add	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tx_clock+0x1>
    1026:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_clock>

0000102a <.Loc.1223>:
    tx_increment = 0xFF;
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
    1032:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>

00001036 <.Loc.1225>:
    OCR0A = tx_increment;
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	87 bd       	out	0x27, r24	; 39

0000103a <.Loc.1227>:
    kilo_ticks++;
    103a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <kilo_ticks>
    103e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <kilo_ticks+0x1>
    1042:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <kilo_ticks+0x2>
    1046:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <kilo_ticks+0x3>
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	a1 1d       	adc	r26, r1
    104e:	b1 1d       	adc	r27, r1
    1050:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <kilo_ticks>
    1054:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <kilo_ticks+0x1>
    1058:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <kilo_ticks+0x2>
    105c:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <kilo_ticks+0x3>

00001060 <.Loc.1229>:
    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1060:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>

00001064 <.Loc.1231>:
    1064:	81 11       	cpse	r24, r1
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <.L141>

00001068 <.Loc.1232>:
    1068:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <kilo_tx_period>
    106c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <kilo_tx_period+0x1>

00001070 <.Loc.1233>:
    1070:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
    1074:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
    1078:	82 17       	cp	r24, r18
    107a:	93 07       	cpc	r25, r19
    107c:	20 f4       	brcc	.+8      	; 0x1086 <.L141>

0000107e <.Loc.1234>:
    107e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>

00001082 <.Loc.1235>:
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	89 f0       	breq	.+34     	; 0x10a8 <.L149>

00001086 <.L141>:
}
    1086:	ff 91       	pop	r31
    1088:	ef 91       	pop	r30
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	7f 91       	pop	r23
    1094:	6f 91       	pop	r22
    1096:	5f 91       	pop	r21
    1098:	4f 91       	pop	r20
    109a:	3f 91       	pop	r19
    109c:	2f 91       	pop	r18
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <.L149>:
        message_t *msg = kilo_message_tx();
    10a8:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
    10ac:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
    10b0:	09 95       	icall

000010b2 <.LVL222>:
        if (msg) {
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	41 f3       	breq	.-48     	; 0x1086 <.L141>

000010b6 <.Loc.1241>:
            if (message_send(msg)) {
    10b6:	0e 94 75 0b 	call	0x16ea	; 0x16ea <message_send>

000010ba <.LVL223>:
    10ba:	88 23       	and	r24, r24
    10bc:	51 f0       	breq	.+20     	; 0x10d2 <.L145>

000010be <.Loc.1244>:
                kilo_message_tx_success();
    10be:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
    10c2:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
    10c6:	09 95       	icall

000010c8 <.Loc.1245>:
                tx_clock = 0;
    10c8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
    10cc:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
    10d0:	da cf       	rjmp	.-76     	; 0x1086 <.L141>

000010d2 <.L145>:
                tx_increment = rand()&0xFF;
    10d2:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <rand>

000010d6 <.LVL225>:
    10d6:	9c 01       	movw	r18, r24

000010d8 <.Loc.1249>:
    10d8:	99 27       	eor	r25, r25

000010da <.Loc.1250>:
    10da:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
    10de:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>

000010e2 <.Loc.1251>:
                OCR0A = tx_increment;
    10e2:	27 bd       	out	0x27, r18	; 39

000010e4 <.LBE347>:
}
    10e4:	d0 cf       	rjmp	.-96     	; 0x1086 <.L141>

000010e6 <set_color>:
    if (rgb&(1<<0))
    10e6:	80 ff       	sbrs	r24, 0
    10e8:	11 c0       	rjmp	.+34     	; 0x110c <.L151>

000010ea <.Loc.1257>:
        DDRD |= (1<<5);
    10ea:	55 9a       	sbi	0x0a, 5	; 10

000010ec <.Loc.1259>:
    if (rgb&(1<<1))
    10ec:	81 ff       	sbrs	r24, 1
    10ee:	11 c0       	rjmp	.+34     	; 0x1112 <.L153>

000010f0 <.L163>:
        DDRD |= (1<<4);
    10f0:	54 9a       	sbi	0x0a, 4	; 10

000010f2 <.Loc.1263>:
    if (rgb&(1<<2))
    10f2:	82 ff       	sbrs	r24, 2
    10f4:	11 c0       	rjmp	.+34     	; 0x1118 <.L155>

000010f6 <.L164>:
        DDRC |= (1<<3);
    10f6:	3b 9a       	sbi	0x07, 3	; 7

000010f8 <.Loc.1267>:
    if (rgb&(1<<3))
    10f8:	83 ff       	sbrs	r24, 3
    10fa:	11 c0       	rjmp	.+34     	; 0x111e <.L157>

000010fc <.L165>:
        DDRC |= (1<<2);
    10fc:	3a 9a       	sbi	0x07, 2	; 7

000010fe <.Loc.1271>:
    if (rgb&(1<<4))
    10fe:	84 ff       	sbrs	r24, 4
    1100:	11 c0       	rjmp	.+34     	; 0x1124 <.L159>

00001102 <.L166>:
        DDRC |= (1<<5);
    1102:	3d 9a       	sbi	0x07, 5	; 7

00001104 <.Loc.1275>:
    if (rgb&(1<<5))
    1104:	85 ff       	sbrs	r24, 5
    1106:	11 c0       	rjmp	.+34     	; 0x112a <.L161>

00001108 <.L167>:
        DDRC |= (1<<4);
    1108:	3c 9a       	sbi	0x07, 4	; 7
    110a:	08 95       	ret

0000110c <.L151>:
        DDRD &= ~(1<<5);
    110c:	55 98       	cbi	0x0a, 5	; 10

0000110e <.Loc.1281>:
    if (rgb&(1<<1))
    110e:	81 fd       	sbrc	r24, 1
    1110:	ef cf       	rjmp	.-34     	; 0x10f0 <.L163>

00001112 <.L153>:
        DDRD &= ~(1<<4);
    1112:	54 98       	cbi	0x0a, 4	; 10

00001114 <.Loc.1285>:
    if (rgb&(1<<2))
    1114:	82 fd       	sbrc	r24, 2
    1116:	ef cf       	rjmp	.-34     	; 0x10f6 <.L164>

00001118 <.L155>:
        DDRC &= ~(1<<3);
    1118:	3b 98       	cbi	0x07, 3	; 7

0000111a <.Loc.1289>:
    if (rgb&(1<<3))
    111a:	83 fd       	sbrc	r24, 3
    111c:	ef cf       	rjmp	.-34     	; 0x10fc <.L165>

0000111e <.L157>:
        DDRC &= ~(1<<2);
    111e:	3a 98       	cbi	0x07, 2	; 7

00001120 <.Loc.1293>:
    if (rgb&(1<<4))
    1120:	84 fd       	sbrc	r24, 4
    1122:	ef cf       	rjmp	.-34     	; 0x1102 <.L166>

00001124 <.L159>:
        DDRC &= ~(1<<5);
    1124:	3d 98       	cbi	0x07, 5	; 7

00001126 <.Loc.1297>:
    if (rgb&(1<<5))
    1126:	85 fd       	sbrc	r24, 5
    1128:	ef cf       	rjmp	.-34     	; 0x1108 <.L167>

0000112a <.L161>:
        DDRC &= ~(1<<4);
    112a:	3c 98       	cbi	0x07, 4	; 7

0000112c <.Loc.1301>:
}
    112c:	08 95       	ret

0000112e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    112e:	1f 92       	push	r1
    1130:	1f b6       	in	r1, 0x3f	; 63
    1132:	1f 92       	push	r1
    1134:	11 24       	eor	r1, r1
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25

0000113a <.LCFI46>:
    rx_timer_off();
    113a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

0000113e <.Loc.1304>:
    113e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1142:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

00001146 <.Loc.1305>:
    rx_leadingbit = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_leadingbit>

0000114c <.Loc.1308>:
    rx_leadingbyte = 1;
    114c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>

00001150 <.Loc.1310>:
    rx_busy = 0;
    1150:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

00001154 <.Loc.1312>:
    adc_trigger_high_gain();
    1154:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00001158 <.Loc.1313>:
    1158:	93 ea       	ldi	r25, 0xA3	; 163
    115a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

0000115e <.Loc.1314>:
    115e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

00001162 <.Loc.1315>:
}
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	1f 90       	pop	r1
    1168:	1f be       	out	0x3f, r1	; 63
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    116e:	1f 92       	push	r1

00001170 <.LCFI47>:
    1170:	0f 92       	push	r0

00001172 <.LCFI48>:
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	0f 93       	push	r16

0000117a <.LCFI49>:
    117a:	1f 93       	push	r17

0000117c <.LCFI50>:
    117c:	2f 93       	push	r18

0000117e <.LCFI51>:
    117e:	3f 93       	push	r19

00001180 <.LCFI52>:
    1180:	4f 93       	push	r20

00001182 <.LCFI53>:
    1182:	5f 93       	push	r21

00001184 <.LCFI54>:
    1184:	6f 93       	push	r22

00001186 <.LCFI55>:
    1186:	7f 93       	push	r23

00001188 <.LCFI56>:
    1188:	8f 93       	push	r24

0000118a <.LCFI57>:
    118a:	9f 93       	push	r25

0000118c <.LCFI58>:
    118c:	af 93       	push	r26

0000118e <.LCFI59>:
    118e:	bf 93       	push	r27

00001190 <.LCFI60>:
    1190:	ef 93       	push	r30

00001192 <.LCFI61>:
    1192:	ff 93       	push	r31

00001194 <.LCFI62>:
    1194:	cf 93       	push	r28

00001196 <.LCFI63>:
    1196:	df 93       	push	r29

00001198 <.LCFI64>:
    1198:	00 d0       	rcall	.+0      	; 0x119a <L0^A>

0000119a <L0^A>:
    119a:	00 d0       	rcall	.+0      	; 0x119c <L0^A>

0000119c <L0^A>:
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62

000011a0 <.LCFI66>:
    uint16_t timer = TCNT1;
    11a0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11a4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

000011a8 <.LVL227>:

    rx_busy = 1;
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <rx_busy>

000011ae <.Loc.1322>:
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    11ae:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx_leadingbit>
    11b2:	88 23       	and	r24, r24
    11b4:	d9 f1       	breq	.+118    	; 0x122c <.L170>

000011b6 <.Loc.1324>:
        rx_timer_on();
    11b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

000011be <.Loc.1325>:
    11be:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

000011c2 <.Loc.1326>:
        rx_bytevalue = 0;
    11c2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>

000011c6 <.Loc.1329>:
        rx_leadingbit = 0;
    11c6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rx_leadingbit>

000011ca <.Loc.1331>:
        if (rx_leadingbyte) {
    11ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
    11ce:	88 23       	and	r24, r24
    11d0:	a1 f0       	breq	.+40     	; 0x11fa <.L169>

000011d2 <.L171>:
            adc_finish_conversion();
    11d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    11d6:	86 fd       	sbrc	r24, 6
    11d8:	fc cf       	rjmp	.-8      	; 0x11d2 <.L171>

000011da <.Loc.1335>:
            rx_dist.high_gain = ADCW;
    11da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    11de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

000011e2 <.Loc.1337>:
    11e2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <rx_dist+0x3>
    11e6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rx_dist+0x2>

000011ea <.Loc.1338>:
            adc_trigger_low_gain();
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

000011f0 <.Loc.1339>:
    11f0:	93 ea       	ldi	r25, 0xA3	; 163
    11f2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

000011f6 <.Loc.1340>:
    11f6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

000011fa <.L169>:
                    }
                }
            }
        }
    }
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <.L170>:
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    122c:	c9 01       	movw	r24, r18
    122e:	87 58       	subi	r24, 0x87	; 135
    1230:	91 09       	sbc	r25, r1

00001232 <.Loc.1344>:
    1232:	84 37       	cpi	r24, 0x74	; 116
    1234:	99 40       	sbci	r25, 0x09	; 9
    1236:	a0 f0       	brcs	.+40     	; 0x1260 <.L173>

00001238 <.Loc.1345>:
            rx_timer_off();
    1238:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

0000123c <.Loc.1346>:
    123c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1240:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

00001244 <.Loc.1347>:
            rx_leadingbit = 1;
    1244:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>

00001248 <.Loc.1350>:
            rx_leadingbyte = 1;
    1248:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>

0000124c <.Loc.1352>:
            rx_busy = 0;
    124c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

00001250 <.Loc.1354>:
            adc_trigger_high_gain();
    1250:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00001254 <.Loc.1355>:
    1254:	83 ea       	ldi	r24, 0xA3	; 163
    1256:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

0000125a <.Loc.1356>:
    125a:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

0000125e <.Loc.1357>:
    125e:	cd cf       	rjmp	.-102    	; 0x11fa <.L169>

00001260 <.L173>:
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1260:	26 58       	subi	r18, 0x86	; 134
    1262:	31 09       	sbc	r19, r1

00001264 <.LVL231>:
    1264:	a4 ef       	ldi	r26, 0xF4	; 244
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	0e 94 1d 0c 	call	0x183a	; 0x183a <__umulhisi3>
    126c:	69 83       	std	Y+1, r22	; 0x01
    126e:	7a 83       	std	Y+2, r23	; 0x02
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	9c 83       	std	Y+4, r25	; 0x04

00001274 <.Loc.1362>:
    1274:	8c 01       	movw	r16, r24
    1276:	22 27       	eor	r18, r18
    1278:	33 27       	eor	r19, r19

0000127a <.LVL232>:
            if (bitindex <= 7) { // Data bit received.
    127a:	88 30       	cpi	r24, 0x08	; 8
    127c:	08 f4       	brcc	.+2      	; 0x1280 <.Loc.1365>

0000127e <L0^A>:
    127e:	65 c0       	rjmp	.+202    	; 0x134a <.L217>

00001280 <.Loc.1365>:
                rx_leadingbit = 1;
    1280:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>

00001284 <.Loc.1367>:
                if (rx_leadingbyte) {
    1284:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>

00001288 <.LVL233>:
    1288:	81 11       	cpse	r24, r1
    128a:	3c c0       	rjmp	.+120    	; 0x1304 <.L176>

0000128c <.Loc.1370>:
                    rawmsg[rx_byteindex] = rx_bytevalue;
    128c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_byteindex>
    1290:	e8 2f       	mov	r30, r24
    1292:	f0 e0       	ldi	r31, 0x00	; 0

00001294 <.Loc.1372>:
    1294:	e4 5a       	subi	r30, 0xA4	; 164
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
    129c:	90 83       	st	Z, r25

0000129e <.Loc.1373>:
                    rx_byteindex++;
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rx_byteindex>

000012a4 <.Loc.1375>:
                    if (rx_byteindex == sizeof(message_t)) {
    12a4:	8c 30       	cpi	r24, 0x0C	; 12
    12a6:	09 f0       	breq	.+2      	; 0x12aa <.Loc.1377>

000012a8 <L0^A>:
    12a8:	a8 cf       	rjmp	.-176    	; 0x11fa <.L169>

000012aa <.Loc.1377>:
                        rx_timer_off();
    12aa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

000012ae <.Loc.1378>:
    12ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

000012b6 <.Loc.1379>:
                        rx_leadingbyte = 1;
    12b6:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>

000012ba <.Loc.1382>:
                        rx_busy = 0;
    12ba:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

000012be <.Loc.1384>:
                        if (rx_msg.crc == message_crc(&rx_msg))
    12be:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <rx_msg+0xa>
    12c2:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <rx_msg+0xb>

000012c6 <.LVL234>:
    12c6:	8c e5       	ldi	r24, 0x5C	; 92
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 bd 0a 	call	0x157a	; 0x157a <message_crc>

000012ce <.LVL235>:
    12ce:	08 17       	cp	r16, r24
    12d0:	19 07       	cpc	r17, r25
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <.LBB352>

000012d4 <L0^A>:
    12d4:	92 cf       	rjmp	.-220    	; 0x11fa <.L169>

000012d6 <.LBB352>:
    if (rx_msg.type < BOOT) {
    12d6:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <rx_msg+0x9>

000012da <.Loc.1394>:
    12da:	e7 ff       	sbrs	r30, 7
    12dc:	48 c0       	rjmp	.+144    	; 0x136e <.L218>

000012de <.Loc.1395>:
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    12de:	98 e7       	ldi	r25, 0x78	; 120
    12e0:	9e 0f       	add	r25, r30

000012e2 <.Loc.1397>:
    12e2:	93 30       	cpi	r25, 0x03	; 3
    12e4:	30 f0       	brcs	.+12     	; 0x12f2 <.L180>

000012e6 <.Loc.1398>:
        motors_off();
    12e6:	53 98       	cbi	0x0a, 3	; 10

000012e8 <.Loc.1399>:
    12e8:	23 98       	cbi	0x04, 3	; 4

000012ea <.Loc.1400>:
    12ea:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

000012ee <.Loc.1401>:
    12ee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

000012f2 <.L180>:
    switch (rx_msg.type) {
    12f2:	e0 58       	subi	r30, 0x80	; 128
    12f4:	eb 30       	cpi	r30, 0x0B	; 11
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <.LLST31>

000012f8 <L0^A>:
    12f8:	80 cf       	rjmp	.-256    	; 0x11fa <.L169>
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	e5 5c       	subi	r30, 0xC5	; 197
    12fe:	f0 4f       	sbci	r31, 0xF0	; 240
    1300:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__tablejump2__>

00001304 <.L176>:
                    adc_finish_conversion();
    1304:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1308:	86 fd       	sbrc	r24, 6
    130a:	fc cf       	rjmp	.-8      	; 0x1304 <.L176>

0000130c <.Loc.1407>:
                    rx_dist.low_gain = ADCW;
    130c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1310:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

00001314 <.Loc.1409>:
    1314:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <rx_dist+0x1>
    1318:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rx_dist>

0000131c <.Loc.1410>:
                    adc_trigger_high_gain();
    131c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

00001320 <.Loc.1411>:
    1320:	83 ea       	ldi	r24, 0xA3	; 163
    1322:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

00001326 <.Loc.1412>:
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

0000132c <.Loc.1413>:
                    if (rx_bytevalue != 0) { // Collision detected.
    132c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
    1330:	99 23       	and	r25, r25
    1332:	c1 f0       	breq	.+48     	; 0x1364 <.L177>

00001334 <.Loc.1416>:
                        rx_timer_off();
    1334:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

00001338 <.Loc.1417>:
    1338:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    133c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

00001340 <.Loc.1418>:
                        rx_leadingbyte = 1;
    1340:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>

00001344 <.Loc.1421>:
                        rx_busy = 0;
    1344:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    1348:	58 cf       	rjmp	.-336    	; 0x11fa <.L169>

0000134a <.L217>:
                rx_bytevalue |= (1<<bitindex);
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0

0000134e <.LVL239>:
    134e:	9c 01       	movw	r18, r24
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <.L2^B2>

00001352 <.L1^B28>:
    1352:	22 0f       	add	r18, r18

00001354 <.L2^B2>:
    1354:	0a 95       	dec	r16
    1356:	ea f7       	brpl	.-6      	; 0x1352 <.L1^B28>

00001358 <.Loc.1426>:
    1358:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <rx_bytevalue>
    135c:	82 2b       	or	r24, r18
    135e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <rx_bytevalue>
    1362:	4b cf       	rjmp	.-362    	; 0x11fa <.L169>

00001364 <.L177>:
                        rx_leadingbyte = 0;
    1364:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_leadingbyte>

00001368 <.Loc.1429>:
                        rx_byteindex = 0;
    1368:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
    136c:	46 cf       	rjmp	.-372    	; 0x11fa <.L169>

0000136e <.L218>:
        kilo_message_rx(&rx_msg, &rx_dist);
    136e:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
    1372:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
    1376:	61 e3       	ldi	r22, 0x31	; 49
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	8c e5       	ldi	r24, 0x5C	; 92
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	09 95       	icall

00001380 <.LVL241>:
        return;
    1380:	3c cf       	rjmp	.-392    	; 0x11fa <.L169>

00001382 <.L181>:
            switch(calibmsg->mode) {
    1382:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	09 f4       	brne	.+2      	; 0x138c <.LVUS37+0x1>

0000138a <L0^A>:
    138a:	81 c0       	rjmp	.+258    	; 0x148e <.L191>
    138c:	08 f0       	brcs	.+2      	; 0x1390 <L0^A+0x2>

0000138e <L0^A>:
    138e:	68 c0       	rjmp	.+208    	; 0x1460 <.L192>
    1390:	88 23       	and	r24, r24
    1392:	09 f4       	brne	.+2      	; 0x1396 <.Loc.1435>

00001394 <L0^A>:
    1394:	ba c0       	rjmp	.+372    	; 0x150a <.L219>

00001396 <.Loc.1435>:
                    kilo_uid = calibmsg->uid;
    1396:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x1>
    139a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <rx_msg+0x2>
    139e:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <kilo_uid+0x1>
    13a2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_uid>

000013a6 <.Loc.1437>:
                    cur_motion = MOVE_STOP;
    13a6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>

000013aa <.L197>:
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13aa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>

000013ae <.Loc.1442>:
    13ae:	86 30       	cpi	r24, 0x06	; 6
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <.Loc.1443>

000013b2 <L0^A>:
    13b2:	23 cf       	rjmp	.-442    	; 0x11fa <.L169>

000013b4 <.Loc.1443>:
                motors_on();
    13b4:	53 9a       	sbi	0x0a, 3	; 10

000013b6 <.Loc.1444>:
    13b6:	23 9a       	sbi	0x04, 3	; 4

000013b8 <.Loc.1445>:
    13b8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

000013bc <.Loc.1446>:
    13bc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

000013c0 <.Loc.1447>:
                kilo_state = MOVING;
    13c0:	86 e0       	ldi	r24, 0x06	; 6
    13c2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    13c6:	19 cf       	rjmp	.-462    	; 0x11fa <.L169>

000013c8 <.L183>:
            if (kilo_state != MOVING) {
    13c8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>

000013cc <.Loc.1452>:
    13cc:	86 30       	cpi	r24, 0x06	; 6
    13ce:	79 f0       	breq	.+30     	; 0x13ee <.L201>

000013d0 <.Loc.1453>:
                motors_on();
    13d0:	53 9a       	sbi	0x0a, 3	; 10

000013d2 <.Loc.1454>:
    13d2:	23 9a       	sbi	0x04, 3	; 4

000013d4 <.Loc.1455>:
    13d4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

000013d8 <.Loc.1456>:
    13d8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

000013dc <.Loc.1457>:
                set_color(RGB(0,0,0));
    13dc:	0e 94 96 00 	call	0x12c	; 0x12c <set_color.constprop.6>

000013e0 <.LVL242>:
                prev_motion = cur_motion = MOVE_STOP;
    13e0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>

000013e4 <.Loc.1461>:
    13e4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>

000013e8 <.Loc.1462>:
                kilo_state = MOVING;
    13e8:	86 e0       	ldi	r24, 0x06	; 6
    13ea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>

000013ee <.L201>:
            if (kilo_uid&(1<<rx_msg.data[0]))
    13ee:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <rx_msg>

000013f2 <.Loc.1466>:
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <.L2^B3>

000013f8 <.L1^B29>:
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25

000013fc <.L2^B3>:
    13fc:	2a 95       	dec	r18
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <.L1^B29>

00001400 <.Loc.1467>:
    1400:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <kilo_uid>
    1404:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <kilo_uid+0x1>
    1408:	82 23       	and	r24, r18
    140a:	93 23       	and	r25, r19

0000140c <.Loc.1468>:
    140c:	89 2b       	or	r24, r25
    140e:	09 f4       	brne	.+2      	; 0x1412 <.Loc.1469>

00001410 <L0^A>:
    1410:	79 c0       	rjmp	.+242    	; 0x1504 <.L202>

00001412 <.Loc.1469>:
                cur_motion = MOVE_LEFT;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cur_motion>
    1418:	f0 ce       	rjmp	.-544    	; 0x11fa <.L169>

0000141a <.L185>:
            kilo_state = BATTERY;
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>

00001420 <.Loc.1473>:
            break;
    1420:	ec ce       	rjmp	.-552    	; 0x11fa <.L169>

00001422 <.L186>:
            kilo_state = CHARGING;
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>

00001428 <.Loc.1476>:
            break;
    1428:	e8 ce       	rjmp	.-560    	; 0x11fa <.L169>

0000142a <.L187>:
            kilo_state = IDLE;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>

00001430 <.Loc.1479>:
            break;
    1430:	e4 ce       	rjmp	.-568    	; 0x11fa <.L169>

00001432 <.L188>:
            kilo_state = SLEEPING;
    1432:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <kilo_state>

00001436 <.Loc.1483>:
            break;
    1436:	e1 ce       	rjmp	.-574    	; 0x11fa <.L169>

00001438 <.L184>:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1438:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>

0000143c <.Loc.1486>:
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	09 f4       	brne	.+2      	; 0x1442 <.Loc.1487>

00001440 <L0^A>:
    1440:	dc ce       	rjmp	.-584    	; 0x11fa <.L169>

00001442 <.Loc.1487>:
    1442:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>

00001446 <.Loc.1488>:
    1446:	84 30       	cpi	r24, 0x04	; 4
    1448:	09 f4       	brne	.+2      	; 0x144c <.Loc.1489>

0000144a <L0^A>:
    144a:	d7 ce       	rjmp	.-594    	; 0x11fa <.L169>

0000144c <.Loc.1489>:
                motors_on();
    144c:	53 9a       	sbi	0x0a, 3	; 10

0000144e <.Loc.1490>:
    144e:	23 9a       	sbi	0x04, 3	; 4

00001450 <.Loc.1491>:
    1450:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

00001454 <.Loc.1492>:
    1454:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

00001458 <.Loc.1493>:
                kilo_state = SETUP;
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    145e:	cd ce       	rjmp	.-614    	; 0x11fa <.L169>

00001460 <.L192>:
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	61 f1       	breq	.+88     	; 0x14bc <.L195>
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	09 f0       	breq	.+2      	; 0x146a <.Loc.1496>

00001468 <L0^A>:
    1468:	a0 cf       	rjmp	.-192    	; 0x13aa <.L197>

0000146a <.Loc.1496>:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    146a:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <cur_motion>
    146e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_msg+0x6>
    1472:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rx_msg+0x5>

00001476 <.Loc.1498>:
    1476:	23 30       	cpi	r18, 0x03	; 3
    1478:	c1 f0       	breq	.+48     	; 0x14aa <.L220>

0000147a <.L200>:
                        prev_motion = MOVE_STOP;
    147a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>

0000147e <.Loc.1501>:
                        cur_motion = MOVE_STRAIGHT;
    147e:	23 e0       	ldi	r18, 0x03	; 3
    1480:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cur_motion>

00001484 <.Loc.1503>:
                        kilo_straight_left = calibmsg->straight_left;
    1484:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <kilo_straight_left>

00001488 <.Loc.1505>:
                        kilo_straight_right = calibmsg->straight_right;
    1488:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
    148c:	8e cf       	rjmp	.-228    	; 0x13aa <.L197>

0000148e <.L191>:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    148e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
    1492:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_msg+0x3>

00001496 <.Loc.1509>:
    1496:	91 30       	cpi	r25, 0x01	; 1
    1498:	f9 f0       	breq	.+62     	; 0x14d8 <.L221>

0000149a <.L198>:
                        prev_motion = MOVE_STOP;
    149a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>

0000149e <.Loc.1512>:
                        cur_motion = MOVE_LEFT;
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>

000014a4 <.Loc.1514>:
                        kilo_turn_left = calibmsg->turn_left;
    14a4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
    14a8:	80 cf       	rjmp	.-256    	; 0x13aa <.L197>

000014aa <.L220>:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    14aa:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <kilo_straight_right>
    14ae:	28 13       	cpse	r18, r24
    14b0:	e4 cf       	rjmp	.-56     	; 0x147a <.L200>

000014b2 <.Loc.1517>:
    14b2:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <kilo_straight_left>
    14b6:	29 13       	cpse	r18, r25
    14b8:	e0 cf       	rjmp	.-64     	; 0x147a <.L200>
    14ba:	77 cf       	rjmp	.-274    	; 0x13aa <.L197>

000014bc <.L195>:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14bc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
    14c0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg+0x4>

000014c4 <.Loc.1520>:
    14c4:	92 30       	cpi	r25, 0x02	; 2
    14c6:	69 f0       	breq	.+26     	; 0x14e2 <.L222>

000014c8 <.L199>:
                        prev_motion = MOVE_STOP;
    14c8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>

000014cc <.Loc.1523>:
                        cur_motion = MOVE_RIGHT;
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>

000014d2 <.Loc.1525>:
                        kilo_turn_right = calibmsg->turn_right;
    14d2:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
    14d6:	69 cf       	rjmp	.-302    	; 0x13aa <.L197>

000014d8 <.L221>:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    14d8:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <kilo_turn_left>
    14dc:	98 13       	cpse	r25, r24
    14de:	dd cf       	rjmp	.-70     	; 0x149a <.L198>
    14e0:	64 cf       	rjmp	.-312    	; 0x13aa <.L197>

000014e2 <.L222>:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    14e2:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_turn_right>
    14e6:	98 13       	cpse	r25, r24
    14e8:	ef cf       	rjmp	.-34     	; 0x14c8 <.L199>
    14ea:	5f cf       	rjmp	.-322    	; 0x13aa <.L197>

000014ec <.L189>:
            reset();
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	e0 e0       	ldi	r30, 0x00	; 0
    14f0:	09 95       	icall

000014f2 <.L190>:
            tx_timer_off();
    14f2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    14f6:	8d 7f       	andi	r24, 0xFD	; 253
    14f8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>

000014fc <.Loc.1532>:
    14fc:	16 bc       	out	0x26, r1	; 38

000014fe <.Loc.1533>:
            bootload();
    14fe:	e0 e0       	ldi	r30, 0x00	; 0
    1500:	f0 e7       	ldi	r31, 0x70	; 112
    1502:	09 95       	icall

00001504 <.L202>:
                cur_motion = MOVE_STOP;
    1504:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>

00001508 <.LBE351>:
}
    1508:	78 ce       	rjmp	.-784    	; 0x11fa <.L169>

0000150a <.L219>:
                    if (kilo_state == MOVING) {
    150a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>

0000150e <.Loc.1540>:
    150e:	86 30       	cpi	r24, 0x06	; 6
    1510:	09 f0       	breq	.+2      	; 0x1514 <.Loc.1541>

00001512 <L0^A>:
    1512:	73 ce       	rjmp	.-794    	; 0x11fa <.L169>

00001514 <.Loc.1541>:
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1514:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_uid>
    1518:	80 eb       	ldi	r24, 0xB0	; 176
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <eeprom_write_byte>

00001520 <.LVL245>:
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1520:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_uid+0x1>

00001524 <.Loc.1544>:
    1524:	81 eb       	ldi	r24, 0xB1	; 177
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <eeprom_write_byte>

0000152c <.LVL246>:
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    152c:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <kilo_turn_left>
    1530:	85 e0       	ldi	r24, 0x05	; 5
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <eeprom_write_byte>

00001538 <.LVL247>:
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1538:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <kilo_turn_right>
    153c:	89 e0       	ldi	r24, 0x09	; 9
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <eeprom_write_byte>

00001544 <.LVL248>:
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1544:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_straight_left>
    1548:	8c e0       	ldi	r24, 0x0C	; 12
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <eeprom_write_byte>

00001550 <.LVL249>:
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1550:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_straight_right>
    1554:	84 e1       	ldi	r24, 0x14	; 20
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <eeprom_write_byte>

0000155c <.LVL250>:
                        motors_off();
    155c:	53 98       	cbi	0x0a, 3	; 10

0000155e <.Loc.1550>:
    155e:	23 98       	cbi	0x04, 3	; 4

00001560 <.Loc.1551>:
    1560:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>

00001564 <.Loc.1552>:
    1564:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

00001568 <.Loc.1553>:
                        kilo_state = IDLE;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>

0000156e <.Loc.1556>:
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    156e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
    1572:	88 23       	and	r24, r24
    1574:	09 f4       	brne	.+2      	; 0x1578 <L0^A+0x2>

00001576 <L0^A>:
    1576:	41 ce       	rjmp	.-894    	; 0x11fa <.L169>
    1578:	18 cf       	rjmp	.-464    	; 0x13aa <.L197>

0000157a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    157a:	fc 01       	movw	r30, r24

0000157c <.LBB4>:
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    157c:	20 81       	ld	r18, Z
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f ef       	ldi	r25, 0xFF	; 255

00001582 <.LVL2>:
    1582:	82 27       	eor	r24, r18
    1584:	08 2e       	mov	r0, r24
    1586:	82 95       	swap	r24
    1588:	80 7f       	andi	r24, 0xF0	; 240
    158a:	80 25       	eor	r24, r0
    158c:	09 2e       	mov	r0, r25
    158e:	98 2f       	mov	r25, r24
    1590:	82 95       	swap	r24
    1592:	8f 70       	andi	r24, 0x0F	; 15
    1594:	08 26       	eor	r0, r24
    1596:	86 95       	lsr	r24
    1598:	98 27       	eor	r25, r24
    159a:	89 27       	eor	r24, r25
    159c:	88 0f       	add	r24, r24
    159e:	88 0f       	add	r24, r24
    15a0:	88 0f       	add	r24, r24
    15a2:	80 25       	eor	r24, r0

000015a4 <.LBB15>:
    15a4:	21 81       	ldd	r18, Z+1	; 0x01
    15a6:	82 27       	eor	r24, r18
    15a8:	08 2e       	mov	r0, r24
    15aa:	82 95       	swap	r24
    15ac:	80 7f       	andi	r24, 0xF0	; 240
    15ae:	80 25       	eor	r24, r0
    15b0:	09 2e       	mov	r0, r25
    15b2:	98 2f       	mov	r25, r24
    15b4:	82 95       	swap	r24
    15b6:	8f 70       	andi	r24, 0x0F	; 15
    15b8:	08 26       	eor	r0, r24
    15ba:	86 95       	lsr	r24
    15bc:	98 27       	eor	r25, r24
    15be:	89 27       	eor	r24, r25
    15c0:	88 0f       	add	r24, r24
    15c2:	88 0f       	add	r24, r24
    15c4:	88 0f       	add	r24, r24
    15c6:	80 25       	eor	r24, r0

000015c8 <.LBB16>:
    15c8:	22 81       	ldd	r18, Z+2	; 0x02
    15ca:	82 27       	eor	r24, r18
    15cc:	08 2e       	mov	r0, r24
    15ce:	82 95       	swap	r24
    15d0:	80 7f       	andi	r24, 0xF0	; 240
    15d2:	80 25       	eor	r24, r0
    15d4:	09 2e       	mov	r0, r25
    15d6:	98 2f       	mov	r25, r24
    15d8:	82 95       	swap	r24
    15da:	8f 70       	andi	r24, 0x0F	; 15
    15dc:	08 26       	eor	r0, r24
    15de:	86 95       	lsr	r24
    15e0:	98 27       	eor	r25, r24
    15e2:	89 27       	eor	r24, r25
    15e4:	88 0f       	add	r24, r24
    15e6:	88 0f       	add	r24, r24
    15e8:	88 0f       	add	r24, r24
    15ea:	80 25       	eor	r24, r0

000015ec <.LBB17>:
    15ec:	23 81       	ldd	r18, Z+3	; 0x03
    15ee:	82 27       	eor	r24, r18
    15f0:	08 2e       	mov	r0, r24
    15f2:	82 95       	swap	r24
    15f4:	80 7f       	andi	r24, 0xF0	; 240
    15f6:	80 25       	eor	r24, r0
    15f8:	09 2e       	mov	r0, r25
    15fa:	98 2f       	mov	r25, r24
    15fc:	82 95       	swap	r24
    15fe:	8f 70       	andi	r24, 0x0F	; 15
    1600:	08 26       	eor	r0, r24
    1602:	86 95       	lsr	r24
    1604:	98 27       	eor	r25, r24
    1606:	89 27       	eor	r24, r25
    1608:	88 0f       	add	r24, r24
    160a:	88 0f       	add	r24, r24
    160c:	88 0f       	add	r24, r24
    160e:	80 25       	eor	r24, r0

00001610 <.LBB18>:
    1610:	24 81       	ldd	r18, Z+4	; 0x04
    1612:	82 27       	eor	r24, r18
    1614:	08 2e       	mov	r0, r24
    1616:	82 95       	swap	r24
    1618:	80 7f       	andi	r24, 0xF0	; 240
    161a:	80 25       	eor	r24, r0
    161c:	09 2e       	mov	r0, r25
    161e:	98 2f       	mov	r25, r24
    1620:	82 95       	swap	r24
    1622:	8f 70       	andi	r24, 0x0F	; 15
    1624:	08 26       	eor	r0, r24
    1626:	86 95       	lsr	r24
    1628:	98 27       	eor	r25, r24
    162a:	89 27       	eor	r24, r25
    162c:	88 0f       	add	r24, r24
    162e:	88 0f       	add	r24, r24
    1630:	88 0f       	add	r24, r24
    1632:	80 25       	eor	r24, r0

00001634 <.LBB19>:
    1634:	25 81       	ldd	r18, Z+5	; 0x05
    1636:	82 27       	eor	r24, r18
    1638:	08 2e       	mov	r0, r24
    163a:	82 95       	swap	r24
    163c:	80 7f       	andi	r24, 0xF0	; 240
    163e:	80 25       	eor	r24, r0
    1640:	09 2e       	mov	r0, r25
    1642:	98 2f       	mov	r25, r24
    1644:	82 95       	swap	r24
    1646:	8f 70       	andi	r24, 0x0F	; 15
    1648:	08 26       	eor	r0, r24
    164a:	86 95       	lsr	r24
    164c:	98 27       	eor	r25, r24
    164e:	89 27       	eor	r24, r25
    1650:	88 0f       	add	r24, r24
    1652:	88 0f       	add	r24, r24
    1654:	88 0f       	add	r24, r24
    1656:	80 25       	eor	r24, r0

00001658 <.LBB20>:
    1658:	26 81       	ldd	r18, Z+6	; 0x06
    165a:	82 27       	eor	r24, r18
    165c:	08 2e       	mov	r0, r24
    165e:	82 95       	swap	r24
    1660:	80 7f       	andi	r24, 0xF0	; 240
    1662:	80 25       	eor	r24, r0
    1664:	09 2e       	mov	r0, r25
    1666:	98 2f       	mov	r25, r24
    1668:	82 95       	swap	r24
    166a:	8f 70       	andi	r24, 0x0F	; 15
    166c:	08 26       	eor	r0, r24
    166e:	86 95       	lsr	r24
    1670:	98 27       	eor	r25, r24
    1672:	89 27       	eor	r24, r25
    1674:	88 0f       	add	r24, r24
    1676:	88 0f       	add	r24, r24
    1678:	88 0f       	add	r24, r24
    167a:	80 25       	eor	r24, r0

0000167c <.LBB21>:
    167c:	27 81       	ldd	r18, Z+7	; 0x07
    167e:	82 27       	eor	r24, r18
    1680:	08 2e       	mov	r0, r24
    1682:	82 95       	swap	r24
    1684:	80 7f       	andi	r24, 0xF0	; 240
    1686:	80 25       	eor	r24, r0
    1688:	09 2e       	mov	r0, r25
    168a:	98 2f       	mov	r25, r24
    168c:	82 95       	swap	r24
    168e:	8f 70       	andi	r24, 0x0F	; 15
    1690:	08 26       	eor	r0, r24
    1692:	86 95       	lsr	r24
    1694:	98 27       	eor	r25, r24
    1696:	89 27       	eor	r24, r25
    1698:	88 0f       	add	r24, r24
    169a:	88 0f       	add	r24, r24
    169c:	88 0f       	add	r24, r24
    169e:	80 25       	eor	r24, r0

000016a0 <.LBB22>:
    16a0:	20 85       	ldd	r18, Z+8	; 0x08
    16a2:	82 27       	eor	r24, r18
    16a4:	08 2e       	mov	r0, r24
    16a6:	82 95       	swap	r24
    16a8:	80 7f       	andi	r24, 0xF0	; 240
    16aa:	80 25       	eor	r24, r0
    16ac:	09 2e       	mov	r0, r25
    16ae:	98 2f       	mov	r25, r24
    16b0:	82 95       	swap	r24
    16b2:	8f 70       	andi	r24, 0x0F	; 15
    16b4:	08 26       	eor	r0, r24
    16b6:	86 95       	lsr	r24
    16b8:	98 27       	eor	r25, r24
    16ba:	89 27       	eor	r24, r25
    16bc:	88 0f       	add	r24, r24
    16be:	88 0f       	add	r24, r24
    16c0:	88 0f       	add	r24, r24
    16c2:	80 25       	eor	r24, r0

000016c4 <.LBB23>:
    16c4:	21 85       	ldd	r18, Z+9	; 0x09
    16c6:	82 27       	eor	r24, r18
    16c8:	08 2e       	mov	r0, r24
    16ca:	82 95       	swap	r24
    16cc:	80 7f       	andi	r24, 0xF0	; 240
    16ce:	80 25       	eor	r24, r0
    16d0:	09 2e       	mov	r0, r25
    16d2:	98 2f       	mov	r25, r24
    16d4:	82 95       	swap	r24
    16d6:	8f 70       	andi	r24, 0x0F	; 15
    16d8:	08 26       	eor	r0, r24
    16da:	86 95       	lsr	r24
    16dc:	98 27       	eor	r25, r24
    16de:	89 27       	eor	r24, r25
    16e0:	88 0f       	add	r24, r24
    16e2:	88 0f       	add	r24, r24
    16e4:	88 0f       	add	r24, r24
    16e6:	80 25       	eor	r24, r0

000016e8 <.LBE23>:
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    16e8:	08 95       	ret

000016ea <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    16ea:	0f b6       	in	r0, 0x3f	; 63

000016ec <.Loc.1>:
#ifndef OHC
    cli
    16ec:	f8 94       	cli

000016ee <.Loc.2>:
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    16ee:	a4 b1       	in	r26, 0x04	; 4

000016f0 <.Loc.3>:

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    16f0:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <tx_mask>

000016f4 <.Loc.4>:
    or tmpreg1, ddrreg
    16f4:	2a 2b       	or	r18, r26

000016f6 <.Loc.5>:
    out IR_DDR, tmpreg1
    16f6:	24 b9       	out	0x04, r18	; 4

000016f8 <.Loc.6>:

    ldi tmpreg1, 0x01
    16f8:	21 e0       	ldi	r18, 0x01	; 1

000016fa <.Loc.7>:
    irsend
    16fa:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    16fe:	20 30       	cpi	r18, 0x00	; 0
    1700:	29 f0       	breq	.+10     	; 0x170c <.L1^B1>
    1702:	00 00       	nop
    1704:	25 b1       	in	r18, 0x05	; 5
    1706:	23 2b       	or	r18, r19
    1708:	25 b9       	out	0x05, r18	; 5
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <.L2^B1>

0000170c <.L1^B1>:
    170c:	00 00       	nop
    170e:	00 00       	nop
    1710:	00 00       	nop
    1712:	00 c0       	rjmp	.+0      	; 0x1714 <.L2^B1>

00001714 <.L2^B1>:
    1714:	00 00       	nop
    1716:	00 00       	nop
    1718:	00 00       	nop
    171a:	30 95       	com	r19
    171c:	25 b1       	in	r18, 0x05	; 5
    171e:	23 23       	and	r18, r19
    1720:	25 b9       	out	0x05, r18	; 5

00001722 <.Loc.8>:
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1722:	2e ea       	ldi	r18, 0xAE	; 174

00001724 <.L1^B2>:
    1724:	2a 95       	dec	r18
    1726:	f1 f7       	brne	.-4      	; 0x1724 <.L1^B2>

00001728 <.Loc.9>:

    ldi tmpreg1, rx_bitcycles*7/8
    1728:	2b ee       	ldi	r18, 0xEB	; 235

0000172a <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    172a:	30 b7       	in	r19, 0x30	; 48

0000172c <.Loc.11>:
    sbrs tmpreg2, ACO
    172c:	35 ff       	sbrs	r19, 5

0000172e <.Loc.12>:
    rjmp nocollision
    172e:	0a c0       	rjmp	.+20     	; 0x1744 <nocollision>

00001730 <.Loc.13>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1730:	a4 b9       	out	0x04, r26	; 4

00001732 <.Loc.14>:
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1732:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>

00001736 <.Loc.15>:
    com tmpreg2
    1736:	30 95       	com	r19

00001738 <.Loc.16>:
    in tmpreg1, IR_PORT
    1738:	25 b1       	in	r18, 0x05	; 5

0000173a <.Loc.17>:
    and tmpreg1, tmpreg2
    173a:	23 23       	and	r18, r19

0000173c <.Loc.18>:
    out IR_PORT, tmpreg1
    173c:	25 b9       	out	0x05, r18	; 5

0000173e <.Loc.19>:
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    173e:	0f be       	out	0x3f, r0	; 63

00001740 <.Loc.20>:
    return 0
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	08 95       	ret

00001744 <nocollision>:
	...

00001746 <.Loc.22>:
nocollision:
    nop
    dec tmpreg1
    1746:	2a 95       	dec	r18

00001748 <.Loc.23>:
    brne checkcollision
    1748:	81 f7       	brne	.-32     	; 0x172a <checkcollision>

0000174a <.Loc.24>:

    ldi tmpreg1, 0x01
    174a:	21 e0       	ldi	r18, 0x01	; 1

0000174c <.Loc.25>:
    irsend
    174c:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    1750:	20 30       	cpi	r18, 0x00	; 0
    1752:	29 f0       	breq	.+10     	; 0x175e <.L1^B3>
    1754:	00 00       	nop
    1756:	25 b1       	in	r18, 0x05	; 5
    1758:	23 2b       	or	r18, r19
    175a:	25 b9       	out	0x05, r18	; 5
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <.L2^B2>

0000175e <.L1^B3>:
    175e:	00 00       	nop
    1760:	00 00       	nop
    1762:	00 00       	nop
    1764:	00 c0       	rjmp	.+0      	; 0x1766 <.L2^B2>

00001766 <.L2^B2>:
    1766:	00 00       	nop
    1768:	00 00       	nop
    176a:	00 00       	nop
    176c:	30 95       	com	r19
    176e:	25 b1       	in	r18, 0x05	; 5
    1770:	23 23       	and	r18, r19
    1772:	25 b9       	out	0x05, r18	; 5

00001774 <.Loc.26>:
    delay_cycles (rx_bitcycles-irsend_cycles)
    1774:	00 00       	nop
    1776:	24 e5       	ldi	r18, 0x54	; 84

00001778 <.L1^B4>:
    1778:	2a 95       	dec	r18
    177a:	f1 f7       	brne	.-4      	; 0x1778 <.L1^B4>

0000177c <.Loc.27>:

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    177c:	fc 01       	movw	r30, r24

0000177e <.Loc.28>:
    ldi byteidx, 12
    177e:	8c e0       	ldi	r24, 0x0C	; 12

00001780 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1780:	61 91       	ld	r22, Z+

00001782 <.Loc.30>:
    ldi bytevalH, 0x00
    1782:	70 e0       	ldi	r23, 0x00	; 0

00001784 <.Loc.31>:
    add bytevalL, bytevalL
    1784:	66 0f       	add	r22, r22

00001786 <.Loc.32>:
    adc bytevalH, bytevalH
    1786:	77 1f       	adc	r23, r23

00001788 <.Loc.33>:
    ori bytevalL, 0x01
    1788:	61 60       	ori	r22, 0x01	; 1

0000178a <.Loc.34>:
    ori bytevalH, 0x02
    178a:	72 60       	ori	r23, 0x02	; 2

0000178c <.Loc.35>:
    ; bitidex = 10
    ldi bitidx, 10
    178c:	9a e0       	ldi	r25, 0x0A	; 10

0000178e <.Loc.36>:
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    178e:	41 e0       	ldi	r20, 0x01	; 1

00001790 <.Loc.37>:
    ldi bitmaskH, 0x00
    1790:	50 e0       	ldi	r21, 0x00	; 0

00001792 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1792:	9a 01       	movw	r18, r20

00001794 <.Loc.39>:
    and tmpreg1, bytevalL
    1794:	26 23       	and	r18, r22

00001796 <.Loc.40>:
    and tmpreg2, bytevalH
    1796:	37 23       	and	r19, r23

00001798 <.Loc.41>:
    or  tmpreg1, tmpreg2
    1798:	23 2b       	or	r18, r19

0000179a <.Loc.42>:

    ; irsend tmpreg
    irsend
    179a:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    179e:	20 30       	cpi	r18, 0x00	; 0
    17a0:	29 f0       	breq	.+10     	; 0x17ac <.L1^B5>
    17a2:	00 00       	nop
    17a4:	25 b1       	in	r18, 0x05	; 5
    17a6:	23 2b       	or	r18, r19
    17a8:	25 b9       	out	0x05, r18	; 5
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <.L2^B3>

000017ac <.L1^B5>:
    17ac:	00 00       	nop
    17ae:	00 00       	nop
    17b0:	00 00       	nop
    17b2:	00 c0       	rjmp	.+0      	; 0x17b4 <.L2^B3>

000017b4 <.L2^B3>:
    17b4:	00 00       	nop
    17b6:	00 00       	nop
    17b8:	00 00       	nop
    17ba:	30 95       	com	r19
    17bc:	25 b1       	in	r18, 0x05	; 5
    17be:	23 23       	and	r18, r19
    17c0:	25 b9       	out	0x05, r18	; 5

000017c2 <.Loc.43>:
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    17c2:	00 00       	nop
    17c4:	21 e5       	ldi	r18, 0x51	; 81

000017c6 <.L1^B6>:
    17c6:	2a 95       	dec	r18
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <.L1^B6>

000017ca <.Loc.44>:

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    17ca:	44 0f       	add	r20, r20

000017cc <.Loc.45>:
    adc bitmaskH, bitmaskH
    17cc:	55 1f       	adc	r21, r21

000017ce <.Loc.46>:

    ; if (bitidex--) goto sendbit
    dec bitidx
    17ce:	9a 95       	dec	r25

000017d0 <.Loc.47>:
    brne sendbit
    17d0:	01 f7       	brne	.-64     	; 0x1792 <sendbit>

000017d2 <.Loc.48>:

    ; if (byteidx--) goto sendbyte
    dec byteidx
    17d2:	8a 95       	dec	r24

000017d4 <.Loc.49>:
    brne sendbyte
    17d4:	a9 f6       	brne	.-86     	; 0x1780 <sendbyte>

000017d6 <.Loc.50>:

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    17d6:	20 b7       	in	r18, 0x30	; 48

000017d8 <.Loc.51>:
    ori tmpreg1, (1<<ACI)
    17d8:	20 61       	ori	r18, 0x10	; 16

000017da <.Loc.52>:
    out ACSR, tmpreg1
    17da:	20 bf       	out	0x30, r18	; 48

000017dc <.Loc.53>:
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    17dc:	a4 b9       	out	0x04, r26	; 4

000017de <.Loc.54>:

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    17de:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>

000017e2 <.Loc.55>:
    com tmpreg2
    17e2:	30 95       	com	r19

000017e4 <.Loc.56>:
    in tmpreg1, IR_PORT
    17e4:	25 b1       	in	r18, 0x05	; 5

000017e6 <.Loc.57>:
    and tmpreg1, tmpreg2
    17e6:	23 23       	and	r18, r19

000017e8 <.Loc.58>:
    out IR_PORT, tmpreg1
    17e8:	25 b9       	out	0x05, r18	; 5

000017ea <.Loc.59>:

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    17ea:	0f be       	out	0x3f, r0	; 63

000017ec <.Loc.60>:
    return 1
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	08 95       	ret

000017f0 <main>:

}
int main() {
    kilo_init();
    17f0:	0e 94 9d 00 	call	0x13a	; 0x13a <kilo_init>

000017f4 <.LVL6>:
    kilo_start(setup, loop);
    17f4:	60 e6       	ldi	r22, 0x60	; 96
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	8f e5       	ldi	r24, 0x5F	; 95
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 97 01 	call	0x32e	; 0x32e <kilo_start>

00001800 <.LVL7>:
    return 0;
}
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	08 95       	ret

00001806 <__divmodhi4>:
    1806:	97 fb       	bst	r25, 7

00001808 <.Loc.1>:
    1808:	07 2e       	mov	r0, r23

0000180a <.Loc.2>:
    180a:	16 f4       	brtc	.+4      	; 0x1810 <.L^B1>

0000180c <.Loc.3>:
    180c:	00 94       	com	r0

0000180e <.Loc.4>:
    180e:	07 d0       	rcall	.+14     	; 0x181e <__divmodhi4_neg1>

00001810 <.L^B1>:
    1810:	77 fd       	sbrc	r23, 7

00001812 <.Loc.6>:
    1812:	09 d0       	rcall	.+18     	; 0x1826 <__divmodhi4_neg2>

00001814 <.Loc.7>:
    1814:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__udivmodhi4>

00001818 <.Loc.8>:
    1818:	07 fc       	sbrc	r0, 7

0000181a <.Loc.9>:
    181a:	05 d0       	rcall	.+10     	; 0x1826 <__divmodhi4_neg2>

0000181c <.Loc.10>:
    181c:	3e f4       	brtc	.+14     	; 0x182c <__divmodhi4_exit>

0000181e <__divmodhi4_neg1>:
    181e:	90 95       	com	r25

00001820 <.Loc.12>:
    1820:	81 95       	neg	r24

00001822 <.Loc.13>:
    1822:	9f 4f       	sbci	r25, 0xFF	; 255

00001824 <.Loc.14>:
    1824:	08 95       	ret

00001826 <__divmodhi4_neg2>:
    1826:	70 95       	com	r23

00001828 <.Loc.16>:
    1828:	61 95       	neg	r22

0000182a <.Loc.17>:
    182a:	7f 4f       	sbci	r23, 0xFF	; 255

0000182c <__divmodhi4_exit>:
    182c:	08 95       	ret

0000182e <__tablejump2__>:
    182e:	ee 0f       	add	r30, r30

00001830 <.Loc.1>:
    1830:	ff 1f       	adc	r31, r31

00001832 <.Loc.2>:
    1832:	05 90       	lpm	r0, Z+

00001834 <.Loc.3>:
    1834:	f4 91       	lpm	r31, Z

00001836 <.Loc.4>:
    1836:	e0 2d       	mov	r30, r0

00001838 <.Loc.5>:
    1838:	09 94       	ijmp

0000183a <__umulhisi3>:
    183a:	a2 9f       	mul	r26, r18

0000183c <.Loc.1>:
    183c:	b0 01       	movw	r22, r0

0000183e <.Loc.2>:
    183e:	b3 9f       	mul	r27, r19

00001840 <.Loc.3>:
    1840:	c0 01       	movw	r24, r0

00001842 <.Loc.4>:
    1842:	a3 9f       	mul	r26, r19

00001844 <.Loc.5>:
    1844:	70 0d       	add	r23, r0

00001846 <.Loc.6>:
    1846:	81 1d       	adc	r24, r1

00001848 <.Loc.7>:
    1848:	11 24       	eor	r1, r1

0000184a <.Loc.8>:
    184a:	91 1d       	adc	r25, r1

0000184c <.Loc.9>:
    184c:	b2 9f       	mul	r27, r18

0000184e <.Loc.10>:
    184e:	70 0d       	add	r23, r0

00001850 <.Loc.11>:
    1850:	81 1d       	adc	r24, r1

00001852 <.Loc.12>:
    1852:	11 24       	eor	r1, r1

00001854 <.Loc.13>:
    1854:	91 1d       	adc	r25, r1

00001856 <.Loc.14>:
    1856:	08 95       	ret

00001858 <__udivmodhi4>:
    1858:	aa 1b       	sub	r26, r26

0000185a <.Loc.1>:
    185a:	bb 1b       	sub	r27, r27

0000185c <.Loc.2>:
    185c:	51 e1       	ldi	r21, 0x11	; 17

0000185e <.Loc.3>:
    185e:	07 c0       	rjmp	.+14     	; 0x186e <__udivmodhi4_ep>

00001860 <__udivmodhi4_loop>:
    1860:	aa 1f       	adc	r26, r26

00001862 <.Loc.5>:
    1862:	bb 1f       	adc	r27, r27

00001864 <.Loc.6>:
    1864:	a6 17       	cp	r26, r22

00001866 <.Loc.7>:
    1866:	b7 07       	cpc	r27, r23

00001868 <.Loc.8>:
    1868:	10 f0       	brcs	.+4      	; 0x186e <__udivmodhi4_ep>

0000186a <.Loc.9>:
    186a:	a6 1b       	sub	r26, r22

0000186c <.Loc.10>:
    186c:	b7 0b       	sbc	r27, r23

0000186e <__udivmodhi4_ep>:
    186e:	88 1f       	adc	r24, r24

00001870 <.Loc.12>:
    1870:	99 1f       	adc	r25, r25

00001872 <.Loc.13>:
    1872:	5a 95       	dec	r21

00001874 <.Loc.14>:
    1874:	a9 f7       	brne	.-22     	; 0x1860 <__udivmodhi4_loop>

00001876 <.Loc.15>:
    1876:	80 95       	com	r24

00001878 <.Loc.16>:
    1878:	90 95       	com	r25

0000187a <.Loc.17>:
    187a:	bc 01       	movw	r22, r24

0000187c <.Loc.18>:
    187c:	cd 01       	movw	r24, r26

0000187e <.Loc.19>:
    187e:	08 95       	ret

00001880 <__subsf3>:
    1880:	50 58       	subi	r21, 0x80	; 128

00001882 <__addsf3>:
    1882:	bb 27       	eor	r27, r27
    1884:	aa 27       	eor	r26, r26
    1886:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__addsf3x>
    188a:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__fp_round>

0000188e <.L^B1>:
    188e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fp_pscA>
    1892:	38 f0       	brcs	.+14     	; 0x18a2 <.L_nan>
    1894:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fp_pscB>
    1898:	20 f0       	brcs	.+8      	; 0x18a2 <.L_nan>
    189a:	39 f4       	brne	.+14     	; 0x18aa <.L_inf>
    189c:	9f 3f       	cpi	r25, 0xFF	; 255
    189e:	19 f4       	brne	.+6      	; 0x18a6 <.L_infB>
    18a0:	26 f4       	brtc	.+8      	; 0x18aa <.L_inf>

000018a2 <.L_nan>:
    18a2:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_nan>

000018a6 <.L_infB>:
    18a6:	0e f4       	brtc	.+2      	; 0x18aa <.L_inf>
    18a8:	e0 95       	com	r30

000018aa <.L_inf>:
    18aa:	e7 fb       	bst	r30, 7
    18ac:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__fp_inf>

000018b0 <__addsf3x>:
    18b0:	e9 2f       	mov	r30, r25
    18b2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__fp_split3>
    18b6:	58 f3       	brcs	.-42     	; 0x188e <.L^B1>
    18b8:	ba 17       	cp	r27, r26
    18ba:	62 07       	cpc	r22, r18
    18bc:	73 07       	cpc	r23, r19
    18be:	84 07       	cpc	r24, r20
    18c0:	95 07       	cpc	r25, r21
    18c2:	20 f0       	brcs	.+8      	; 0x18cc <.L2^B1>
    18c4:	79 f4       	brne	.+30     	; 0x18e4 <.L4^B1>
    18c6:	a6 f5       	brtc	.+104    	; 0x1930 <.L_add>
    18c8:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__fp_zero>

000018cc <.L2^B1>:
    18cc:	0e f4       	brtc	.+2      	; 0x18d0 <.L3^B1>
    18ce:	e0 95       	com	r30

000018d0 <.L3^B1>:
    18d0:	0b 2e       	mov	r0, r27
    18d2:	ba 2f       	mov	r27, r26
    18d4:	a0 2d       	mov	r26, r0
    18d6:	0b 01       	movw	r0, r22
    18d8:	b9 01       	movw	r22, r18
    18da:	90 01       	movw	r18, r0
    18dc:	0c 01       	movw	r0, r24
    18de:	ca 01       	movw	r24, r20
    18e0:	a0 01       	movw	r20, r0
    18e2:	11 24       	eor	r1, r1

000018e4 <.L4^B1>:
    18e4:	ff 27       	eor	r31, r31
    18e6:	59 1b       	sub	r21, r25

000018e8 <.L5^B1>:
    18e8:	99 f0       	breq	.+38     	; 0x1910 <.L7^B1>
    18ea:	59 3f       	cpi	r21, 0xF9	; 249
    18ec:	50 f4       	brcc	.+20     	; 0x1902 <.L6^B1>
    18ee:	50 3e       	cpi	r21, 0xE0	; 224
    18f0:	68 f1       	brcs	.+90     	; 0x194c <.L_ret>
    18f2:	1a 16       	cp	r1, r26
    18f4:	f0 40       	sbci	r31, 0x00	; 0
    18f6:	a2 2f       	mov	r26, r18
    18f8:	23 2f       	mov	r18, r19
    18fa:	34 2f       	mov	r19, r20
    18fc:	44 27       	eor	r20, r20
    18fe:	58 5f       	subi	r21, 0xF8	; 248
    1900:	f3 cf       	rjmp	.-26     	; 0x18e8 <.L5^B1>

00001902 <.L6^B1>:
    1902:	46 95       	lsr	r20
    1904:	37 95       	ror	r19
    1906:	27 95       	ror	r18
    1908:	a7 95       	ror	r26
    190a:	f0 40       	sbci	r31, 0x00	; 0
    190c:	53 95       	inc	r21
    190e:	c9 f7       	brne	.-14     	; 0x1902 <.L6^B1>

00001910 <.L7^B1>:
    1910:	7e f4       	brtc	.+30     	; 0x1930 <.L_add>
    1912:	1f 16       	cp	r1, r31
    1914:	ba 0b       	sbc	r27, r26
    1916:	62 0b       	sbc	r22, r18
    1918:	73 0b       	sbc	r23, r19
    191a:	84 0b       	sbc	r24, r20
    191c:	ba f0       	brmi	.+46     	; 0x194c <.L_ret>

0000191e <.L8^B1>:
    191e:	91 50       	subi	r25, 0x01	; 1
    1920:	a1 f0       	breq	.+40     	; 0x194a <.L9^B1>
    1922:	ff 0f       	add	r31, r31
    1924:	bb 1f       	adc	r27, r27
    1926:	66 1f       	adc	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	88 1f       	adc	r24, r24
    192c:	c2 f7       	brpl	.-16     	; 0x191e <.L8^B1>
    192e:	0e c0       	rjmp	.+28     	; 0x194c <.L_ret>

00001930 <.L_add>:
    1930:	ba 0f       	add	r27, r26
    1932:	62 1f       	adc	r22, r18
    1934:	73 1f       	adc	r23, r19
    1936:	84 1f       	adc	r24, r20
    1938:	48 f4       	brcc	.+18     	; 0x194c <.L_ret>
    193a:	87 95       	ror	r24
    193c:	77 95       	ror	r23
    193e:	67 95       	ror	r22
    1940:	b7 95       	ror	r27
    1942:	f7 95       	ror	r31
    1944:	9e 3f       	cpi	r25, 0xFE	; 254
    1946:	08 f0       	brcs	.+2      	; 0x194a <.L9^B1>
    1948:	b0 cf       	rjmp	.-160    	; 0x18aa <.L_inf>

0000194a <.L9^B1>:
    194a:	93 95       	inc	r25

0000194c <.L_ret>:
    194c:	88 0f       	add	r24, r24
    194e:	08 f0       	brcs	.+2      	; 0x1952 <.L1^B1>
    1950:	99 27       	eor	r25, r25

00001952 <.L1^B1>:
    1952:	ee 0f       	add	r30, r30
    1954:	97 95       	ror	r25
    1956:	87 95       	ror	r24
    1958:	08 95       	ret

0000195a <__divsf3>:
    195a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__divsf3x>
    195e:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__fp_round>

00001962 <.L^B1>:
    1962:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fp_pscB>
    1966:	58 f0       	brcs	.+22     	; 0x197e <.L_nan>
    1968:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fp_pscA>
    196c:	40 f0       	brcs	.+16     	; 0x197e <.L_nan>
    196e:	29 f4       	brne	.+10     	; 0x197a <.L_zr>
    1970:	5f 3f       	cpi	r21, 0xFF	; 255
    1972:	29 f0       	breq	.+10     	; 0x197e <.L_nan>

00001974 <.L_inf>:
    1974:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__fp_inf>

00001978 <.L1^B1>:
    1978:	51 11       	cpse	r21, r1

0000197a <.L_zr>:
    197a:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_szero>

0000197e <.L_nan>:
    197e:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_nan>

00001982 <__divsf3x>:
    1982:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__fp_split3>
    1986:	68 f3       	brcs	.-38     	; 0x1962 <.L^B1>

00001988 <__divsf3_pse>:
    1988:	99 23       	and	r25, r25
    198a:	b1 f3       	breq	.-20     	; 0x1978 <.L1^B1>
    198c:	55 23       	and	r21, r21
    198e:	91 f3       	breq	.-28     	; 0x1974 <.L_inf>
    1990:	95 1b       	sub	r25, r21
    1992:	55 0b       	sbc	r21, r21
    1994:	bb 27       	eor	r27, r27
    1996:	aa 27       	eor	r26, r26

00001998 <.L2^B1>:
    1998:	62 17       	cp	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	38 f0       	brcs	.+14     	; 0x19ae <.L3^B1>
    19a0:	9f 5f       	subi	r25, 0xFF	; 255
    19a2:	5f 4f       	sbci	r21, 0xFF	; 255
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	44 1f       	adc	r20, r20
    19aa:	aa 1f       	adc	r26, r26
    19ac:	a9 f3       	breq	.-22     	; 0x1998 <.L2^B1>

000019ae <.L3^B1>:
    19ae:	35 d0       	rcall	.+106    	; 0x1a1a <.L_div>
    19b0:	0e 2e       	mov	r0, r30
    19b2:	3a f0       	brmi	.+14     	; 0x19c2 <.L5^B1>

000019b4 <.L4^B1>:
    19b4:	e0 e8       	ldi	r30, 0x80	; 128
    19b6:	32 d0       	rcall	.+100    	; 0x1a1c <.L_div1>
    19b8:	91 50       	subi	r25, 0x01	; 1
    19ba:	50 40       	sbci	r21, 0x00	; 0
    19bc:	e6 95       	lsr	r30
    19be:	00 1c       	adc	r0, r0
    19c0:	ca f7       	brpl	.-14     	; 0x19b4 <.L4^B1>

000019c2 <.L5^B1>:
    19c2:	2b d0       	rcall	.+86     	; 0x1a1a <.L_div>
    19c4:	fe 2f       	mov	r31, r30
    19c6:	29 d0       	rcall	.+82     	; 0x1a1a <.L_div>
    19c8:	66 0f       	add	r22, r22
    19ca:	77 1f       	adc	r23, r23
    19cc:	88 1f       	adc	r24, r24
    19ce:	bb 1f       	adc	r27, r27
    19d0:	26 17       	cp	r18, r22
    19d2:	37 07       	cpc	r19, r23
    19d4:	48 07       	cpc	r20, r24
    19d6:	ab 07       	cpc	r26, r27
    19d8:	b0 e8       	ldi	r27, 0x80	; 128
    19da:	09 f0       	breq	.+2      	; 0x19de <.L4^B2>
    19dc:	bb 0b       	sbc	r27, r27

000019de <.L4^B2>:
    19de:	80 2d       	mov	r24, r0
    19e0:	bf 01       	movw	r22, r30
    19e2:	ff 27       	eor	r31, r31
    19e4:	93 58       	subi	r25, 0x83	; 131
    19e6:	5f 4f       	sbci	r21, 0xFF	; 255
    19e8:	3a f0       	brmi	.+14     	; 0x19f8 <.L13^B1>
    19ea:	9e 3f       	cpi	r25, 0xFE	; 254
    19ec:	51 05       	cpc	r21, r1
    19ee:	78 f0       	brcs	.+30     	; 0x1a0e <.L15^B1>
    19f0:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__fp_inf>

000019f4 <.L12^B1>:
    19f4:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_szero>

000019f8 <.L13^B1>:
    19f8:	5f 3f       	cpi	r21, 0xFF	; 255
    19fa:	e4 f3       	brlt	.-8      	; 0x19f4 <.L12^B1>
    19fc:	98 3e       	cpi	r25, 0xE8	; 232
    19fe:	d4 f3       	brlt	.-12     	; 0x19f4 <.L12^B1>

00001a00 <.L14^B1>:
    1a00:	86 95       	lsr	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	b7 95       	ror	r27
    1a08:	f7 95       	ror	r31
    1a0a:	9f 5f       	subi	r25, 0xFF	; 255
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <.L14^B1>

00001a0e <.L15^B1>:
    1a0e:	88 0f       	add	r24, r24
    1a10:	91 1d       	adc	r25, r1
    1a12:	96 95       	lsr	r25
    1a14:	87 95       	ror	r24
    1a16:	97 f9       	bld	r25, 7
    1a18:	08 95       	ret

00001a1a <.L_div>:
    1a1a:	e1 e0       	ldi	r30, 0x01	; 1

00001a1c <.L_div1>:
    1a1c:	66 0f       	add	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	88 1f       	adc	r24, r24
    1a22:	bb 1f       	adc	r27, r27
    1a24:	62 17       	cp	r22, r18
    1a26:	73 07       	cpc	r23, r19
    1a28:	84 07       	cpc	r24, r20
    1a2a:	ba 07       	cpc	r27, r26
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <.L2^B2>
    1a2e:	62 1b       	sub	r22, r18
    1a30:	73 0b       	sbc	r23, r19
    1a32:	84 0b       	sbc	r24, r20
    1a34:	ba 0b       	sbc	r27, r26

00001a36 <.L2^B2>:
    1a36:	ee 1f       	adc	r30, r30
    1a38:	88 f7       	brcc	.-30     	; 0x1a1c <.L_div1>
    1a3a:	e0 95       	com	r30
    1a3c:	08 95       	ret

00001a3e <__fixsfsi>:
    1a3e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fixunssfsi>
    1a42:	68 94       	set
    1a44:	b1 11       	cpse	r27, r1
    1a46:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_szero>
    1a4a:	08 95       	ret

00001a4c <__fixunssfsi>:
    1a4c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__fp_splitA>
    1a50:	88 f0       	brcs	.+34     	; 0x1a74 <.L_err>
    1a52:	9f 57       	subi	r25, 0x7F	; 127
    1a54:	98 f0       	brcs	.+38     	; 0x1a7c <.L_zr>
    1a56:	b9 2f       	mov	r27, r25
    1a58:	99 27       	eor	r25, r25
    1a5a:	b7 51       	subi	r27, 0x17	; 23
    1a5c:	b0 f0       	brcs	.+44     	; 0x1a8a <.L4^B1>
    1a5e:	e1 f0       	breq	.+56     	; 0x1a98 <.L_sign>

00001a60 <.L1^B1>:
    1a60:	66 0f       	add	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	1a f0       	brmi	.+6      	; 0x1a70 <.L2^B1>
    1a6a:	ba 95       	dec	r27
    1a6c:	c9 f7       	brne	.-14     	; 0x1a60 <.L1^B1>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <.L_sign>

00001a70 <.L2^B1>:
    1a70:	b1 30       	cpi	r27, 0x01	; 1
    1a72:	91 f0       	breq	.+36     	; 0x1a98 <.L_sign>

00001a74 <.L_err>:
    1a74:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_zero>
    1a78:	b1 e0       	ldi	r27, 0x01	; 1
    1a7a:	08 95       	ret

00001a7c <.L_zr>:
    1a7c:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__fp_zero>

00001a80 <.L3^B1>:
    1a80:	67 2f       	mov	r22, r23
    1a82:	78 2f       	mov	r23, r24
    1a84:	88 27       	eor	r24, r24
    1a86:	b8 5f       	subi	r27, 0xF8	; 248
    1a88:	39 f0       	breq	.+14     	; 0x1a98 <.L_sign>

00001a8a <.L4^B1>:
    1a8a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a8c:	cc f3       	brlt	.-14     	; 0x1a80 <.L3^B1>

00001a8e <.L5^B1>:
    1a8e:	86 95       	lsr	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	b3 95       	inc	r27
    1a96:	d9 f7       	brne	.-10     	; 0x1a8e <.L5^B1>

00001a98 <.L_sign>:
    1a98:	3e f4       	brtc	.+14     	; 0x1aa8 <.L6^B1>
    1a9a:	90 95       	com	r25
    1a9c:	80 95       	com	r24
    1a9e:	70 95       	com	r23
    1aa0:	61 95       	neg	r22
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255

00001aa8 <.L6^B1>:
    1aa8:	08 95       	ret

00001aaa <__floatunsisf>:
    1aaa:	e8 94       	clt
    1aac:	09 c0       	rjmp	.+18     	; 0x1ac0 <.L1^B1>

00001aae <__floatsisf>:
    1aae:	97 fb       	bst	r25, 7
    1ab0:	3e f4       	brtc	.+14     	; 0x1ac0 <.L1^B1>
    1ab2:	90 95       	com	r25
    1ab4:	80 95       	com	r24
    1ab6:	70 95       	com	r23
    1ab8:	61 95       	neg	r22
    1aba:	7f 4f       	sbci	r23, 0xFF	; 255
    1abc:	8f 4f       	sbci	r24, 0xFF	; 255
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255

00001ac0 <.L1^B1>:
    1ac0:	99 23       	and	r25, r25
    1ac2:	a9 f0       	breq	.+42     	; 0x1aee <.L4^B1>
    1ac4:	f9 2f       	mov	r31, r25
    1ac6:	96 e9       	ldi	r25, 0x96	; 150
    1ac8:	bb 27       	eor	r27, r27

00001aca <.L2^B1>:
    1aca:	93 95       	inc	r25
    1acc:	f6 95       	lsr	r31
    1ace:	87 95       	ror	r24
    1ad0:	77 95       	ror	r23
    1ad2:	67 95       	ror	r22
    1ad4:	b7 95       	ror	r27
    1ad6:	f1 11       	cpse	r31, r1
    1ad8:	f8 cf       	rjmp	.-16     	; 0x1aca <.L2^B1>
    1ada:	fa f4       	brpl	.+62     	; 0x1b1a <.L_pack>
    1adc:	bb 0f       	add	r27, r27
    1ade:	11 f4       	brne	.+4      	; 0x1ae4 <.L3^B1>
    1ae0:	60 ff       	sbrs	r22, 0
    1ae2:	1b c0       	rjmp	.+54     	; 0x1b1a <.L_pack>

00001ae4 <.L3^B1>:
    1ae4:	6f 5f       	subi	r22, 0xFF	; 255
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	16 c0       	rjmp	.+44     	; 0x1b1a <.L_pack>

00001aee <.L4^B1>:
    1aee:	88 23       	and	r24, r24
    1af0:	11 f0       	breq	.+4      	; 0x1af6 <.L5^B1>
    1af2:	96 e9       	ldi	r25, 0x96	; 150
    1af4:	11 c0       	rjmp	.+34     	; 0x1b18 <.L8^B1>

00001af6 <.L5^B1>:
    1af6:	77 23       	and	r23, r23
    1af8:	21 f0       	breq	.+8      	; 0x1b02 <.L6^B1>
    1afa:	9e e8       	ldi	r25, 0x8E	; 142
    1afc:	87 2f       	mov	r24, r23
    1afe:	76 2f       	mov	r23, r22
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <.L7^B1>

00001b02 <.L6^B1>:
    1b02:	66 23       	and	r22, r22
    1b04:	71 f0       	breq	.+28     	; 0x1b22 <.L9^B1>
    1b06:	96 e8       	ldi	r25, 0x86	; 134
    1b08:	86 2f       	mov	r24, r22
    1b0a:	70 e0       	ldi	r23, 0x00	; 0

00001b0c <.L7^B1>:
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	2a f0       	brmi	.+10     	; 0x1b1a <.L_pack>

00001b10 <.L10^B1>:
    1b10:	9a 95       	dec	r25
    1b12:	66 0f       	add	r22, r22
    1b14:	77 1f       	adc	r23, r23
    1b16:	88 1f       	adc	r24, r24

00001b18 <.L8^B1>:
    1b18:	da f7       	brpl	.-10     	; 0x1b10 <.L10^B1>

00001b1a <.L_pack>:
    1b1a:	88 0f       	add	r24, r24
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	97 f9       	bld	r25, 7

00001b22 <.L9^B1>:
    1b22:	08 95       	ret

00001b24 <__fp_inf>:
    1b24:	97 f9       	bld	r25, 7
    1b26:	9f 67       	ori	r25, 0x7F	; 127
    1b28:	80 e8       	ldi	r24, 0x80	; 128
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	08 95       	ret

00001b30 <__fp_nan>:
    1b30:	9f ef       	ldi	r25, 0xFF	; 255
    1b32:	80 ec       	ldi	r24, 0xC0	; 192
    1b34:	08 95       	ret

00001b36 <__fp_pscA>:
    1b36:	00 24       	eor	r0, r0
    1b38:	0a 94       	dec	r0
    1b3a:	16 16       	cp	r1, r22
    1b3c:	17 06       	cpc	r1, r23
    1b3e:	18 06       	cpc	r1, r24
    1b40:	09 06       	cpc	r0, r25
    1b42:	08 95       	ret

00001b44 <__fp_pscB>:
    1b44:	00 24       	eor	r0, r0
    1b46:	0a 94       	dec	r0
    1b48:	12 16       	cp	r1, r18
    1b4a:	13 06       	cpc	r1, r19
    1b4c:	14 06       	cpc	r1, r20
    1b4e:	05 06       	cpc	r0, r21
    1b50:	08 95       	ret

00001b52 <__fp_round>:
    1b52:	09 2e       	mov	r0, r25
    1b54:	03 94       	inc	r0
    1b56:	00 0c       	add	r0, r0
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <.L1^B1>
    1b5a:	88 23       	and	r24, r24
    1b5c:	52 f0       	brmi	.+20     	; 0x1b72 <.L3^B1>

00001b5e <.L1^B1>:
    1b5e:	bb 0f       	add	r27, r27
    1b60:	40 f4       	brcc	.+16     	; 0x1b72 <.L3^B1>
    1b62:	bf 2b       	or	r27, r31
    1b64:	11 f4       	brne	.+4      	; 0x1b6a <.L2^B1>
    1b66:	60 ff       	sbrs	r22, 0
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <.L3^B1>

00001b6a <.L2^B1>:
    1b6a:	6f 5f       	subi	r22, 0xFF	; 255
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255

00001b72 <.L3^B1>:
    1b72:	08 95       	ret

00001b74 <__fp_split3>:
    1b74:	57 fd       	sbrc	r21, 7
    1b76:	90 58       	subi	r25, 0x80	; 128
    1b78:	44 0f       	add	r20, r20
    1b7a:	55 1f       	adc	r21, r21
    1b7c:	59 f0       	breq	.+22     	; 0x1b94 <.L4^B1>
    1b7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b80:	71 f0       	breq	.+28     	; 0x1b9e <.L5^B1>

00001b82 <.L1^B1>:
    1b82:	47 95       	ror	r20

00001b84 <__fp_splitA>:
    1b84:	88 0f       	add	r24, r24
    1b86:	97 fb       	bst	r25, 7
    1b88:	99 1f       	adc	r25, r25
    1b8a:	61 f0       	breq	.+24     	; 0x1ba4 <.L6^B1>
    1b8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b8e:	79 f0       	breq	.+30     	; 0x1bae <.L7^B1>

00001b90 <.L3^B1>:
    1b90:	87 95       	ror	r24
    1b92:	08 95       	ret

00001b94 <.L4^B1>:
    1b94:	12 16       	cp	r1, r18
    1b96:	13 06       	cpc	r1, r19
    1b98:	14 06       	cpc	r1, r20
    1b9a:	55 1f       	adc	r21, r21
    1b9c:	f2 cf       	rjmp	.-28     	; 0x1b82 <.L1^B1>

00001b9e <.L5^B1>:
    1b9e:	46 95       	lsr	r20
    1ba0:	f1 df       	rcall	.-30     	; 0x1b84 <__fp_splitA>
    1ba2:	08 c0       	rjmp	.+16     	; 0x1bb4 <.L8^B1>

00001ba4 <.L6^B1>:
    1ba4:	16 16       	cp	r1, r22
    1ba6:	17 06       	cpc	r1, r23
    1ba8:	18 06       	cpc	r1, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	f1 cf       	rjmp	.-30     	; 0x1b90 <.L3^B1>

00001bae <.L7^B1>:
    1bae:	86 95       	lsr	r24
    1bb0:	71 05       	cpc	r23, r1
    1bb2:	61 05       	cpc	r22, r1

00001bb4 <.L8^B1>:
    1bb4:	08 94       	sec
    1bb6:	08 95       	ret

00001bb8 <__fp_zero>:
    1bb8:	e8 94       	clt

00001bba <__fp_szero>:
    1bba:	bb 27       	eor	r27, r27
    1bbc:	66 27       	eor	r22, r22
    1bbe:	77 27       	eor	r23, r23
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	97 f9       	bld	r25, 7
    1bc4:	08 95       	ret

00001bc6 <__mulsf3>:
    1bc6:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__mulsf3x>
    1bca:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__fp_round>

00001bce <.L^B1>:
    1bce:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fp_pscA>
    1bd2:	38 f0       	brcs	.+14     	; 0x1be2 <.L1^B1>
    1bd4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fp_pscB>
    1bd8:	20 f0       	brcs	.+8      	; 0x1be2 <.L1^B1>
    1bda:	95 23       	and	r25, r21
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <.L1^B1>
    1bde:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__fp_inf>

00001be2 <.L1^B1>:
    1be2:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_nan>

00001be6 <.L2^B1>:
    1be6:	11 24       	eor	r1, r1
    1be8:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_szero>

00001bec <__mulsf3x>:
    1bec:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__fp_split3>
    1bf0:	70 f3       	brcs	.-36     	; 0x1bce <.L^B1>

00001bf2 <__mulsf3_pse>:
    1bf2:	95 9f       	mul	r25, r21
    1bf4:	c1 f3       	breq	.-16     	; 0x1be6 <.L2^B1>
    1bf6:	95 0f       	add	r25, r21
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	62 9f       	mul	r22, r18
    1bfe:	f0 01       	movw	r30, r0
    1c00:	72 9f       	mul	r23, r18
    1c02:	bb 27       	eor	r27, r27
    1c04:	f0 0d       	add	r31, r0
    1c06:	b1 1d       	adc	r27, r1
    1c08:	63 9f       	mul	r22, r19
    1c0a:	aa 27       	eor	r26, r26
    1c0c:	f0 0d       	add	r31, r0
    1c0e:	b1 1d       	adc	r27, r1
    1c10:	aa 1f       	adc	r26, r26
    1c12:	64 9f       	mul	r22, r20
    1c14:	66 27       	eor	r22, r22
    1c16:	b0 0d       	add	r27, r0
    1c18:	a1 1d       	adc	r26, r1
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	82 9f       	mul	r24, r18
    1c1e:	22 27       	eor	r18, r18
    1c20:	b0 0d       	add	r27, r0
    1c22:	a1 1d       	adc	r26, r1
    1c24:	62 1f       	adc	r22, r18
    1c26:	73 9f       	mul	r23, r19
    1c28:	b0 0d       	add	r27, r0
    1c2a:	a1 1d       	adc	r26, r1
    1c2c:	62 1f       	adc	r22, r18
    1c2e:	83 9f       	mul	r24, r19
    1c30:	a0 0d       	add	r26, r0
    1c32:	61 1d       	adc	r22, r1
    1c34:	22 1f       	adc	r18, r18
    1c36:	74 9f       	mul	r23, r20
    1c38:	33 27       	eor	r19, r19
    1c3a:	a0 0d       	add	r26, r0
    1c3c:	61 1d       	adc	r22, r1
    1c3e:	23 1f       	adc	r18, r19
    1c40:	84 9f       	mul	r24, r20
    1c42:	60 0d       	add	r22, r0
    1c44:	21 1d       	adc	r18, r1
    1c46:	82 2f       	mov	r24, r18
    1c48:	76 2f       	mov	r23, r22
    1c4a:	6a 2f       	mov	r22, r26
    1c4c:	11 24       	eor	r1, r1
    1c4e:	9f 57       	subi	r25, 0x7F	; 127
    1c50:	50 40       	sbci	r21, 0x00	; 0
    1c52:	9a f0       	brmi	.+38     	; 0x1c7a <.L13^B1>
    1c54:	f1 f0       	breq	.+60     	; 0x1c92 <.L15^B1>

00001c56 <.L10^B1>:
    1c56:	88 23       	and	r24, r24
    1c58:	4a f0       	brmi	.+18     	; 0x1c6c <.L11^B1>
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	bb 1f       	adc	r27, r27
    1c60:	66 1f       	adc	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	88 1f       	adc	r24, r24
    1c66:	91 50       	subi	r25, 0x01	; 1
    1c68:	50 40       	sbci	r21, 0x00	; 0
    1c6a:	a9 f7       	brne	.-22     	; 0x1c56 <.L10^B1>

00001c6c <.L11^B1>:
    1c6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c6e:	51 05       	cpc	r21, r1
    1c70:	80 f0       	brcs	.+32     	; 0x1c92 <.L15^B1>
    1c72:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__fp_inf>

00001c76 <.L12^B1>:
    1c76:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_szero>

00001c7a <.L13^B1>:
    1c7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7c:	e4 f3       	brlt	.-8      	; 0x1c76 <.L12^B1>
    1c7e:	98 3e       	cpi	r25, 0xE8	; 232
    1c80:	d4 f3       	brlt	.-12     	; 0x1c76 <.L12^B1>

00001c82 <.L14^B1>:
    1c82:	86 95       	lsr	r24
    1c84:	77 95       	ror	r23
    1c86:	67 95       	ror	r22
    1c88:	b7 95       	ror	r27
    1c8a:	f7 95       	ror	r31
    1c8c:	e7 95       	ror	r30
    1c8e:	9f 5f       	subi	r25, 0xFF	; 255
    1c90:	c1 f7       	brne	.-16     	; 0x1c82 <.L14^B1>

00001c92 <.L15^B1>:
    1c92:	fe 2b       	or	r31, r30
    1c94:	88 0f       	add	r24, r24
    1c96:	91 1d       	adc	r25, r1
    1c98:	96 95       	lsr	r25
    1c9a:	87 95       	ror	r24
    1c9c:	97 f9       	bld	r25, 7
    1c9e:	08 95       	ret

00001ca0 <do_rand>:
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	2a 97       	sbiw	r28, 0x0a	; 10
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	89 87       	std	Y+9, r24	; 0x09
    1cbe:	9a 87       	std	Y+10, r25	; 0x0a
    1cc0:	a9 85       	ldd	r26, Y+9	; 0x09
    1cc2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cc4:	2d 91       	ld	r18, X+
    1cc6:	3d 91       	ld	r19, X+
    1cc8:	4d 91       	ld	r20, X+
    1cca:	5c 91       	ld	r21, X
    1ccc:	29 83       	std	Y+1, r18	; 0x01
    1cce:	3a 83       	std	Y+2, r19	; 0x02
    1cd0:	4b 83       	std	Y+3, r20	; 0x03
    1cd2:	5c 83       	std	Y+4, r21	; 0x04
    1cd4:	23 2b       	or	r18, r19
    1cd6:	24 2b       	or	r18, r20
    1cd8:	25 2b       	or	r18, r21
    1cda:	41 f4       	brne	.+16     	; 0x1cec <.L2>
    1cdc:	24 e2       	ldi	r18, 0x24	; 36
    1cde:	39 ed       	ldi	r19, 0xD9	; 217
    1ce0:	4b e5       	ldi	r20, 0x5B	; 91
    1ce2:	57 e0       	ldi	r21, 0x07	; 7
    1ce4:	29 83       	std	Y+1, r18	; 0x01
    1ce6:	3a 83       	std	Y+2, r19	; 0x02
    1ce8:	4b 83       	std	Y+3, r20	; 0x03
    1cea:	5c 83       	std	Y+4, r21	; 0x04

00001cec <.L2>:
    1cec:	69 81       	ldd	r22, Y+1	; 0x01
    1cee:	7a 81       	ldd	r23, Y+2	; 0x02
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	2d e1       	ldi	r18, 0x1D	; 29
    1cf6:	33 ef       	ldi	r19, 0xF3	; 243
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__divmodsi4>
    1d00:	69 01       	movw	r12, r18
    1d02:	7a 01       	movw	r14, r20
    1d04:	a7 ea       	ldi	r26, 0xA7	; 167
    1d06:	b1 e4       	ldi	r27, 0x41	; 65
    1d08:	9b 01       	movw	r18, r22
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__muluhisi3>
    1d10:	69 83       	std	Y+1, r22	; 0x01
    1d12:	7a 83       	std	Y+2, r23	; 0x02
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	ac ee       	ldi	r26, 0xEC	; 236
    1d1a:	b4 ef       	ldi	r27, 0xF4	; 244
    1d1c:	a7 01       	movw	r20, r14
    1d1e:	96 01       	movw	r18, r12
    1d20:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__mulohisi3>
    1d24:	9b 01       	movw	r18, r22
    1d26:	ac 01       	movw	r20, r24
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d30:	82 0f       	add	r24, r18
    1d32:	93 1f       	adc	r25, r19
    1d34:	a4 1f       	adc	r26, r20
    1d36:	b5 1f       	adc	r27, r21
    1d38:	b7 ff       	sbrs	r27, 7
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <.L3>
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	a1 09       	sbc	r26, r1
    1d40:	b0 48       	sbci	r27, 0x80	; 128

00001d42 <.L3>:
    1d42:	e9 85       	ldd	r30, Y+9	; 0x09
    1d44:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d46:	80 83       	st	Z, r24
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	a2 83       	std	Z+2, r26	; 0x02
    1d4c:	b3 83       	std	Z+3, r27	; 0x03
    1d4e:	9f 77       	andi	r25, 0x7F	; 127
    1d50:	2a 96       	adiw	r28, 0x0a	; 10
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	df 90       	pop	r13
    1d66:	cf 90       	pop	r12
    1d68:	08 95       	ret

00001d6a <rand_r>:
    1d6a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <do_rand>
    1d6e:	08 95       	ret

00001d70 <rand>:
    1d70:	89 e0       	ldi	r24, 0x09	; 9
    1d72:	91 e0       	ldi	r25, 0x01	; 1
    1d74:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <do_rand>
    1d78:	08 95       	ret

00001d7a <srand>:
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	a0 e0       	ldi	r26, 0x00	; 0
    1d7e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <next>
    1d82:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <next+0x1>
    1d86:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <next+0x2>
    1d8a:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <next+0x3>
    1d8e:	08 95       	ret

00001d90 <eeprom_read_byte>:
    1d90:	f9 99       	sbic	0x1f, 1	; 31
    1d92:	fe cf       	rjmp	.-4      	; 0x1d90 <eeprom_read_byte>
    1d94:	92 bd       	out	0x22, r25	; 34
    1d96:	81 bd       	out	0x21, r24	; 33
    1d98:	f8 9a       	sbi	0x1f, 0	; 31
    1d9a:	99 27       	eor	r25, r25
    1d9c:	80 b5       	in	r24, 0x20	; 32
    1d9e:	08 95       	ret

00001da0 <eeprom_write_byte>:
    1da0:	26 2f       	mov	r18, r22

00001da2 <eeprom_write_r18>:
    1da2:	f9 99       	sbic	0x1f, 1	; 31
    1da4:	fe cf       	rjmp	.-4      	; 0x1da2 <eeprom_write_r18>
    1da6:	1f ba       	out	0x1f, r1	; 31
    1da8:	92 bd       	out	0x22, r25	; 34
    1daa:	81 bd       	out	0x21, r24	; 33
    1dac:	20 bd       	out	0x20, r18	; 32
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	fa 9a       	sbi	0x1f, 2	; 31
    1db4:	f9 9a       	sbi	0x1f, 1	; 31
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	08 95       	ret

00001dbc <__divmodsi4>:
    1dbc:	05 2e       	mov	r0, r21

00001dbe <.Loc.1>:
    1dbe:	97 fb       	bst	r25, 7

00001dc0 <.Loc.2>:
    1dc0:	1e f4       	brtc	.+6      	; 0x1dc8 <.L^B1>

00001dc2 <.Loc.3>:
    1dc2:	00 94       	com	r0

00001dc4 <.Loc.4>:
    1dc4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__negsi2>

00001dc8 <.L^B1>:
    1dc8:	57 fd       	sbrc	r21, 7

00001dca <.Loc.6>:
    1dca:	07 d0       	rcall	.+14     	; 0x1dda <__divmodsi4_neg2>

00001dcc <.Loc.7>:
    1dcc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__udivmodsi4>

00001dd0 <.Loc.8>:
    1dd0:	07 fc       	sbrc	r0, 7

00001dd2 <.Loc.9>:
    1dd2:	03 d0       	rcall	.+6      	; 0x1dda <__divmodsi4_neg2>

00001dd4 <.Loc.10>:
    1dd4:	4e f4       	brtc	.+18     	; 0x1de8 <__divmodsi4_exit>

00001dd6 <.Loc.11>:
    1dd6:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__negsi2>

00001dda <__divmodsi4_neg2>:
    1dda:	50 95       	com	r21

00001ddc <.Loc.13>:
    1ddc:	40 95       	com	r20

00001dde <.Loc.14>:
    1dde:	30 95       	com	r19

00001de0 <.Loc.15>:
    1de0:	21 95       	neg	r18

00001de2 <.Loc.16>:
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255

00001de4 <.Loc.17>:
    1de4:	4f 4f       	sbci	r20, 0xFF	; 255

00001de6 <.Loc.18>:
    1de6:	5f 4f       	sbci	r21, 0xFF	; 255

00001de8 <__divmodsi4_exit>:
    1de8:	08 95       	ret

00001dea <__negsi2>:
    1dea:	90 95       	com	r25
    1dec:	80 95       	com	r24
    1dee:	70 95       	com	r23
    1df0:	61 95       	neg	r22
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	8f 4f       	sbci	r24, 0xFF	; 255
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255

00001df8 <.Loc.1>:
    1df8:	08 95       	ret

00001dfa <__muluhisi3>:
    1dfa:	0e 94 1d 0c 	call	0x183a	; 0x183a <__umulhisi3>

00001dfe <.Loc.1>:
    1dfe:	a5 9f       	mul	r26, r21

00001e00 <.Loc.2>:
    1e00:	90 0d       	add	r25, r0

00001e02 <.Loc.3>:
    1e02:	b4 9f       	mul	r27, r20

00001e04 <.Loc.4>:
    1e04:	90 0d       	add	r25, r0

00001e06 <.Loc.5>:
    1e06:	a4 9f       	mul	r26, r20

00001e08 <.Loc.6>:
    1e08:	80 0d       	add	r24, r0

00001e0a <.Loc.7>:
    1e0a:	91 1d       	adc	r25, r1

00001e0c <.Loc.8>:
    1e0c:	11 24       	eor	r1, r1

00001e0e <.Loc.9>:
    1e0e:	08 95       	ret

00001e10 <__mulshisi3>:
    1e10:	b7 ff       	sbrs	r27, 7

00001e12 <.Loc.1>:
    1e12:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__muluhisi3>

00001e16 <__mulohisi3>:
    1e16:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__muluhisi3>

00001e1a <.Loc.3>:
    1e1a:	82 1b       	sub	r24, r18

00001e1c <.Loc.4>:
    1e1c:	93 0b       	sbc	r25, r19

00001e1e <.Loc.5>:
    1e1e:	08 95       	ret

00001e20 <__udivmodsi4>:
    1e20:	a1 e2       	ldi	r26, 0x21	; 33

00001e22 <.Loc.1>:
    1e22:	1a 2e       	mov	r1, r26

00001e24 <.Loc.2>:
    1e24:	aa 1b       	sub	r26, r26

00001e26 <.Loc.3>:
    1e26:	bb 1b       	sub	r27, r27

00001e28 <.Loc.4>:
    1e28:	fd 01       	movw	r30, r26

00001e2a <.Loc.5>:
    1e2a:	0d c0       	rjmp	.+26     	; 0x1e46 <__udivmodsi4_ep>

00001e2c <__udivmodsi4_loop>:
    1e2c:	aa 1f       	adc	r26, r26

00001e2e <.Loc.7>:
    1e2e:	bb 1f       	adc	r27, r27

00001e30 <.Loc.8>:
    1e30:	ee 1f       	adc	r30, r30

00001e32 <.Loc.9>:
    1e32:	ff 1f       	adc	r31, r31

00001e34 <.Loc.10>:
    1e34:	a2 17       	cp	r26, r18

00001e36 <.Loc.11>:
    1e36:	b3 07       	cpc	r27, r19

00001e38 <.Loc.12>:
    1e38:	e4 07       	cpc	r30, r20

00001e3a <.Loc.13>:
    1e3a:	f5 07       	cpc	r31, r21

00001e3c <.Loc.14>:
    1e3c:	20 f0       	brcs	.+8      	; 0x1e46 <__udivmodsi4_ep>

00001e3e <.Loc.15>:
    1e3e:	a2 1b       	sub	r26, r18

00001e40 <.Loc.16>:
    1e40:	b3 0b       	sbc	r27, r19

00001e42 <.Loc.17>:
    1e42:	e4 0b       	sbc	r30, r20

00001e44 <.Loc.18>:
    1e44:	f5 0b       	sbc	r31, r21

00001e46 <__udivmodsi4_ep>:
    1e46:	66 1f       	adc	r22, r22

00001e48 <.Loc.20>:
    1e48:	77 1f       	adc	r23, r23

00001e4a <.Loc.21>:
    1e4a:	88 1f       	adc	r24, r24

00001e4c <.Loc.22>:
    1e4c:	99 1f       	adc	r25, r25

00001e4e <.Loc.23>:
    1e4e:	1a 94       	dec	r1

00001e50 <.Loc.24>:
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <__udivmodsi4_loop>

00001e52 <.Loc.25>:
    1e52:	60 95       	com	r22

00001e54 <.Loc.26>:
    1e54:	70 95       	com	r23

00001e56 <.Loc.27>:
    1e56:	80 95       	com	r24

00001e58 <.Loc.28>:
    1e58:	90 95       	com	r25

00001e5a <.Loc.29>:
    1e5a:	9b 01       	movw	r18, r22

00001e5c <.Loc.30>:
    1e5c:	ac 01       	movw	r20, r24

00001e5e <.Loc.31>:
    1e5e:	bd 01       	movw	r22, r26

00001e60 <.Loc.32>:
    1e60:	cf 01       	movw	r24, r30

00001e62 <.Loc.33>:
    1e62:	08 95       	ret

00001e64 <_exit>:
    1e64:	f8 94       	cli

00001e66 <__stop_program>:
    1e66:	ff cf       	rjmp	.-2      	; 0x1e66 <__stop_program>

00001e68 <L0^A>:
    1e68:	f9 01       	movw	r30, r18
    1e6a:	e5 01       	movw	r28, r10
    1e6c:	b9 01       	movw	r22, r18
    1e6e:	af 01       	movw	r20, r30
    1e70:	b6 01       	movw	r22, r12
    1e72:	53 02       	muls	r21, r19
    1e74:	48 02       	muls	r20, r24

00001e76 <.L182>:
    1e76:	79 0a       	sbc	r7, r25
    1e78:	fd 08       	sbc	r15, r13
    1e7a:	fd 08       	sbc	r15, r13
    1e7c:	76 0a       	sbc	r7, r22
    1e7e:	19 0a       	sbc	r1, r25
    1e80:	15 0a       	sbc	r1, r21
    1e82:	11 0a       	sbc	r1, r17
    1e84:	0d 0a       	sbc	r0, r29
    1e86:	1c 0a       	sbc	r1, r28
    1e88:	e4 09       	sbc	r30, r4
    1e8a:	c1 09       	sbc	r28, r1
